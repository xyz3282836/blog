import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as i,o as n}from"./app-C6T3vai8.js";const h={};function s(r,e){return n(),a("div",null,e[0]||(e[0]=[i('<p>原文地址：https://google.github.io/building-secure-and-reliable-systems/raw/toc.html</p><h2 id="第1章-安全性与可靠性的交集" tabindex="-1"><a class="header-anchor" href="#第1章-安全性与可靠性的交集"><span>第1章 安全性与可靠性的交集</span></a></h2><h3 id="_1-2-设计注意事项" tabindex="-1"><a class="header-anchor" href="#_1-2-设计注意事项"><span>1.2 设计注意事项</span></a></h3><p>可靠性与安全性的权衡：冗余和事件管理</p><h3 id="_1-3-机密性-完整性-可用性" tabindex="-1"><a class="header-anchor" href="#_1-3-机密性-完整性-可用性"><span>1.3 机密性，完整性，可用性</span></a></h3><p>传统定义中，安全系统的基本属性包含机密性（confidentiality），完整性（integrity），可用性（availability），CIA 三要素</p><p>可用性，既关乎可用性，有关乎安全性。比较经典的 DDoS（distributed denial-of-service）分布式拒绝服务</p><h3 id="_1-4-共性" tabindex="-1"><a class="header-anchor" href="#_1-4-共性"><span>1.4 共性</span></a></h3><p>可靠性和安全性是系统设计中比较突出的属性，并且很难事后再加固，所以设计之初就需要考虑这两个属性，系统变更的过程中，很容易影响这两点，因此需要整个系统生命周期持续关注和测试它们。</p><h4 id="隐形" tabindex="-1"><a class="header-anchor" href="#隐形"><span>隐形</span></a></h4><p>没有紧急情况下，这两者的隐形意味着可以减少和推迟也不会立刻造成严重后果，一旦失效就会带来很严重的后果。</p><h4 id="评估" tabindex="-1"><a class="header-anchor" href="#评估"><span>评估</span></a></h4><p>根据所需要的错误预算（sre google 运维揭秘第三章）来计划工程工作，至少一部分是可以这样做的。攻防演练也可以评估。</p><h4 id="简洁性" tabindex="-1"><a class="header-anchor" href="#简洁性"><span>简洁性</span></a></h4><p>可以帮助提高评估能力，是最佳方法之一。见第 6 章。</p><h4 id="演变" tabindex="-1"><a class="header-anchor" href="#演变"><span>演变</span></a></h4><p>随着业务迭代发展，不可避免让系统变得复杂，从而积累技术债务。微小变更导致重大故障。（debian 和 youtube 的案例）</p><h4 id="弹性" tabindex="-1"><a class="header-anchor" href="#弹性"><span>弹性</span></a></h4><p>系统设计应该包含冗余和不同的故障域，从而通过重新路由请求来限制降低故障的影响。第 8 章深入这点。第 10 章深入探讨 DoS 缓解措施。</p><p>每个组件的弹性有上限，可以通过纵深防御和故障域来解决。前者是多种防御机制的集合（冗余也是一种），独立故障域是限制故障的爆炸半径。</p><p>划分权限和限制凭证的可用范围来实现不同故障域。</p><p>最新特权原则可用缓解内部威胁。</p><p>google 是使用多方授权来确保敏感操作由特定员工组审批。</p><h4 id="从设计到生产" tabindex="-1"><a class="header-anchor" href="#从设计到生产"><span>从设计到生产</span></a></h4><p>从代码阶段开始，通过代码审阅来发现潜在问题，甚至公共框架和库来防止。第 12 章深入探讨。</p><p>实际部署代码的方法也可以控制安全性和可靠性的风险。第 14 章说明。</p><h4 id="调查系统和日志" tabindex="-1"><a class="header-anchor" href="#调查系统和日志"><span>调查系统和日志</span></a></h4><p>需要制定计划来检测故障并从故障中恢复。</p><p>完善的日志记录是检测和防备故障的基础。第 15 章详述日志。日志越完整详细越好，但是也有注意事项，足够大的规模，大量日志带来很大成本，给分析日志带来困难。youtube 的案例说明日志也会带来可靠性的问题，还有安全问题，日志不应该包含认证凭证和个人身份信息等敏感信息。</p><h4 id="危机响应" tabindex="-1"><a class="header-anchor" href="#危机响应"><span>危机响应</span></a></h4><p>组织响应非常有挑战性，需要提前制定响应计划。</p><p>大的组织，需要 24 小时响应或者跨时区协作。安全事件存在矛盾，多方参与和限制信息传递。</p><p>危机期间，需要清晰的指挥链和坚实的检查清单，行动手册和协议。</p><p>google 已经转化为事件管理（Incident Management at Google，IMAG）来处理危机响应，并且定期使用灾难恢复测试系统（Disaster Recovery Testing program，DiRT）来模拟各种故障来迫使团队应用这些。第 16，17 章说明。</p><h4 id="恢复" tabindex="-1"><a class="header-anchor" href="#恢复"><span>恢复</span></a></h4><p>快速推送变更是把双刃剑，最终归结为风险评估和业务决策。</p><p>第 9 章和第 18 章讨论。</p><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h4><p>安全性和可靠性，最初很容易成为换取更快速度的代价，事后需要高昂的修复成本，所以需要尽早解决。</p><p>组织必须了解安全性和可靠性文化，第 21 章，涉及的角色和责任，见第 20 章。</p><h2 id="第2章-攻击者" tabindex="-1"><a class="header-anchor" href="#第2章-攻击者"><span>第2章 攻击者</span></a></h2><h3 id="_2-1-攻击者的动机" tabindex="-1"><a class="header-anchor" href="#_2-1-攻击者的动机"><span>2.1 攻击者的动机</span></a></h3><p>破坏安全性的首要攻击的是人，因此，可用通过攻击者的视角来考虑目的，让我们更好了解采取主动（系统设计时）和被动的（应急响应时）措施。</p><h3 id="_2-2-攻击者画像" tabindex="-1"><a class="header-anchor" href="#_2-2-攻击者画像"><span>2.2 攻击者画像</span></a></h3><p>黑客（hacking）</p><h4 id="业务爱好者" tabindex="-1"><a class="header-anchor" href="#业务爱好者"><span>业务爱好者</span></a></h4><p>技术专家</p><h4 id="漏洞研究人员" tabindex="-1"><a class="header-anchor" href="#漏洞研究人员"><span>漏洞研究人员</span></a></h4><p>漏洞奖励计划（vulnerability reward program），也称为漏洞赏金计划（bug bounty program），看 20 章。</p><h4 id="黑客活动专家" tabindex="-1"><a class="header-anchor" href="#黑客活动专家"><span>黑客活动专家</span></a></h4><p>黑客激进主义（hacktivism）</p><h4 id="犯罪分子" tabindex="-1"><a class="header-anchor" href="#犯罪分子"><span>犯罪分子</span></a></h4><p>通过技术威胁敏感数据而勒索受害者。</p><p>也有正常职业工作者处于某些目的而雇佣恶意攻击者。</p><h5 id="防御犯罪分子" tabindex="-1"><a class="header-anchor" href="#防御犯罪分子"><span>防御犯罪分子</span></a></h5><p>比如验证码。</p><h4 id="自动化和人工智能" tabindex="-1"><a class="header-anchor" href="#自动化和人工智能"><span>自动化和人工智能</span></a></h4><p>未来的一些攻击是可用没有人直接控制下执行的。</p><p>第 5 章，自动配置分发和访问证明。</p><p>第 14 章，代码自动构建，测试和部署。</p><p>第 8 章，DoS 攻击处理。</p><h4 id="内部人员" tabindex="-1"><a class="header-anchor" href="#内部人员"><span>内部人员</span></a></h4><p>组织的内部人员，内部风险就是这些人构成的威胁。</p><p>第 5 章，最小特权技术。</p><p>2009-1-31，40min，google 向每个用户每次搜索都显示不详的警告，原因是黑名单 list 被无意添加了&quot;/&quot;，匹配了所有网站。</p><h5 id="针对内部风险的设计" tabindex="-1"><a class="header-anchor" href="#针对内部风险的设计"><span>针对内部风险的设计</span></a></h5><p>检测和降低防范内部风险和恶意外部攻击者的两类风险的策略是类似的</p><ul><li>最小特权原则（第 5 章）</li><li>零信任（第 3 章）</li><li>多方授权（第 5 章）</li><li>业务缘由（第 5 章）</li><li>审计和检测（第 15 章）</li><li>可恢复性（第 9 章）</li></ul><h3 id="_2-3-攻击者方法论" tabindex="-1"><a class="header-anchor" href="#_2-3-攻击者方法论"><span>2.3 攻击者方法论</span></a></h3><p>比较典型的几个研究攻击者方法的框架：威胁情报，网络杀伤链和 TTP（攻击者如何工作）</p><h4 id="威胁情报" tabindex="-1"><a class="header-anchor" href="#威胁情报"><span>威胁情报</span></a></h4><p>对攻击做详细的描述。</p><ul><li>书面报告</li><li>失陷指标（indicator of compromise，IOC）是攻击的有限属性集</li><li>恶意软件报告</li></ul><h4 id="网络杀伤链" tabindex="-1"><a class="header-anchor" href="#网络杀伤链"><span>网络杀伤链</span></a></h4><p>cyber kill chain，用这种形式化框架来分析攻击。</p><h4 id="ttp" tabindex="-1"><a class="header-anchor" href="#ttp"><span>TTP</span></a></h4><p>对攻击者的 TTP 进行系统性的分类。</p><h3 id="_2-4-风险评估注意事项" tabindex="-1"><a class="header-anchor" href="#_2-4-风险评估注意事项"><span>2.4 风险评估注意事项</span></a></h3><ul><li>你可能没有意识到你是目标</li><li>攻击的复杂程度并不能真的帮你成功预测攻击</li><li>不要低估攻击者</li><li>归因是很难的</li><li>攻击者并不总是害怕被抓</li></ul><h2 id="第3章-安全代理" tabindex="-1"><a class="header-anchor" href="#第3章-安全代理"><span>第3章 安全代理</span></a></h2><h3 id="_3-1-生产环境中的安全代理" tabindex="-1"><a class="header-anchor" href="#_3-1-生产环境中的安全代理"><span>3.1 生产环境中的安全代理</span></a></h3><p>零接触生产（Zero Touch Production，ZTP）是 google 的一个项目。要求和生产环境的每个更改都必须自动化，非通过人工进行，由软件预先验证，或者经过审查的 Breakglass 机制触发。</p><h3 id="_3-2-google工具代理" tabindex="-1"><a class="header-anchor" href="#_3-2-google工具代理"><span>3.2 Google工具代理</span></a></h3><h2 id="第4章-设计中的权衡" tabindex="-1"><a class="header-anchor" href="#第4章-设计中的权衡"><span>第4章 设计中的权衡</span></a></h2><h3 id="_4-1-设计目标和要求" tabindex="-1"><a class="header-anchor" href="#_4-1-设计目标和要求"><span>4.1 设计目标和要求</span></a></h3><h4 id="特性需求" tabindex="-1"><a class="header-anchor" href="#特性需求"><span>特性需求</span></a></h4><p>特性需求，也叫功能需求；关键需求是至关重要的特性需求。</p><h4 id="非功能性需求" tabindex="-1"><a class="header-anchor" href="#非功能性需求"><span>非功能性需求</span></a></h4><p>侧重于系统的通用属性或行为，和安全性和可靠性相关。</p><h4 id="功能与涌现特性" tabindex="-1"><a class="header-anchor" href="#功能与涌现特性"><span>功能与涌现特性</span></a></h4><p>可靠性和安全性是系统设计中的涌现特性</p><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h4><p>google 设计文档模版中可靠性和安全性相关的部分</p><ul><li>可扩展性</li><li>冗余和可靠性</li><li>依赖的注意事项</li><li>数据的完整性</li><li>SLA 要求</li><li>安全和隐私考虑</li></ul><h3 id="_4-2-需求平衡" tabindex="-1"><a class="header-anchor" href="#_4-2-需求平衡"><span>4.2 需求平衡</span></a></h3><p><strong>增强现有系统的可靠性和安全性所需的成本</strong></p><p>安全性和可靠性的涌现特性意味着，与之相关的设计通常是最基础的，本质上类似于基础架构体系选型。例如是选用单体架构还是微服务架构。</p><p>如果现存系统设计之初没考虑这两点，后期很难加进去。</p><p>如果缺乏组件间良好且易于理解的接口定义，同时包含复杂的依赖项，那么它的可用性处于较低的水平，而且容易出现安全问题，即使再多测试和修复也无法改变。</p><p>改变现有系统，通常需要很大的时间和成本。而且对于已有系统带来其他缺陷的风险，因此，早期设计系统之初就要考虑安全性和可靠性。</p><h4 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1"><span>案例</span></a></h4><h3 id="_4-3-处理紧张局势和统一目标" tabindex="-1"><a class="header-anchor" href="#_4-3-处理紧张局势和统一目标"><span>4.3 处理紧张局势和统一目标</span></a></h3><h4 id="案例-2" tabindex="-1"><a class="header-anchor" href="#案例-2"><span>案例</span></a></h4><h4 id="统一涌现特性的需求" tabindex="-1"><a class="header-anchor" href="#统一涌现特性的需求"><span>统一涌现特性的需求</span></a></h4><h3 id="_4-4-初始速度和持续速度" tabindex="-1"><a class="header-anchor" href="#_4-4-初始速度和持续速度"><span>4.4 初始速度和持续速度</span></a></h3><p>结论：团队文化中尽早嵌入安全性和可靠性是很重要的</p><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1"><span>小结</span></a></h3><p>安全性和可靠性是整个开发和运营流程中的主要涌现特性。</p><p>安全性，可靠性和功能需求之间有诸多权衡，甚至乍一看是互相冲突的。早期避开前两者似乎很提升了效率，但是带来巨大的成本和风险。</p><h2 id="第5章-最新特权设计" tabindex="-1"><a class="header-anchor" href="#第5章-最新特权设计"><span>第5章 最新特权设计</span></a></h2><p>最小特权设计过程中可能面临权衡和冲突。</p><p>人总是会犯错，引用 SRE 的座右铭，“希望不是一种战略”。</p><h3 id="_5-1-概念和术语" tabindex="-1"><a class="header-anchor" href="#_5-1-概念和术语"><span>5.1 概念和术语</span></a></h3><h4 id="最小特权" tabindex="-1"><a class="header-anchor" href="#最小特权"><span>最小特权</span></a></h4><p>拒绝给工具授予绝对权限，尽可能确保用户没有环境特权，如 root 身份登入权限</p><h4 id="零信任网络" tabindex="-1"><a class="header-anchor" href="#零信任网络"><span>零信任网络</span></a></h4><p>设计原则从零信任网络开始，不授予用户所在网络位置的任何访问特权，如内网不能比外网 vpn 获得更多访问权限。系统根据用户凭证和设备凭证的组合授权访问权限。</p><h4 id="零接触" tabindex="-1"><a class="header-anchor" href="#零接触"><span>零接触</span></a></h4><p>自动化构建最小特权概念，目标就是零接触界面。第三章有 ZTP 和 ZTN。</p><h3 id="_5-2-基于风险的访问分类" tabindex="-1"><a class="header-anchor" href="#_5-2-基于风险的访问分类"><span>5.2 基于风险的访问分类</span></a></h3><p>并非所有数据和操作都是对等的，需要根据影响，安全风险和关键程度对访问进行分类。</p><h3 id="_5-3-最佳实践" tabindex="-1"><a class="header-anchor" href="#_5-3-最佳实践"><span>5.3 最佳实践</span></a></h3><h4 id="api-功能最小化" tabindex="-1"><a class="header-anchor" href="#api-功能最小化"><span>API 功能最小化</span></a></h4><h4 id="breakglass-机制" tabindex="-1"><a class="header-anchor" href="#breakglass-机制"><span>Breakglass 机制</span></a></h4><p>紧急情况下打碎玻璃，在非预期情况下恢复服务。</p><h4 id="审计" tabindex="-1"><a class="header-anchor" href="#审计"><span>审计</span></a></h4><p>用于检测不正确的授权。</p><p>在Google，执行两大类的审计：</p><ul><li>审计确保遵循最佳实践的做法</li><li>审计确认安全违规事件</li></ul><p>最佳实践类的审核是为了支持可靠性的目标。SRE团队每周团队会议期间审核上周使用Breakglass机制的事件，形成文化压力，要求使用和改进最小化的服务管理类API，而不是使用Breakglass来作为常规工作。</p><p>Google通常会将Breakglass事件的审计下饭到团队级别。</p><p>在Google，倾向于第二类审计，因为大组织的多方位视角有益于识别外部的安全漏洞。</p><p>在Google，使用结构化论证。将结构化数据与审核日志事件关联起来。例如客户支持人员查看客户的付款详细信息或者其他敏感信息时，可以将这些数据与特定的客户咨询单相关联。这样可以确保观察到的数据属于寻求咨询的客户。</p><h4 id="测试和最小特权" tabindex="-1"><a class="header-anchor" href="#测试和最小特权"><span>测试和最小特权</span></a></h4><p>合理的测试是任何一个设计精良的系统的基础属性。</p><p>最小特权，两个维度：</p><ul><li><strong>针对</strong>最小特权的测试，确保仅授予必要资源的访问权限</li><li><strong>使用</strong>最小特权进行测试，确保用于测试的基础设施仅具有所需的访问权限</li></ul><p>安全性和可靠性的权衡：测试环境</p><p>测试的最佳实践很美好，但是构建适当的测试基础设施的潜在成本很高，但是反过来考虑下没有适当的测试基础设施的成本也很高。所以<code>投入-产出比</code>分析很重要。</p><h4 id="诊断被拒绝的访问" tabindex="-1"><a class="header-anchor" href="#诊断被拒绝的访问"><span>诊断被拒绝的访问</span></a></h4><h4 id="优雅失败和breakglass机制" tabindex="-1"><a class="header-anchor" href="#优雅失败和breakglass机制"><span>优雅失败和Breakglass机制</span></a></h4><h3 id="_5-4-工作案例-配置分发" tabindex="-1"><a class="header-anchor" href="#_5-4-工作案例-配置分发"><span>5.4 工作案例：配置分发</span></a></h3><h3 id="_5-5-认证和授权决策的策略框架" tabindex="-1"><a class="header-anchor" href="#_5-5-认证和授权决策的策略框架"><span>5.5 认证和授权决策的策略框架</span></a></h3><p>授权控件：有如因素授权MFA，多方授权MPA</p><p>随着组织的发展，标准化是必须的。</p><h3 id="_5-6-高级控制" tabindex="-1"><a class="header-anchor" href="#_5-6-高级控制"><span>5.6 高级控制</span></a></h3><h4 id="mpa" tabindex="-1"><a class="header-anchor" href="#mpa"><span>MPA</span></a></h4><p>让另外一个人参与进来是确保访问决策正确的一种经典方法。</p><p>MPA通常用于大范围的访问控制。</p><h4 id="_3fa" tabindex="-1"><a class="header-anchor" href="#_3fa"><span>3FA</span></a></h4><p>MFA有关键弱点，所有审批的“多方”，都使用集中管理的工作站，一旦一个被攻破，工作站同质化程度高，其他甚至全部工作站被攻破可能越高。</p><p>一种选择是要求某些非常危险的操作获得已加固移动平台的授权。</p><p>简单起见，只允许RPC来源完全托管桌面工作站，然后需要来自移动平台的三因素授权（3FA）。发现对于移动平台加固用户更能接受。</p><p>在google，复用向android手机发送通知的基础设施，用于授权以及向用户报告尝试登入google账户的行为。</p><h4 id="临时访问" tabindex="-1"><a class="header-anchor" href="#临时访问"><span>临时访问</span></a></h4><h4 id="代理" tabindex="-1"><a class="header-anchor" href="#代理"><span>代理</span></a></h4><h3 id="_5-7-权衡和冲突" tabindex="-1"><a class="header-anchor" href="#_5-7-权衡和冲突"><span>5.7 权衡和冲突</span></a></h3><p>采用最小特权原则的访问模型肯定会改善组织的安全姿态，但是必须将前面各点概述的优势与实施后的潜在成本相抵消。下面说下成本。</p><h4 id="增加了安全的复杂性" tabindex="-1"><a class="header-anchor" href="#增加了安全的复杂性"><span>增加了安全的复杂性</span></a></h4><h4 id="对合作商以及公司文化的影响" tabindex="-1"><a class="header-anchor" href="#对合作商以及公司文化的影响"><span>对合作商以及公司文化的影响</span></a></h4><p>代码权限放开有风险，但是也有好处。</p><h4 id="影响安全性的质量数据和系统" tabindex="-1"><a class="header-anchor" href="#影响安全性的质量数据和系统"><span>影响安全性的质量数据和系统</span></a></h4><h4 id="对用户工作效率的影响" tabindex="-1"><a class="header-anchor" href="#对用户工作效率的影响"><span>对用户工作效率的影响</span></a></h4><h4 id="对开发复杂性的影响" tabindex="-1"><a class="header-anchor" href="#对开发复杂性的影响"><span>对开发复杂性的影响</span></a></h4><h2 id="第6章-面向易理解的设计" tabindex="-1"><a class="header-anchor" href="#第6章-面向易理解的设计"><span>第6章 面向易理解的设计</span></a></h2><h2 id="第7章-适应变化的设计" tabindex="-1"><a class="header-anchor" href="#第7章-适应变化的设计"><span>第7章 适应变化的设计</span></a></h2><blockquote><p>唯一不变的就是变化本身。—— 古希腊哲学家赫拉克利特（Heraclitus of Ephesus）</p></blockquote><h3 id="_7-1-安全变更的类型" tabindex="-1"><a class="header-anchor" href="#_7-1-安全变更的类型"><span>7.1 安全变更的类型</span></a></h3><h3 id="_7-2-变更中的设计" tabindex="-1"><a class="header-anchor" href="#_7-2-变更中的设计"><span>7.2 变更中的设计</span></a></h3><h3 id="_7-3-让发布更容易的架构决策" tabindex="-1"><a class="header-anchor" href="#_7-3-让发布更容易的架构决策"><span>7.3 让发布更容易的架构决策</span></a></h3><h4 id="让依赖项保持最新并频繁重建" tabindex="-1"><a class="header-anchor" href="#让依赖项保持最新并频繁重建"><span>让依赖项保持最新并频繁重建</span></a></h4><p>主要指的是依赖的开源项目，openssl，linux kernel等，大型开源项目有完善的安全漏洞响应和修复计划。</p><h4 id="用自动化测试让发布更频繁" tabindex="-1"><a class="header-anchor" href="#用自动化测试让发布更频繁"><span>用自动化测试让发布更频繁</span></a></h4><p>大版本拆分成许多小版本，并且实施自动化测试和验证。</p><h4 id="使用容器" tabindex="-1"><a class="header-anchor" href="#使用容器"><span>使用容器</span></a></h4><h4 id="使用微服务" tabindex="-1"><a class="header-anchor" href="#使用微服务"><span>使用微服务</span></a></h4><p>Google的前端设计（Google Front End，GFE），类似大网关的设计。</p><h3 id="_7-4-不同的变更-不同的速度与不同的时间线" tabindex="-1"><a class="header-anchor" href="#_7-4-不同的变更-不同的速度与不同的时间线"><span>7.4 不同的变更：不同的速度与不同的时间线</span></a></h3><p>不是所有变更都会在相同的时间线上或者以相同的速度发生。</p><p>Google处理3个变更时间范围：</p><ul><li>新安全漏洞的短期变更</li><li>新产品逐步落地的中期变更</li><li>监管原因是的Google必须建立新系统才能落地的长期变更</li></ul><h4 id="短期变更-零日漏洞" tabindex="-1"><a class="header-anchor" href="#短期变更-零日漏洞"><span>短期变更：零日漏洞</span></a></h4><p>案例：破壳漏洞（shellshock）</p><p>Google的几点建议：</p><ul><li>最大限度地标准化软件发布</li><li>理想情况使用公共的分发标准</li><li>确保可以为紧急情况下的变更实施加速机制</li><li>确保有监控来跟踪部署进度，定位未打补丁的系统以确定仍存在的漏洞的位置</li><li>在响应工作中尽可能早地准备外部沟通</li><li>提前起草可复用的事件或漏洞响应计划</li><li>了解哪些系统是非标准的或需要特别关注</li></ul><h4 id="中期变更-改善安全态势" tabindex="-1"><a class="header-anchor" href="#中期变更-改善安全态势"><span>中期变更：改善安全态势</span></a></h4><p>案例：使用FIDO安全密钥实现的强制双因素身份认证机制</p><p>Google以前使用一次性秘密（OTP），后面调研来双因素身份认证（2FA），最终选择了通用双因素硬件安全令牌（U2F）</p><h4 id="长期变更-外部需求" tabindex="-1"><a class="header-anchor" href="#长期变更-外部需求"><span>长期变更：外部需求</span></a></h4><p>案例：提升https的使用率</p><h3 id="_7-5-难点-计划调整" tabindex="-1"><a class="header-anchor" href="#_7-5-难点-计划调整"><span>7.5 难点：计划调整</span></a></h3><p>可能需要根据外部因素延迟变更</p><p>可能需要加快基于公开声明的变更</p><p>可能受到的影响不够严重</p><p>可能依赖于外部各方</p><h3 id="_7-6-不断扩大的范围-心脏滴血漏洞" tabindex="-1"><a class="header-anchor" href="#_7-6-不断扩大的范围-心脏滴血漏洞"><span>7.6 不断扩大的范围：心脏滴血漏洞</span></a></h3><h2 id="第8章-弹性设计" tabindex="-1"><a class="header-anchor" href="#第8章-弹性设计"><span>第8章 弹性设计</span></a></h2><p>好的系统设计应该包含弹性规划：系统抵御攻击和承受异常情况</p><p>弹性设计与易恢复设计不同，虽然密切相关，后者关注系统损坏后自我修复的能力，前者意味着<strong>经得起</strong>破坏的系统。弹性系统和恢复性系统都可以更好地从故障中恢复，并且人工干预最小化。</p><h3 id="_8-1-弹性设计原则" tabindex="-1"><a class="header-anchor" href="#_8-1-弹性设计原则"><span>8.1 弹性设计原则</span></a></h3><ul><li>将系统设计成每一层都具备弹性的状态</li><li>确定每项功能的优秀级及其成本</li><li>按照明确的边界定义划分系统</li><li>利用部分区域冗余防止局部故障</li><li>通过尽可能多而安全地自动执行弹性措施，缩短系统的反应时间</li><li>通过验证系统的弹性属性（包括自动响应和系统的其他弹性属性）来维护系统的有效性</li></ul><h3 id="_8-2-纵深防御" tabindex="-1"><a class="header-anchor" href="#_8-2-纵深防御"><span>8.2 纵深防御</span></a></h3><p>通过建立多层防御边界来保护系统</p><h4 id="特洛伊木马" tabindex="-1"><a class="header-anchor" href="#特洛伊木马"><span>特洛伊木马</span></a></h4><ol><li>威胁建模和漏洞发现</li><li>部署</li><li>执行</li><li>攻破</li></ol><h4 id="google-app-engine分析" tabindex="-1"><a class="header-anchor" href="#google-app-engine分析"><span>Google App Engine分析</span></a></h4><ol><li>存在风险的api</li><li>运行时层</li></ol><h3 id="_8-3-控制降级" tabindex="-1"><a class="header-anchor" href="#_8-3-控制降级"><span>8.3 控制降级</span></a></h3><ul><li>通过禁用不常用的功能、最不重要的功能或高成本的服务功能</li><li>让系统响应措施快速、自动生效</li><li>了解对公式来说至关重要的系统，以及它们的相对重要性和相互依赖性</li></ul><p>安全性和可靠性的权衡：可控降级</p><h4 id="区分故障成本" tabindex="-1"><a class="header-anchor" href="#区分故障成本"><span>区分故障成本</span></a></h4><ul><li>确定单个运营环节的总成本</li><li>确定这些成本发生在运营中的哪个阶段</li></ul><p>有了这些信息就可以寻找处可能会推迟高成本操作的变更，直到系统成功恢复</p><ol><li>计算资源。服务器了解自己的健康状态在下降，可以切换到lame-duck模式，让上游减少或者停止调用</li><li>用户体验。可以添加离线模式</li><li>缓解速度。</li></ol><h4 id="部署响应机制" tabindex="-1"><a class="header-anchor" href="#部署响应机制"><span>部署响应机制</span></a></h4><p>建议的连个特定的自动化策略</p><ul><li>降低负载通过返回错误完成</li><li><strong><s>对客户端的限制是通过将响应延迟到接近截止时间来实现的</s></strong>（有问题的策略）</li></ul><ol><li>降低负载</li><li>限流（等待的方式，Google 运维揭秘 21章）</li><li>自动响应（中央限流server）</li></ol><h4 id="负责任的自动化" tabindex="-1"><a class="header-anchor" href="#负责任的自动化"><span>负责任的自动化</span></a></h4><h5 id="失效安全-fail-safe-与失效保障-fail-secure" tabindex="-1"><a class="header-anchor" href="#失效安全-fail-safe-与失效保障-fail-secure"><span>失效安全（fail-safe）与失效保障（fail-secure）</span></a></h5><p>两者需要权衡</p><p>失效安全等于故障时打开，保持运营，默认ACL（Access Control List），allow all</p><p>失效保障等于故障时关闭，保持安全，默认ACL，deny all</p><h5 id="人类的立足点" tabindex="-1"><a class="header-anchor" href="#人类的立足点"><span>人类的立足点</span></a></h5><p>允许人为干预到服务降级决策中，需要在系统设计中进行一些预设。</p><h3 id="_8-4-控制爆炸半径" tabindex="-1"><a class="header-anchor" href="#_8-4-控制爆炸半径"><span>8.4 控制爆炸半径</span></a></h3><p>为了提高安全性的常见方法是对网络进行分段</p><h4 id="角色分离" tabindex="-1"><a class="header-anchor" href="#角色分离"><span>角色分离</span></a></h4><p>服务账户</p><h4 id="位置分离" tabindex="-1"><a class="header-anchor" href="#位置分离"><span>位置分离</span></a></h4><p>多机房</p><h5 id="统一物理和逻辑架构" tabindex="-1"><a class="header-anchor" href="#统一物理和逻辑架构"><span>统一物理和逻辑架构</span></a></h5><h5 id="信任隔离" tabindex="-1"><a class="header-anchor" href="#信任隔离"><span>信任隔离</span></a></h5><p>基于区域的信任限制</p><h5 id="机密性隔离" tabindex="-1"><a class="header-anchor" href="#机密性隔离"><span>机密性隔离</span></a></h5><p>有了信任隔离的系统，就需要隔离加密密钥</p><h4 id="时间分离" tabindex="-1"><a class="header-anchor" href="#时间分离"><span>时间分离</span></a></h4><p>基于时间来限制攻击者的能力，定期轮换密钥和凭证</p><h3 id="_8-5-故障域和冗余" tabindex="-1"><a class="header-anchor" href="#_8-5-故障域和冗余"><span>8.5 故障域和冗余</span></a></h3><p>需要平衡的方案</p><ul><li>将系统分解成独立的故障域</li><li>将降低单一根源影响到多个故障域的概率作为目标</li><li>创建可替换故障资源、组间或程序的冗余备份</li></ul><h4 id="故障域" tabindex="-1"><a class="header-anchor" href="#故障域"><span>故障域</span></a></h4><p>控制爆炸半径的一种措施。故障域不是按角色、区域或时间分离，而是通过将系统划分为多个等价但完全独立的副本来实现功能隔离</p><h5 id="功能隔离" tabindex="-1"><a class="header-anchor" href="#功能隔离"><span>功能隔离</span></a></h5><p>操作和保持隔离需要持续投入工作。这样做换来的好处是故障域增加了系统的弹性，其他控制爆炸半径的措施无法做到。</p><h5 id="数据隔离" tabindex="-1"><a class="header-anchor" href="#数据隔离"><span>数据隔离</span></a></h5><p>建议两种方法来实现数据隔离</p><h4 id="组件类型" tabindex="-1"><a class="header-anchor" href="#组件类型"><span>组件类型</span></a></h4><p>一个故障域的弹性质量是由它的组件及其依赖项两方面的可靠性综合表现出来的。</p><h5 id="大容量组件" tabindex="-1"><a class="header-anchor" href="#大容量组件"><span>大容量组件</span></a></h5><p>大容量的服务</p><h5 id="高可用组件" tabindex="-1"><a class="header-anchor" href="#高可用组件"><span>高可用组件</span></a></h5><h5 id="低依赖的组件" tabindex="-1"><a class="header-anchor" href="#低依赖的组件"><span>低依赖的组件</span></a></h5><h4 id="控制冗余" tabindex="-1"><a class="header-anchor" href="#控制冗余"><span>控制冗余</span></a></h4><h5 id="故障转移策略" tabindex="-1"><a class="header-anchor" href="#故障转移策略"><span>故障转移策略</span></a></h5><h3 id="_8-6-持续验证-重点看下" tabindex="-1"><a class="header-anchor" href="#_8-6-持续验证-重点看下"><span>8.6 持续验证（重点看下）</span></a></h3><p>混沌工程可以作为主要手段</p><h4 id="验证关键区域" tabindex="-1"><a class="header-anchor" href="#验证关键区域"><span>验证关键区域</span></a></h4><p><strong>1.注入预期的行为变化</strong></p><p><strong>2.将紧急组件作为正常工作的一部分</strong></p><p>高可用系统通过镜像进行请求验证，客户端发送两个相同的请求，一个发送到大容量组件，另一个发送到高可用性组件</p><p><strong>3.无法镜像请求时就拆分</strong></p><p><strong>4.允许超额使用，但防止自满</strong></p><p><strong>5.测算密钥轮换周期</strong></p><h4 id="验证实践" tabindex="-1"><a class="header-anchor" href="#验证实践"><span>验证实践</span></a></h4><h3 id="_8-7-实践建议" tabindex="-1"><a class="header-anchor" href="#_8-7-实践建议"><span>8.7 实践建议</span></a></h3><p>设计弹性系统不容易。</p><p>先按成本排序</p><ol><li>故障域和控制爆炸半径的成本最低</li><li>高可用性服务是下一个最具性价比的解决方案</li><li>对自动化进行投入能实现弹性，考虑部署降低负载和限流功能</li><li>评估防御DoS攻击的有效性</li><li>如果你构建的是低依赖性解决方案，请引入一个流程或机制来确保它在一段时间内能保持低依赖性</li></ol><p>一些帮助</p><ul><li>部署故障域和控制爆炸半径将对未来的系统产生持久的影响。<strong>隔离技术</strong>可以鼓励或强制良好的划分运营故障域。一旦实现到位，它们将不可避免地让实施和部署不必要的耦合或脆弱系统难以实现。</li><li><strong>定期变更</strong>密钥和轮换的技术和演示不仅可以为安全事件做好准备，还可以提供加密的灵活性。例如，可以升级加密原语。</li><li>部署服务的<strong>高可用性</strong>实例带来的额外成本相对较低，这提供了一种经济实惠的方式来考察你可以在多大程度上提高服务的可用性。弃用它的成本也很低。</li><li>降低负载和<strong>限流</strong>的功能，以及在 8.3 节中涉及的其他方法，可以降低公司需要维护的资源成本。由此产生的用户可见的改进通常适用于最有价值的产品功能。</li><li>在防御 DoS 攻击时，<strong>可控降级</strong>至关重要，有助于提高第一反应的速度和效率。</li><li>低依赖性的解决方案相对比较昂贵，在实践中很少使用。要确定它们是否物有所值，了解一下需要<strong>多长时间</strong>才能提出业务关键型服务的所有依赖项，这有助于确定这些服务是否物有所值。然后你可以比较一下成本，并得出结论：把时间投入到别处是否更好。</li></ul><p>即使弹性设计，也可能在某个时候弹性不足而崩溃，那么在这之后如何恢复受损的系统，将损失的影响降到最低就是面向恢复的设计。</p><h2 id="第9章-面向恢复的设计" tabindex="-1"><a class="header-anchor" href="#第9章-面向恢复的设计"><span>第9章 面向恢复的设计</span></a></h2><h3 id="_9-1-恢复的对象" tabindex="-1"><a class="header-anchor" href="#_9-1-恢复的对象"><span>9.1 恢复的对象</span></a></h3><p>随机错误，意外错误，软件错误和恶意行为</p><h4 id="随机错误" tabindex="-1"><a class="header-anchor" href="#随机错误"><span>随机错误</span></a></h4><p>硬件故障</p><p>意外的位翻转</p><p>自然灾害</p><h4 id="意外错误" tabindex="-1"><a class="header-anchor" href="#意外错误"><span>意外错误</span></a></h4><p>人出于善意的操作而导致的错误</p><h4 id="软件错误" tabindex="-1"><a class="header-anchor" href="#软件错误"><span>软件错误</span></a></h4><p>开发过程中常见的bug等</p><h4 id="恶意行为" tabindex="-1"><a class="header-anchor" href="#恶意行为"><span>恶意行为</span></a></h4><h3 id="_9-2-恢复机制的设计原则" tabindex="-1"><a class="header-anchor" href="#_9-2-恢复机制的设计原则"><span>9.2 恢复机制的设计原则</span></a></h3><h4 id="面向快捷恢复的设计" tabindex="-1"><a class="header-anchor" href="#面向快捷恢复的设计"><span>面向快捷恢复的设计</span></a></h4><p>xxx</p><p>常规发布系统和紧急回滚系统是同一个系统</p><h4 id="限制对外部世界观念的依赖" tabindex="-1"><a class="header-anchor" href="#限制对外部世界观念的依赖"><span>限制对外部世界观念的依赖</span></a></h4><h4 id="回滚所代表的安全性和可靠性的权衡" tabindex="-1"><a class="header-anchor" href="#回滚所代表的安全性和可靠性的权衡"><span>回滚所代表的安全性和可靠性的权衡</span></a></h4><h4 id="使用显式吊销机制" tabindex="-1"><a class="header-anchor" href="#使用显式吊销机制"><span>使用显式吊销机制</span></a></h4><h4 id="了解精确到字节的预期状态" tabindex="-1"><a class="header-anchor" href="#了解精确到字节的预期状态"><span>了解精确到字节的预期状态</span></a></h4><p><strong>主机管理</strong></p><p><strong>设备固件</strong></p><p>Google的包管理系统，不允许单独配置和安装包，不允许只成功一半，都要保证成功，否则回滚。</p><p>Spanner是Google的全球分布式数据库，支持外部一致的分布式事务，要求数据中心之间及时保持数据同步，依赖供应商提供的特殊硬件来与外部时间源进行对接。</p><p><strong>全局服务</strong></p><p>系统最难恢复的区域可能是最高抽象层和基础设施中最持久的部分，如存储，名字服务和身份服务。</p><p><strong>持久性数据</strong></p><blockquote><p>没人关心备份，他们只关心恢复</p></blockquote><h3 id="_9-3-紧急访问" tabindex="-1"><a class="header-anchor" href="#_9-3-紧急访问"><span>9.3 紧急访问</span></a></h3><p>当无法开展全局范围内的合作时，可以在各个小区域，尝试独立解决问题。</p><h4 id="访问控制" tabindex="-1"><a class="header-anchor" href="#访问控制"><span>访问控制</span></a></h4><h4 id="通信" tabindex="-1"><a class="header-anchor" href="#通信"><span>通信</span></a></h4><p>通信技术，在线会议等</p><h4 id="响应人员的习惯" tabindex="-1"><a class="header-anchor" href="#响应人员的习惯"><span>响应人员的习惯</span></a></h4><p>定期开展紧急访问演习，融入日常习惯中，并且持续验证相关系统的可用性。增强一种<strong>确定感</strong>，当发生事件时，能保证团队确实拥有相关资质，并且接受必要培训，否则可强制要求演练。</p><p>保障相关文档的可用性。</p><h3 id="_9-4-预期外的收益" tabindex="-1"><a class="header-anchor" href="#_9-4-预期外的收益"><span>9.4 预期外的收益</span></a></h3><p>面向易恢复设计的机器已经有了安全和自动化的解决方案。</p>',310)]))}const d=l(h,[["render",s],["__file","bsrs.html.vue"]]),c=JSON.parse('{"path":"/tech/book/bsrs.html","title":"系统架构揭秘--构建安全可靠的系统","lang":"zh-CN","frontmatter":{"title":"系统架构揭秘--构建安全可靠的系统","date":"2023-06-14T05:07:00.000Z","category":"architecture","tag":["secure","reliable"],"description":"原文地址：https://google.github.io/building-secure-and-reliable-systems/raw/toc.html 第1章 安全性与可靠性的交集 1.2 设计注意事项 可靠性与安全性的权衡：冗余和事件管理 1.3 机密性，完整性，可用性 传统定义中，安全系统的基本属性包含机密性（confidentiality...","head":[["meta",{"property":"og:url","content":"https://blog.ruizhou.cf/tech/book/bsrs.html"}],["meta",{"property":"og:site_name","content":"rz blog"}],["meta",{"property":"og:title","content":"系统架构揭秘--构建安全可靠的系统"}],["meta",{"property":"og:description","content":"原文地址：https://google.github.io/building-secure-and-reliable-systems/raw/toc.html 第1章 安全性与可靠性的交集 1.2 设计注意事项 可靠性与安全性的权衡：冗余和事件管理 1.3 机密性，完整性，可用性 传统定义中，安全系统的基本属性包含机密性（confidentiality..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-26T16:16:19.000Z"}],["meta",{"property":"article:tag","content":"secure"}],["meta",{"property":"article:tag","content":"reliable"}],["meta",{"property":"article:published_time","content":"2023-06-14T05:07:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-26T16:16:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统架构揭秘--构建安全可靠的系统\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-14T05:07:00.000Z\\",\\"dateModified\\":\\"2024-01-26T16:16:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ruizhou\\",\\"url\\":\\"https://blog.ruizhou.cf\\"}]}"]]},"headers":[{"level":2,"title":"第1章 安全性与可靠性的交集","slug":"第1章-安全性与可靠性的交集","link":"#第1章-安全性与可靠性的交集","children":[{"level":3,"title":"1.2 设计注意事项","slug":"_1-2-设计注意事项","link":"#_1-2-设计注意事项","children":[]},{"level":3,"title":"1.3 机密性，完整性，可用性","slug":"_1-3-机密性-完整性-可用性","link":"#_1-3-机密性-完整性-可用性","children":[]},{"level":3,"title":"1.4 共性","slug":"_1-4-共性","link":"#_1-4-共性","children":[{"level":4,"title":"隐形","slug":"隐形","link":"#隐形","children":[]},{"level":4,"title":"评估","slug":"评估","link":"#评估","children":[]},{"level":4,"title":"简洁性","slug":"简洁性","link":"#简洁性","children":[]},{"level":4,"title":"演变","slug":"演变","link":"#演变","children":[]},{"level":4,"title":"弹性","slug":"弹性","link":"#弹性","children":[]},{"level":4,"title":"从设计到生产","slug":"从设计到生产","link":"#从设计到生产","children":[]},{"level":4,"title":"调查系统和日志","slug":"调查系统和日志","link":"#调查系统和日志","children":[]},{"level":4,"title":"危机响应","slug":"危机响应","link":"#危机响应","children":[]},{"level":4,"title":"恢复","slug":"恢复","link":"#恢复","children":[]},{"level":4,"title":"小结","slug":"小结","link":"#小结","children":[]}]}]},{"level":2,"title":"第2章 攻击者","slug":"第2章-攻击者","link":"#第2章-攻击者","children":[{"level":3,"title":"2.1 攻击者的动机","slug":"_2-1-攻击者的动机","link":"#_2-1-攻击者的动机","children":[]},{"level":3,"title":"2.2 攻击者画像","slug":"_2-2-攻击者画像","link":"#_2-2-攻击者画像","children":[{"level":4,"title":"业务爱好者","slug":"业务爱好者","link":"#业务爱好者","children":[]},{"level":4,"title":"漏洞研究人员","slug":"漏洞研究人员","link":"#漏洞研究人员","children":[]},{"level":4,"title":"黑客活动专家","slug":"黑客活动专家","link":"#黑客活动专家","children":[]},{"level":4,"title":"犯罪分子","slug":"犯罪分子","link":"#犯罪分子","children":[{"level":5,"title":"防御犯罪分子","slug":"防御犯罪分子","link":"#防御犯罪分子","children":[]}]},{"level":4,"title":"自动化和人工智能","slug":"自动化和人工智能","link":"#自动化和人工智能","children":[]},{"level":4,"title":"内部人员","slug":"内部人员","link":"#内部人员","children":[{"level":5,"title":"针对内部风险的设计","slug":"针对内部风险的设计","link":"#针对内部风险的设计","children":[]}]}]},{"level":3,"title":"2.3 攻击者方法论","slug":"_2-3-攻击者方法论","link":"#_2-3-攻击者方法论","children":[{"level":4,"title":"威胁情报","slug":"威胁情报","link":"#威胁情报","children":[]},{"level":4,"title":"网络杀伤链","slug":"网络杀伤链","link":"#网络杀伤链","children":[]},{"level":4,"title":"TTP","slug":"ttp","link":"#ttp","children":[]}]},{"level":3,"title":"2.4 风险评估注意事项","slug":"_2-4-风险评估注意事项","link":"#_2-4-风险评估注意事项","children":[]}]},{"level":2,"title":"第3章 安全代理","slug":"第3章-安全代理","link":"#第3章-安全代理","children":[{"level":3,"title":"3.1 生产环境中的安全代理","slug":"_3-1-生产环境中的安全代理","link":"#_3-1-生产环境中的安全代理","children":[]},{"level":3,"title":"3.2 Google工具代理","slug":"_3-2-google工具代理","link":"#_3-2-google工具代理","children":[]}]},{"level":2,"title":"第4章 设计中的权衡","slug":"第4章-设计中的权衡","link":"#第4章-设计中的权衡","children":[{"level":3,"title":"4.1 设计目标和要求","slug":"_4-1-设计目标和要求","link":"#_4-1-设计目标和要求","children":[{"level":4,"title":"特性需求","slug":"特性需求","link":"#特性需求","children":[]},{"level":4,"title":"非功能性需求","slug":"非功能性需求","link":"#非功能性需求","children":[]},{"level":4,"title":"功能与涌现特性","slug":"功能与涌现特性","link":"#功能与涌现特性","children":[]},{"level":4,"title":"案例","slug":"案例","link":"#案例","children":[]}]},{"level":3,"title":"4.2 需求平衡","slug":"_4-2-需求平衡","link":"#_4-2-需求平衡","children":[{"level":4,"title":"案例","slug":"案例-1","link":"#案例-1","children":[]}]},{"level":3,"title":"4.3 处理紧张局势和统一目标","slug":"_4-3-处理紧张局势和统一目标","link":"#_4-3-处理紧张局势和统一目标","children":[{"level":4,"title":"案例","slug":"案例-2","link":"#案例-2","children":[]},{"level":4,"title":"统一涌现特性的需求","slug":"统一涌现特性的需求","link":"#统一涌现特性的需求","children":[]}]},{"level":3,"title":"4.4 初始速度和持续速度","slug":"_4-4-初始速度和持续速度","link":"#_4-4-初始速度和持续速度","children":[]},{"level":3,"title":"小结","slug":"小结-1","link":"#小结-1","children":[]}]},{"level":2,"title":"第5章 最新特权设计","slug":"第5章-最新特权设计","link":"#第5章-最新特权设计","children":[{"level":3,"title":"5.1 概念和术语","slug":"_5-1-概念和术语","link":"#_5-1-概念和术语","children":[{"level":4,"title":"最小特权","slug":"最小特权","link":"#最小特权","children":[]},{"level":4,"title":"零信任网络","slug":"零信任网络","link":"#零信任网络","children":[]},{"level":4,"title":"零接触","slug":"零接触","link":"#零接触","children":[]}]},{"level":3,"title":"5.2 基于风险的访问分类","slug":"_5-2-基于风险的访问分类","link":"#_5-2-基于风险的访问分类","children":[]},{"level":3,"title":"5.3 最佳实践","slug":"_5-3-最佳实践","link":"#_5-3-最佳实践","children":[{"level":4,"title":"API 功能最小化","slug":"api-功能最小化","link":"#api-功能最小化","children":[]},{"level":4,"title":"Breakglass 机制","slug":"breakglass-机制","link":"#breakglass-机制","children":[]},{"level":4,"title":"审计","slug":"审计","link":"#审计","children":[]},{"level":4,"title":"测试和最小特权","slug":"测试和最小特权","link":"#测试和最小特权","children":[]},{"level":4,"title":"诊断被拒绝的访问","slug":"诊断被拒绝的访问","link":"#诊断被拒绝的访问","children":[]},{"level":4,"title":"优雅失败和Breakglass机制","slug":"优雅失败和breakglass机制","link":"#优雅失败和breakglass机制","children":[]}]},{"level":3,"title":"5.4 工作案例：配置分发","slug":"_5-4-工作案例-配置分发","link":"#_5-4-工作案例-配置分发","children":[]},{"level":3,"title":"5.5 认证和授权决策的策略框架","slug":"_5-5-认证和授权决策的策略框架","link":"#_5-5-认证和授权决策的策略框架","children":[]},{"level":3,"title":"5.6 高级控制","slug":"_5-6-高级控制","link":"#_5-6-高级控制","children":[{"level":4,"title":"MPA","slug":"mpa","link":"#mpa","children":[]},{"level":4,"title":"3FA","slug":"_3fa","link":"#_3fa","children":[]},{"level":4,"title":"临时访问","slug":"临时访问","link":"#临时访问","children":[]},{"level":4,"title":"代理","slug":"代理","link":"#代理","children":[]}]},{"level":3,"title":"5.7 权衡和冲突","slug":"_5-7-权衡和冲突","link":"#_5-7-权衡和冲突","children":[{"level":4,"title":"增加了安全的复杂性","slug":"增加了安全的复杂性","link":"#增加了安全的复杂性","children":[]},{"level":4,"title":"对合作商以及公司文化的影响","slug":"对合作商以及公司文化的影响","link":"#对合作商以及公司文化的影响","children":[]},{"level":4,"title":"影响安全性的质量数据和系统","slug":"影响安全性的质量数据和系统","link":"#影响安全性的质量数据和系统","children":[]},{"level":4,"title":"对用户工作效率的影响","slug":"对用户工作效率的影响","link":"#对用户工作效率的影响","children":[]},{"level":4,"title":"对开发复杂性的影响","slug":"对开发复杂性的影响","link":"#对开发复杂性的影响","children":[]}]}]},{"level":2,"title":"第6章 面向易理解的设计","slug":"第6章-面向易理解的设计","link":"#第6章-面向易理解的设计","children":[]},{"level":2,"title":"第7章 适应变化的设计","slug":"第7章-适应变化的设计","link":"#第7章-适应变化的设计","children":[{"level":3,"title":"7.1 安全变更的类型","slug":"_7-1-安全变更的类型","link":"#_7-1-安全变更的类型","children":[]},{"level":3,"title":"7.2 变更中的设计","slug":"_7-2-变更中的设计","link":"#_7-2-变更中的设计","children":[]},{"level":3,"title":"7.3 让发布更容易的架构决策","slug":"_7-3-让发布更容易的架构决策","link":"#_7-3-让发布更容易的架构决策","children":[{"level":4,"title":"让依赖项保持最新并频繁重建","slug":"让依赖项保持最新并频繁重建","link":"#让依赖项保持最新并频繁重建","children":[]},{"level":4,"title":"用自动化测试让发布更频繁","slug":"用自动化测试让发布更频繁","link":"#用自动化测试让发布更频繁","children":[]},{"level":4,"title":"使用容器","slug":"使用容器","link":"#使用容器","children":[]},{"level":4,"title":"使用微服务","slug":"使用微服务","link":"#使用微服务","children":[]}]},{"level":3,"title":"7.4 不同的变更：不同的速度与不同的时间线","slug":"_7-4-不同的变更-不同的速度与不同的时间线","link":"#_7-4-不同的变更-不同的速度与不同的时间线","children":[{"level":4,"title":"短期变更：零日漏洞","slug":"短期变更-零日漏洞","link":"#短期变更-零日漏洞","children":[]},{"level":4,"title":"中期变更：改善安全态势","slug":"中期变更-改善安全态势","link":"#中期变更-改善安全态势","children":[]},{"level":4,"title":"长期变更：外部需求","slug":"长期变更-外部需求","link":"#长期变更-外部需求","children":[]}]},{"level":3,"title":"7.5 难点：计划调整","slug":"_7-5-难点-计划调整","link":"#_7-5-难点-计划调整","children":[]},{"level":3,"title":"7.6 不断扩大的范围：心脏滴血漏洞","slug":"_7-6-不断扩大的范围-心脏滴血漏洞","link":"#_7-6-不断扩大的范围-心脏滴血漏洞","children":[]}]},{"level":2,"title":"第8章 弹性设计","slug":"第8章-弹性设计","link":"#第8章-弹性设计","children":[{"level":3,"title":"8.1 弹性设计原则","slug":"_8-1-弹性设计原则","link":"#_8-1-弹性设计原则","children":[]},{"level":3,"title":"8.2 纵深防御","slug":"_8-2-纵深防御","link":"#_8-2-纵深防御","children":[{"level":4,"title":"特洛伊木马","slug":"特洛伊木马","link":"#特洛伊木马","children":[]},{"level":4,"title":"Google App Engine分析","slug":"google-app-engine分析","link":"#google-app-engine分析","children":[]}]},{"level":3,"title":"8.3 控制降级","slug":"_8-3-控制降级","link":"#_8-3-控制降级","children":[{"level":4,"title":"区分故障成本","slug":"区分故障成本","link":"#区分故障成本","children":[]},{"level":4,"title":"部署响应机制","slug":"部署响应机制","link":"#部署响应机制","children":[]},{"level":4,"title":"负责任的自动化","slug":"负责任的自动化","link":"#负责任的自动化","children":[{"level":5,"title":"失效安全（fail-safe）与失效保障（fail-secure）","slug":"失效安全-fail-safe-与失效保障-fail-secure","link":"#失效安全-fail-safe-与失效保障-fail-secure","children":[]},{"level":5,"title":"人类的立足点","slug":"人类的立足点","link":"#人类的立足点","children":[]}]}]},{"level":3,"title":"8.4 控制爆炸半径","slug":"_8-4-控制爆炸半径","link":"#_8-4-控制爆炸半径","children":[{"level":4,"title":"角色分离","slug":"角色分离","link":"#角色分离","children":[]},{"level":4,"title":"位置分离","slug":"位置分离","link":"#位置分离","children":[{"level":5,"title":"统一物理和逻辑架构","slug":"统一物理和逻辑架构","link":"#统一物理和逻辑架构","children":[]},{"level":5,"title":"信任隔离","slug":"信任隔离","link":"#信任隔离","children":[]},{"level":5,"title":"机密性隔离","slug":"机密性隔离","link":"#机密性隔离","children":[]}]},{"level":4,"title":"时间分离","slug":"时间分离","link":"#时间分离","children":[]}]},{"level":3,"title":"8.5 故障域和冗余","slug":"_8-5-故障域和冗余","link":"#_8-5-故障域和冗余","children":[{"level":4,"title":"故障域","slug":"故障域","link":"#故障域","children":[{"level":5,"title":"功能隔离","slug":"功能隔离","link":"#功能隔离","children":[]},{"level":5,"title":"数据隔离","slug":"数据隔离","link":"#数据隔离","children":[]}]},{"level":4,"title":"组件类型","slug":"组件类型","link":"#组件类型","children":[{"level":5,"title":"大容量组件","slug":"大容量组件","link":"#大容量组件","children":[]},{"level":5,"title":"高可用组件","slug":"高可用组件","link":"#高可用组件","children":[]},{"level":5,"title":"低依赖的组件","slug":"低依赖的组件","link":"#低依赖的组件","children":[]}]},{"level":4,"title":"控制冗余","slug":"控制冗余","link":"#控制冗余","children":[{"level":5,"title":"故障转移策略","slug":"故障转移策略","link":"#故障转移策略","children":[]}]}]},{"level":3,"title":"8.6 持续验证（重点看下）","slug":"_8-6-持续验证-重点看下","link":"#_8-6-持续验证-重点看下","children":[{"level":4,"title":"验证关键区域","slug":"验证关键区域","link":"#验证关键区域","children":[]},{"level":4,"title":"验证实践","slug":"验证实践","link":"#验证实践","children":[]}]},{"level":3,"title":"8.7 实践建议","slug":"_8-7-实践建议","link":"#_8-7-实践建议","children":[]}]},{"level":2,"title":"第9章 面向恢复的设计","slug":"第9章-面向恢复的设计","link":"#第9章-面向恢复的设计","children":[{"level":3,"title":"9.1 恢复的对象","slug":"_9-1-恢复的对象","link":"#_9-1-恢复的对象","children":[{"level":4,"title":"随机错误","slug":"随机错误","link":"#随机错误","children":[]},{"level":4,"title":"意外错误","slug":"意外错误","link":"#意外错误","children":[]},{"level":4,"title":"软件错误","slug":"软件错误","link":"#软件错误","children":[]},{"level":4,"title":"恶意行为","slug":"恶意行为","link":"#恶意行为","children":[]}]},{"level":3,"title":"9.2 恢复机制的设计原则","slug":"_9-2-恢复机制的设计原则","link":"#_9-2-恢复机制的设计原则","children":[{"level":4,"title":"面向快捷恢复的设计","slug":"面向快捷恢复的设计","link":"#面向快捷恢复的设计","children":[]},{"level":4,"title":"限制对外部世界观念的依赖","slug":"限制对外部世界观念的依赖","link":"#限制对外部世界观念的依赖","children":[]},{"level":4,"title":"回滚所代表的安全性和可靠性的权衡","slug":"回滚所代表的安全性和可靠性的权衡","link":"#回滚所代表的安全性和可靠性的权衡","children":[]},{"level":4,"title":"使用显式吊销机制","slug":"使用显式吊销机制","link":"#使用显式吊销机制","children":[]},{"level":4,"title":"了解精确到字节的预期状态","slug":"了解精确到字节的预期状态","link":"#了解精确到字节的预期状态","children":[]}]},{"level":3,"title":"9.3 紧急访问","slug":"_9-3-紧急访问","link":"#_9-3-紧急访问","children":[{"level":4,"title":"访问控制","slug":"访问控制","link":"#访问控制","children":[]},{"level":4,"title":"通信","slug":"通信","link":"#通信","children":[]},{"level":4,"title":"响应人员的习惯","slug":"响应人员的习惯","link":"#响应人员的习惯","children":[]}]},{"level":3,"title":"9.4 预期外的收益","slug":"_9-4-预期外的收益","link":"#_9-4-预期外的收益","children":[]}]}],"git":{"createdTime":1706285779000,"updatedTime":1706285779000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":21.09,"words":6327},"filePathRelative":"tech/book/bsrs.md","localizedDate":"2023年6月14日","excerpt":"","autoDesc":true}');export{d as comp,c as data};
