import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o}from"./app-KZYdNjZt.js";const l={};function n(i,e){return o(),a("div",null,e[0]||(e[0]=[t('<h2 id="cors错误配置漏洞修复建议" tabindex="-1"><a class="header-anchor" href="#cors错误配置漏洞修复建议"><span>CORS错误配置漏洞修复建议</span></a></h2><h3 id="漏洞简介" tabindex="-1"><a class="header-anchor" href="#漏洞简介"><span>漏洞简介：</span></a></h3><p>CORS，跨域资源共享（Cross-origin resource sharing）的本质是由服务端配置的策略指导客户端浏览器，放松同源策略限制，实现跨域资源共享。但是一旦服务器端访问控制策略配置出现错误，信任非预期域名，就会出现浏览器SOP被绕过。攻击者便可以利用CORS误配置漏洞， 从恶意网站跨域读写目标系统中的敏感信息。</p><h3 id="常见的cors错误配置" tabindex="-1"><a class="header-anchor" href="#常见的cors错误配置"><span>常见的CORS错误配置：</span></a></h3><ol><li><h4 id="反射-origin头" tabindex="-1"><a class="header-anchor" href="#反射-origin头"><span>反射 Origin头</span></a></h4><p>最简单地动态生成访问控制策略的方法，就是在Access-Control-Allow-Origin中反射请求的Origin值。例如，下面是一个错误 Nginx 配置示例：</p><p>​ add_header &quot;Access-Control-Allow-Origin&quot; $http_origin;</p><p>​ add_header “Access-Control-Allow-Credentials” “true”;</p><p>这种配置非常危险，相当于信任任意网站，给攻击者网站敞开了大门。任意攻击者网站可以直接跨域读取其资源内容。</p></li><li><h4 id="origin-校验错误" tabindex="-1"><a class="header-anchor" href="#origin-校验错误"><span>Origin 校验错误</span></a></h4><p>校验Origin头时使用了错误的方式，如：</p><ul><li>前缀匹配：例如<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 想要允许<a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>访问，但是只做了前缀匹配，导致同时信任了<a href="http://example.com.attack.com/" target="_blank" rel="noopener noreferrer">example.com.attack.com</a>的访问，而<a href="http://example.com.attack.com/" target="_blank" rel="noopener noreferrer">example.com.attack.com</a> 是攻击者可以控制的网站。</li><li>后缀匹配：例如<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 想要允许<a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>访问，由于后缀匹配出错，导致允许<a href="http://attackexample.com/" target="_blank" rel="noopener noreferrer">attackexample.com</a>访问。</li><li>没有转义’.’：例如，<a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>想要允许<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 访问时，但正则匹配没有转义’.’，导致允许<a href="http://wwwaexample.com/" target="_blank" rel="noopener noreferrer">wwwaexample.com</a>访问。</li><li>包含匹配：例如网站<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 想要允许 <a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>，但是Origin校验出错，出现允许<a href="http://ample.com/" target="_blank" rel="noopener noreferrer">ample.com</a>访问。</li></ul></li><li><h4 id="信任null" tabindex="-1"><a class="header-anchor" href="#信任null"><span>信任null</span></a></h4><p>​ Access-Control-Allow-Origin: null</p><p>​ Access-Control-Allow-Credentials: true</p></li><li><h4 id="https域信任http域" tabindex="-1"><a class="header-anchor" href="#https域信任http域"><span>Https域信任Http域</span></a></h4><p>如果HTTPS网站配置了CORS且信任HTTP域，那么中间人攻击者可以先劫持受信任HTTP域，然后通过这个域发送跨域请求到HTTPS网站，间接读取HTTPS域下的受保护内容。</p></li><li><h4 id="信任自身全部子域" tabindex="-1"><a class="header-anchor" href="#信任自身全部子域"><span>信任自身全部子域</span></a></h4><p>如果某个域配置了CORS且信任全部子域，那么攻击者可以利用其他任意子域上XSS漏洞，发送跨域请求到目标重要域网站，从而获取敏感内容。</p></li><li><h4 id="origin-与-credentials-true-共用" tabindex="-1"><a class="header-anchor" href="#origin-与-credentials-true-共用"><span>Origin:*与 Credentials:true 共用</span></a></h4><p>Access-Control-Allow-Origin: *</p><p>Access-Control-Allow-Credentials: true</p></li></ol><h3 id="修复建议" tabindex="-1"><a class="header-anchor" href="#修复建议"><span>修复建议：</span></a></h3><ol><li>不要盲目反射 Origin头</li><li>严格校验 Origin 头，避免出现权限泄露</li><li>不要配置 Access-Control-Allow-Origin: null</li><li>HTTPS 网站不要信任HTTP 域</li><li>不要信任全部自身子域，减少攻击面</li><li>不要配置 Origin:*和 Credentials: true</li></ol>',7)]))}const s=r(l,[["render",n],["__file","cors.html.vue"]]),h=JSON.parse('{"path":"/tech/web/cors.html","title":"cors","lang":"zh-CN","frontmatter":{"title":"cors","date":"2024-04-07T10:01:00.000Z","category":"web","tag":["web","cors"],"description":"CORS错误配置漏洞修复建议 漏洞简介： CORS，跨域资源共享（Cross-origin resource sharing）的本质是由服务端配置的策略指导客户端浏览器，放松同源策略限制，实现跨域资源共享。但是一旦服务器端访问控制策略配置出现错误，信任非预期域名，就会出现浏览器SOP被绕过。攻击者便可以利用CORS误配置漏洞， 从恶意网站跨域读写目标系...","head":[["meta",{"property":"og:url","content":"https://blog.ruizhou.cf/tech/web/cors.html"}],["meta",{"property":"og:site_name","content":"rz blog"}],["meta",{"property":"og:title","content":"cors"}],["meta",{"property":"og:description","content":"CORS错误配置漏洞修复建议 漏洞简介： CORS，跨域资源共享（Cross-origin resource sharing）的本质是由服务端配置的策略指导客户端浏览器，放松同源策略限制，实现跨域资源共享。但是一旦服务器端访问控制策略配置出现错误，信任非预期域名，就会出现浏览器SOP被绕过。攻击者便可以利用CORS误配置漏洞， 从恶意网站跨域读写目标系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T12:34:05.000Z"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:tag","content":"cors"}],["meta",{"property":"article:published_time","content":"2024-04-07T10:01:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T12:34:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cors\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-07T10:01:00.000Z\\",\\"dateModified\\":\\"2024-07-17T12:34:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ruizhou\\",\\"url\\":\\"https://blog.ruizhou.cf\\"}]}"]]},"headers":[{"level":2,"title":"CORS错误配置漏洞修复建议","slug":"cors错误配置漏洞修复建议","link":"#cors错误配置漏洞修复建议","children":[{"level":3,"title":"漏洞简介：","slug":"漏洞简介","link":"#漏洞简介","children":[]},{"level":3,"title":"常见的CORS错误配置：","slug":"常见的cors错误配置","link":"#常见的cors错误配置","children":[]},{"level":3,"title":"修复建议：","slug":"修复建议","link":"#修复建议","children":[]}]}],"git":{"createdTime":1721219645000,"updatedTime":1721219645000,"contributors":[{"name":"zhou","email":"ruizhouliu@163.com","commits":1}]},"readingTime":{"minutes":2.3,"words":689},"filePathRelative":"tech/web/cors.md","localizedDate":"2024年4月7日","excerpt":"","autoDesc":true}');export{s as comp,h as data};
