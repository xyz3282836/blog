import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,f as t,o as n}from"./app-Cbhc7UI4.js";const l={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h3><p>gc的几个重要阶段</p><ol><li><p>sweep termination 清理终止：清理终止，会触发stw，所有P都会进入sage-point 安全点，准备新一轮的gc；</p><p><strong>触发 STW（Stop-the-World）</strong>，让所有的 <strong>P（Processor）</strong> 停止用户代码的执行，并进入 <strong>safe-point（安全点）</strong>。</p><p>🔧 <strong>关键点：</strong></p><ul><li><p><strong>safe-point</strong> 是 GC 可以安全执行的地方，防止用户代码修改内存结构。</p></li><li><p>在这个阶段，Go runtime 会：</p><ul><li><strong>停止用户代码</strong>；</li><li>确保之前的清理阶段完成；</li><li>准备开始<strong>新的标记阶段</strong>。</li></ul></li></ul></li><li><p>the mark phase 标记阶段：程序和gc同时运行，gc执行根节点的标记，这包括扫描所有的栈，全局对象以及不在堆中运行时数据结构；</p><p><strong>并发执行</strong>，GC 和用户代码同时运行。</p><p>🔧 <strong>关键点：</strong></p><ul><li><p>从根对象（root set）开始，标记所有<strong>可达对象</strong>。</p></li><li><p>根对象包括：</p><ul><li><strong>栈变量</strong>；</li><li><strong>全局变量</strong>；</li><li><strong>运行时数据结构</strong>。</li></ul></li><li><p>使用 <strong>写屏障（Write Barrier）</strong> 确保在标记阶段产生的新对象也能被正确标记。</p></li></ul><p>💡 <strong>写屏障的作用</strong>：</p><ul><li>防止在标记阶段，用户代码分配新对象时，这些对象被遗漏。</li><li>确保并发标记的准确性。</li></ul></li><li><p>mark termination 标记终止：标记终止，触发stw，确保所有对象都已标记完成，gc状态变更，关闭gc工作线程；</p><p><strong>触发 STW</strong>，暂停所有用户代码，确保标记过程完成。</p><p>🔧 <strong>关键点：</strong></p><ul><li><p>进入 STW 状态，停止用户代码。</p></li><li><p>执行以下任务：</p><ul><li>确保所有对象都已被正确标记。</li><li><strong>关闭标记线程</strong>。</li><li>准备进入清理阶段。</li></ul></li></ul></li><li><p>sweep phase 清理阶段：恢复程序执行，后台并发清理所有内存管理单元；</p><p><strong>并发执行</strong>，回收未标记的内存块。</p><p>🔧 <strong>关键点：</strong></p><ul><li><p>恢复用户代码的执行，清理阶段<strong>在后台并发进行</strong>。</p></li><li><p>回收所有<strong>未标记的对象</strong>，将它们的内存块放入<strong>空闲列表</strong>，供后续分配使用。</p></li><li><p>清理阶段是<strong>增量完成</strong>的，避免一次性清理造成长时间暂停。</p></li></ul></li></ol><h3 id="触发gc" tabindex="-1"><a class="header-anchor" href="#触发gc"><span>触发gc</span></a></h3><p>在 Go 中主要会在三个地方触发 GC：</p><p>1、监控线程 runtime.sysmon 定时调用；</p><p>2、手动调用 runtime.GC 函数进行垃圾收集；</p><p>3、申请内存时 runtime.mallocgc 会根据堆大小判断是否调用；</p><h4 id="runtime-sysmon" tabindex="-1"><a class="header-anchor" href="#runtime-sysmon"><span>runtime.sysmon</span></a></h4><p>Go 程序在启动的时候会后台运行一个线程定时执行 runtime.sysmon 函数，这个函数主要用来检查死锁、运行计时器、调度抢占、以及 GC 等。</p><p>它会执行 <code>runtime.gcTrigger</code>中的 test 函数来判断是否应该进行 GC。由于 GC 可能需要执行时间比较长，所以运行时会在应用程序启动时在后台开启一个用于强制触发垃圾收集的 Goroutine 执行 forcegchelper 函数。</p><p>不过 forcegchelper 函数在一般情况下会一直被 goparkunlock 函数一直挂起，直到 sysmon 触发GC 校验通过，才会将该被挂起的 Goroutine 放转身到全局调度队列中等待被调度执行 GC。</p><h4 id="runtime-gc" tabindex="-1"><a class="header-anchor" href="#runtime-gc"><span>runtime.GC</span></a></h4><p>这个比较简单，会获取当前的 GC 循环次数，然后设值为 gcTriggerCycle 模式调用 gcStart 进行循环。</p><h4 id="runtime-mallocgc" tabindex="-1"><a class="header-anchor" href="#runtime-mallocgc"><span>runtime.mallocgc</span></a></h4><p>tiny malloc、small alloc 都会先去 mcache 中找空闲内存块进行内存分配，如果 mcache 中分配不到内存，就要到 mcentral 或 mheap 中去申请内存，这个时候就会尝试触发 GC；而对于 large alloc 一定会尝试触发 GC 因为它直接在堆页上分配内存。</p><h3 id="控制gc" tabindex="-1"><a class="header-anchor" href="#控制gc"><span>控制gc</span></a></h3><p>上面这三个触发 GC 的地方最终都会调用 gcStart 执行 GC，但是在执行 GC 之前一定会先判断这次调用是否应该被执行，并不是每次调用都一定会执行 GC， 这个时候就要说一下 <code>runtime.gcTrigger</code>中的 test 函数，这个函数负责校验本次 GC 是否应该被执行。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">t </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">gcTrigger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">memstats</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enablegc</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> panicking</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gcphase</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _GCoff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	switch</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	case</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gcTriggerHeap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		trigger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gcController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">trigger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gcController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">heapLive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> trigger</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	case</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gcTriggerTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gcController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gcPercent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">			return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		lastgc</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">atomic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Load64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">memstats</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">last_gc_nanotime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lastgc</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lastgc</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> forcegcperiod</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	case</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gcTriggerCycle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// t.n &gt; work.cycles, but accounting for wraparound.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">work</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cycles</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>gcTriggerHeap：按堆大小触发，堆大小和上次 GC 时相比达到一定阈值则触发；</li><li>gcTriggerTime：按时间触发，如果超过 forcegcperiod（默认2分钟） 时间没有被 GC，那么会执行GC；</li><li>gcTriggerCycle：没有开启垃圾收集，则触发新的循环；</li></ul><h4 id="go-memory-ballast" tabindex="-1"><a class="header-anchor" href="#go-memory-ballast"><span>Go Memory Ballast</span></a></h4><p>通过设置 ballast 数组我们达到了延迟 GC 的效果，但是这种效果只会在临时变量比较多的系统中有用，对于全局变量多的系统，用处不大。</p><h4 id="go-gc-tuner" tabindex="-1"><a class="header-anchor" href="#go-gc-tuner"><span>Go GC Tuner</span></a></h4><p>在 Go 中其实提供了 <code>runtime.SetFinalizer</code> 函数，它会在对象被 GC 的时候最后回调一下。可以通过它来设置一个钩子，每次 GC 完之后检查一下内存情况，然后设置 GOGC 值。</p><h4 id="soft-memory-limit" tabindex="-1"><a class="header-anchor" href="#soft-memory-limit"><span>Soft Memory Limit</span></a></h4><p>Go 实现了三种策略触发 GC ，其中一种是 gcTriggerHeap，它会根据堆的大小设定下次执行 GC 的堆目标值。 1.19 版的代码正是对 gcTriggerHeap 策略做了修改。</p><p><code>gcControllerState.heapGoalInternal</code>计算 HeapGoal 的时候使用了两种方式，一种是通过 GOGC 值计算，另一种是通过 memoryLimit 值计算，然后取它们两个中小的值作为 HeapGoal。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">gcControllerState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">heapGoalInternal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">goal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">minTrigger</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// Start with the goal calculated for gcPercent.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	goal</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gcPercentHeapGoal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// Check if the memory-limit-based goal is smaller, and if so, pick that.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> newGoal</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">memoryLimitHeapGoal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">newGoal</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> goal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		goal</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> newGoal</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// We&#39;re not limited by the memory limit goal, so perform a series of</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// adjustments that might move the goal forward in a variety of circumstances.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go GC 的触发是取上面两者计算结果较小的值，那么原本我们使用 GOGC 填的太大怕导致 OOM，现在我们可以加上 memoryLimit 参数限制一下；或者直接 GOGC = off ，然后设置 memoryLimit 参数，通过它来调配我们的 GC。</p>`,29)]))}const r=s(l,[["render",e],["__file","gc.html.vue"]]),g=JSON.parse('{"path":"/tech/go/gc.html","title":"gc","lang":"zh-CN","frontmatter":{"title":"gc","date":"2025-01-13T08:14:00.000Z","category":"go","tag":["go","gc"],"description":"背景 gc的几个重要阶段 sweep termination 清理终止：清理终止，会触发stw，所有P都会进入sage-point 安全点，准备新一轮的gc； 触发 STW（Stop-the-World），让所有的 P（Processor） 停止用户代码的执行，并进入 safe-point（安全点）。 🔧 关键点： safe-point 是 GC 可...","head":[["meta",{"property":"og:url","content":"https://blog.ruizhou.cf/tech/go/gc.html"}],["meta",{"property":"og:site_name","content":"rz blog"}],["meta",{"property":"og:title","content":"gc"}],["meta",{"property":"og:description","content":"背景 gc的几个重要阶段 sweep termination 清理终止：清理终止，会触发stw，所有P都会进入sage-point 安全点，准备新一轮的gc； 触发 STW（Stop-the-World），让所有的 P（Processor） 停止用户代码的执行，并进入 safe-point（安全点）。 🔧 关键点： safe-point 是 GC 可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-13T09:11:23.000Z"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"gc"}],["meta",{"property":"article:published_time","content":"2025-01-13T08:14:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-13T09:11:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gc\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-13T08:14:00.000Z\\",\\"dateModified\\":\\"2025-01-13T09:11:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ruizhou\\",\\"url\\":\\"https://blog.ruizhou.cf\\"}]}"]]},"git":{"createdTime":1736759483000,"updatedTime":1736759483000,"contributors":[{"name":"liuruizhou","username":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1,"url":"https://github.com/liuruizhou"}]},"readingTime":{"minutes":4.96,"words":1487},"filePathRelative":"tech/go/gc.md","localizedDate":"2025年1月13日","excerpt":"","autoDesc":true}');export{r as comp,g as data};
