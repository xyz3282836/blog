import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as i}from"./app-DRGQ8W9R.js";const l={};function p(c,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><p>1.vscode 安装 clang-format</p><p>2.brew 安装 clang-format</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">brew</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clang-format</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.配置</p><p>proto文件配置</p><p>setting配置（ui配置也行）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&quot;[proto3]&quot;: {</span></span>
<span class="line"><span>        &quot;editor.defaultFormatter&quot;: &quot;xaver.clang-format&quot;</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>&quot;clang-format.fallbackStyle&quot;: &quot;Google&quot;,</span></span>
<span class="line"><span>&quot;clang-format.language.proto.style&quot;: &quot;{BasedOnStyle: Google,  AlignConsecutiveDeclarations: true,  AlignConsecutiveAssignments: true,  ColumnLimit: 0,  IndentWidth: 4}&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他规则参考</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># https://clang.llvm.org/docs/ClangFormatStyleOptions.html</span></span>
<span class="line"><span># https://www.bbsmax.com/A/VGzlMjexJb/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto</span></span>
<span class="line"><span>Language: Cpp</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BasedOnStyle: LLVM</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 访问说明符(public、private等)的偏移</span></span>
<span class="line"><span>AccessModifierOffset: -4</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 左括号(左圆括号、左尖括号、左方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在左括号后换行)</span></span>
<span class="line"><span>AlignAfterOpenBracket: Align</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 连续赋值时，对齐所有等号</span></span>
<span class="line"><span>AlignConsecutiveAssignments: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 连续声明时，对齐所有声明的变量名</span></span>
<span class="line"><span>AlignConsecutiveDeclarations: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 对齐连续位域字段的风格</span></span>
<span class="line"><span># AlignConsecutiveBitFields: AcrossEmptyLinesAndComments</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 对齐连续宏定义的风格</span></span>
<span class="line"><span># AlignConsecutiveMacros: Consecutive #clang-format 12</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 用于在使用反斜杠换行中对齐反斜杠的选项</span></span>
<span class="line"><span>AlignEscapedNewlines: Left</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 水平对齐二元和三元表达式的操作数</span></span>
<span class="line"><span>AlignOperands: Align</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 对齐连续的尾随的注释</span></span>
<span class="line"><span>AlignTrailingComments: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果函数调用或带括号的初始化列表不适合全部在一行时</span></span>
<span class="line"><span># 允许将所有参数放到下一行，即使BinPackArguments为false</span></span>
<span class="line"><span>AllowAllArgumentsOnNextLine: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许构造函数的初始化参数放在下一行</span></span>
<span class="line"><span>AllowAllConstructorInitializersOnNextLine: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许函数声明的所有参数在放在下一行</span></span>
<span class="line"><span>AllowAllParametersOfDeclarationOnNextLine: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许短的块放在同一行(Always 总是将短块合并成一行，Empty 只合并空块)</span></span>
<span class="line"><span>AllowShortBlocksOnASingleLine: Empty</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许短的case标签放在同一行</span></span>
<span class="line"><span>AllowShortCaseLabelsOnASingleLine: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All</span></span>
<span class="line"><span>AllowShortFunctionsOnASingleLine: Inline</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许短的if语句保持在同一行</span></span>
<span class="line"><span>AllowShortIfStatementsOnASingleLine: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许短的循环保持在同一行</span></span>
<span class="line"><span>AllowShortLoopsOnASingleLine: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 总是在定义返回类型后换行(deprecated)</span></span>
<span class="line"><span>AlwaysBreakAfterDefinitionReturnType: None</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),</span></span>
<span class="line"><span>#   AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 函数声明返回类型后是否换行(None 自动，All全部，TopLevel...)</span></span>
<span class="line"><span>AlwaysBreakAfterReturnType: None</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 总是在多行string字面量前换行</span></span>
<span class="line"><span>AlwaysBreakBeforeMultilineStrings: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 总是在template声明后换行</span></span>
<span class="line"><span>AlwaysBreakTemplateDeclarations: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># false表示函数实参要么都在同一行，要么都各自一行</span></span>
<span class="line"><span>BinPackArguments: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># false表示所有形参要么都在同一行，要么都各自一行</span></span>
<span class="line"><span>BinPackParameters: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 大括号换行，只有当 BreakBeforeBraces 设置为Custom时才有效</span></span>
<span class="line"><span>BraceWrapping:</span></span>
<span class="line"><span>  # case 语句后面</span></span>
<span class="line"><span>  AfterCaseLabel: true</span></span>
<span class="line"><span>  # class定义后面</span></span>
<span class="line"><span>  AfterClass: true</span></span>
<span class="line"><span>  # 控制语句后面</span></span>
<span class="line"><span>  AfterControlStatement: Never</span></span>
<span class="line"><span>  # enum定义后面</span></span>
<span class="line"><span>  AfterEnum: true</span></span>
<span class="line"><span>  # 函数定义后面</span></span>
<span class="line"><span>  AfterFunction: true</span></span>
<span class="line"><span>  # 命名空间定义后面</span></span>
<span class="line"><span>  AfterNamespace: false</span></span>
<span class="line"><span>  # ObjC定义后面</span></span>
<span class="line"><span>  AfterObjCDeclaration: false</span></span>
<span class="line"><span>  # struct定义后面</span></span>
<span class="line"><span>  AfterStruct: true</span></span>
<span class="line"><span>  # union定义后面</span></span>
<span class="line"><span>  AfterUnion: true</span></span>
<span class="line"><span>  # extern 导出块后面</span></span>
<span class="line"><span>  AfterExternBlock: false</span></span>
<span class="line"><span>  # catch之前</span></span>
<span class="line"><span>  BeforeCatch: true</span></span>
<span class="line"><span>  # else之前</span></span>
<span class="line"><span>  BeforeElse: true</span></span>
<span class="line"><span>  # 缩进大括号(整个大括号框起来的部分都缩进)</span></span>
<span class="line"><span>  IndentBraces: false</span></span>
<span class="line"><span>  # 空函数的大括号是否可以在一行</span></span>
<span class="line"><span>  SplitEmptyFunction: false</span></span>
<span class="line"><span>  # 空记录体(struct/class/union)的大括号是否可以在一行</span></span>
<span class="line"><span>  SplitEmptyRecord: false</span></span>
<span class="line"><span>  # 空名字空间的大括号是否可以在一行</span></span>
<span class="line"><span>  SplitEmptyNamespace: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)</span></span>
<span class="line"><span>BreakBeforeBinaryOperators: None</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),</span></span>
<span class="line"><span>#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),</span></span>
<span class="line"><span>#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom</span></span>
<span class="line"><span>#   注：这里认为语句块也属于函数</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 大括号的换行规则</span></span>
<span class="line"><span>BreakBeforeBraces: Custom</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 三元运算操作符换行位置（?和: 在新行还是尾部）</span></span>
<span class="line"><span>BreakBeforeTernaryOperators: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在构造函数的初始化列表的逗号前换行</span></span>
<span class="line"><span>BreakConstructorInitializersBeforeComma: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 要使用的构造函数初始化式样式</span></span>
<span class="line"><span>BreakConstructorInitializers: BeforeComma</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 每行字符的限制，0表示没有限制</span></span>
<span class="line"><span>ColumnLimit: 100</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变</span></span>
<span class="line"><span># CommentPragmas: &#39;&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果为true，则连续的名称空间声明将在同一行上。如果为false，则在新行上声明每个名称空间。</span></span>
<span class="line"><span>CompactNamespaces: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 构造函数的初始化列表要么都在同一行，要么都各自一行</span></span>
<span class="line"><span>ConstructorInitializerAllOnOneLineOrOnePerLine: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 构造函数的初始化列表的缩进宽度</span></span>
<span class="line"><span>ConstructorInitializerIndentWidth:  4</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 延续的行的缩进宽度</span></span>
<span class="line"><span>ContinuationIndentWidth: 4</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 去除C++11的列表初始化的大括号{后和}前的空格</span></span>
<span class="line"><span>Cpp11BracedListStyle: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 继承最常用的指针和引用的对齐方式</span></span>
<span class="line"><span>DerivePointerAlignment: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 关闭格式化</span></span>
<span class="line"><span>DisableFormat: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)</span></span>
<span class="line"><span>ExperimentalAutoDetectBinPacking: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果为true，则clang格式会为短名称空间添加缺少的名称空间结尾注释，并修复无效的现有名称结束注释</span></span>
<span class="line"><span>FixNamespaceComments: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 需要被解读为foreach循环而不是函数调用的宏</span></span>
<span class="line"><span>ForEachMacros:  [ foreach, Q_FOREACH, BOOST_FOREACH ]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，</span></span>
<span class="line"><span>#   可以定义负数优先级从而保证某些#include永远在最前面</span></span>
<span class="line"><span>IncludeCategories:</span></span>
<span class="line"><span>  - Regex:  &#39;^&quot;(llvm|llvm-c|clang|clang-c)/&#39;</span></span>
<span class="line"><span>    Priority:   2</span></span>
<span class="line"><span>  - Regex:  &#39;^(&lt;|&quot;(gtest|isl|json)/)&#39;</span></span>
<span class="line"><span>    Priority:   3</span></span>
<span class="line"><span>  - Regex:  &#39;.*&#39;</span></span>
<span class="line"><span>    Priority:   1</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 缩进case标签</span></span>
<span class="line"><span>IndentCaseLabels: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 要使用的预处理器指令缩进样式</span></span>
<span class="line"><span>IndentPPDirectives: AfterHash</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 缩进宽度</span></span>
<span class="line"><span>IndentWidth: 4</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 函数返回类型换行时，缩进函数声明或函数定义的函数名</span></span>
<span class="line"><span>IndentWrappedFunctionNames: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 保留在块开始处的空行</span></span>
<span class="line"><span>KeepEmptyLinesAtTheStartOfBlocks: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 开始一个块的宏的正则表达式</span></span>
<span class="line"><span>MacroBlockBegin: &#39;&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 结束一个块的宏的正则表达式</span></span>
<span class="line"><span>MacroBlockEnd: &#39;&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 连续空行的最大数量</span></span>
<span class="line"><span>MaxEmptyLinesToKeep: 10</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All</span></span>
<span class="line"><span># NamespaceIndentation: Inner</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 使用ObjC块时缩进宽度</span></span>
<span class="line"><span>ObjCBlockIndentWidth: 4</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在ObjC的@property后添加一个空格</span></span>
<span class="line"><span>ObjCSpaceAfterProperty: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在ObjC的protocol列表前添加一个空格</span></span>
<span class="line"><span>ObjCSpaceBeforeProtocolList: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在call(后对函数调用换行的penalty</span></span>
<span class="line"><span>PenaltyBreakBeforeFirstCallParameter: 2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在一个注释中引入换行的penalty</span></span>
<span class="line"><span>PenaltyBreakComment: 300</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 第一次在&lt;&lt;前换行的penalty</span></span>
<span class="line"><span>PenaltyBreakFirstLessLess:  120</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在一个字符串字面量中引入换行的penalty</span></span>
<span class="line"><span>PenaltyBreakString: 1000</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 对于每个在行字符数限制之外的字符的penalty</span></span>
<span class="line"><span>PenaltyExcessCharacter: 1000000</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 对每一个空格缩进字符的penalty(相对于前导的非空格列计算)</span></span>
<span class="line"><span># PenaltyIndentedWhitespace: 0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将函数的返回类型放到它自己的行的penalty</span></span>
<span class="line"><span>PenaltyReturnTypeOnItsOwnLine: 120</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 指针和引用的对齐: Left, Right, Middle</span></span>
<span class="line"><span>PointerAlignment: Left</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许重新排版注释</span></span>
<span class="line"><span>ReflowComments: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许排序#include</span></span>
<span class="line"><span>SortIncludes: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许排序 using 声明顺序</span></span>
<span class="line"><span>SortUsingDeclarations: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在C风格类型转换后添加空格</span></span>
<span class="line"><span>SpaceAfterCStyleCast: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在逻辑非操作符(!)之后插入一个空格</span></span>
<span class="line"><span>SpaceAfterLogicalNot: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在 template 关键字后插入一个空格</span></span>
<span class="line"><span>SpaceAfterTemplateKeyword: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 定义在什么情况下在指针限定符之前或之后放置空格</span></span>
<span class="line"><span># SpaceAroundPointerQualifiers: Before</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在赋值运算符之前添加空格</span></span>
<span class="line"><span>SpaceBeforeAssignmentOperators: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 左圆括号之前添加一个空格: Never, ControlStatements, Always</span></span>
<span class="line"><span>SpaceBeforeParens: ControlStatements</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 空格将在基于范围的for循环冒号之前被删除</span></span>
<span class="line"><span>SpaceBeforeRangeBasedForLoopColon: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span># [ 前是否添加空格（数组名和[之间，Lambdas不会受到影响）</span></span>
<span class="line"><span># 连续多个 [ 只考虑第一个（嵌套数组，多维数组）</span></span>
<span class="line"><span>SpaceBeforeSquareBrackets: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在空的圆括号中添加空格</span></span>
<span class="line"><span>SpaceInEmptyParentheses: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在尾随的评论前添加的空格数(只适用于//)</span></span>
<span class="line"><span>SpacesBeforeTrailingComments: 3</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在尖括号的&lt;后和&gt;前添加空格</span></span>
<span class="line"><span>SpacesInAngles: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格</span></span>
<span class="line"><span>SpacesInContainerLiterals:  false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在C风格类型转换的括号中添加空格</span></span>
<span class="line"><span>SpacesInCStyleCastParentheses: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果为true，将在If/for/switch/while条件括号前后插入空格。</span></span>
<span class="line"><span>SpacesInConditionalStatement: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在圆括号的(后和)前添加空格</span></span>
<span class="line"><span>SpacesInParentheses: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响</span></span>
<span class="line"><span>SpacesInSquareBrackets: false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 标准: Cpp03, Cpp11, Auto</span></span>
<span class="line"><span>Standard: Cpp11</span></span>
<span class="line"><span></span></span>
<span class="line"><span># tab宽度</span></span>
<span class="line"><span>TabWidth: 4</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always</span></span>
<span class="line"><span>UseTab: Never</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const v=s(l,[["render",p],["__file","proto-clang-format.html.vue"]]),t=JSON.parse('{"path":"/tech/vscode/plugin/proto-clang-format.html","title":"proto format","lang":"zh-CN","frontmatter":{"title":"proto format","date":"2023-11-06T08:37:00.000Z","category":"格式化","tag":["proto"],"description":"步骤 1.vscode 安装 clang-format 2.brew 安装 clang-format 3.配置 proto文件配置 setting配置（ui配置也行） 其他规则参考","head":[["meta",{"property":"og:url","content":"https://blog.ruizhou.cf/tech/vscode/plugin/proto-clang-format.html"}],["meta",{"property":"og:site_name","content":"rz blog"}],["meta",{"property":"og:title","content":"proto format"}],["meta",{"property":"og:description","content":"步骤 1.vscode 安装 clang-format 2.brew 安装 clang-format 3.配置 proto文件配置 setting配置（ui配置也行） 其他规则参考"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-08T03:05:52.000Z"}],["meta",{"property":"article:tag","content":"proto"}],["meta",{"property":"article:published_time","content":"2023-11-06T08:37:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-08T03:05:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"proto format\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-06T08:37:00.000Z\\",\\"dateModified\\":\\"2023-12-08T03:05:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ruizhou\\",\\"url\\":\\"https://blog.ruizhou.cf\\"}]}"]]},"headers":[{"level":2,"title":"步骤","slug":"步骤","link":"#步骤","children":[]}],"git":{"createdTime":1702004752000,"updatedTime":1702004752000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":1}]},"readingTime":{"minutes":6.83,"words":2049},"filePathRelative":"tech/vscode/plugin/proto-clang-format.md","localizedDate":"2023年11月6日","excerpt":"","autoDesc":true}');export{v as comp,t as data};
