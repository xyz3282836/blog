import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as s}from"./app-D-aCOJxh.js";const n="/assets/image-20240929165418298-CgKYdDKB.png",t="/assets/image-20240929165450636-CahXdZ9r.png",r="/assets/image-20240929165516542-CC5rWxjc.png",c="/assets/image-20240929165535410-vHMsrcKP.png",p="/assets/image-20240929165835700-CRfRhK0k.png",d="/assets/image_0099-C-yzkTc5.jpg",h="/assets/image-20240929174511-DGHhbN2p.png",u="/assets/image_0167-D-QI4cnc.jpg",o="/assets/image_0169-C62QNomS.jpg",g="/assets/image_0187-BA3tRZV5.jpg",m={};function b(k,i){return s(),e("div",null,i[0]||(i[0]=[a('<h2 id="现代cpu性能分析" tabindex="-1"><a class="header-anchor" href="#现代cpu性能分析"><span>现代cpu性能分析</span></a></h2><h3 id="cpu微架构" tabindex="-1"><a class="header-anchor" href="#cpu微架构"><span>cpu微架构</span></a></h3><h4 id="流水线" tabindex="-1"><a class="header-anchor" href="#流水线"><span>流水线</span></a></h4><ul><li>取址-IF</li><li>译码-ID</li><li>执行-EXE</li><li>访存-MEM</li><li>回写-WB</li></ul><h4 id="指令集并行" tabindex="-1"><a class="header-anchor" href="#指令集并行"><span>指令集并行</span></a></h4><ul><li>程序中的大多数指令是独立的，所以都适合流水线化和并行执行</li><li>ILP-instruction level parallelism</li><li>指令在最终执行时称为退休</li><li>乱序执行OOO-out of order</li><li>大多数CPU可以一个时钟周期发射多个指令</li><li>投机执行 <ul><li>预测分支执行</li><li>投机执行的结果必须被制止和丢弃。这被称为分支预测错误惩罚</li></ul></li><li>线程并行 <ul><li>也就是常见的多线程或者多进程，通过切换上下文来跟踪线程或者进程的状态</li></ul></li></ul><h4 id="存储" tabindex="-1"><a class="header-anchor" href="#存储"><span>存储</span></a></h4><ul><li>主存-位于高速缓存的下游，支持大容量且成本合适的DRAM（动态RAM） <ul><li>主存三属性 <ul><li>延迟</li><li>带宽</li><li>容量</li></ul></li><li>大多数CPU都支持的主流DRAM技术是DDR（Double Data Rate，双倍数据速率）DRAM技术</li></ul></li></ul><h4 id="cpu前端" tabindex="-1"><a class="header-anchor" href="#cpu前端"><span>cpu前端</span></a></h4><ul><li>将准备好的指令送入CPU后端</li></ul><h4 id="cpu后端" tabindex="-1"><a class="header-anchor" href="#cpu后端"><span>cpu后端</span></a></h4><ul><li>CPU后端采用乱序(Out-Of-Order)引擎来执行指令并存储结果</li></ul><h4 id="性能监控单元" tabindex="-1"><a class="header-anchor" href="#性能监控单元"><span>性能监控单元</span></a></h4><ul><li>PMU-performance monitoring unit</li></ul><h3 id="性能分析专业术语" tabindex="-1"><a class="header-anchor" href="#性能分析专业术语"><span>性能分析专业术语</span></a></h3><ul><li>退休指令与执行指令 <ul><li>PMC-性能监控计数器 <ul><li>perf stat -e instructions ./bin</li></ul></li></ul></li><li>CPI-每指令周期数 <ul><li>1/IPC</li></ul></li><li>IPC-每周期指令数</li><li>微操作 <ul><li>x86架构微处理器把复杂类CISC指令转化为简单类RISC微操作（microoperation，简称μop或uop）</li></ul></li><li>缓存未命中 <ul><li>指令缓存未命中被归类为前端停滞</li><li>数据缓存未命中被归类为后端停滞</li></ul></li><li>分支预测错误 <ul><li>perf stat -e branches,branch-misses -- bin</li></ul></li></ul><h3 id="性能分析方法" tabindex="-1"><a class="header-anchor" href="#性能分析方法"><span>性能分析方法</span></a></h3><h4 id="代码插桩" tabindex="-1"><a class="header-anchor" href="#代码插桩"><span>代码插桩</span></a></h4><ul><li>手动插桩</li><li>自动插桩 <ul><li>最广为人知的用例是代码覆盖度分析和基于剖析文件的编译优化</li></ul></li><li>二进制插桩 <ul><li>静态插桩（提前完成）</li><li>动态插桩（在程序执行时按需插入插桩代码）</li><li>Intel Pin是非常流行的二进制插桩工具之一</li></ul></li></ul><h4 id="跟踪" tabindex="-1"><a class="header-anchor" href="#跟踪"><span>跟踪</span></a></h4><ul><li>跟踪依赖于程序外部依赖项的现有插桩 <ul><li>strace工具可以跟踪系统调用，可以被认为是Linux内核的插桩</li></ul></li></ul><h4 id="采样" tabindex="-1"><a class="header-anchor" href="#采样"><span>采样</span></a></h4><ul><li>linux perf收集调用栈 <ul><li>帧指针</li><li>DWARF</li><li>最后分支特性 lbr</li></ul></li><li>火焰图</li></ul><h4 id="屋顶线性能模型" tabindex="-1"><a class="header-anchor" href="#屋顶线性能模型"><span>屋顶线性能模型</span></a></h4><ul><li>硬件有两个主要限制 <ul><li>计算速度（峰值计算性能，FLOPS）<img src="'+n+'" alt="image-20240929165418298" loading="lazy"></li><li>数据搬移速度（峰值内存带宽，GB/s）<img src="'+t+'" alt="image-20240929165450636" loading="lazy"></li></ul></li><li>应用程序的最大性能受峰值计算性能（水平线）和平台带宽与算术强度乘积（对角线）之间的最小值的限制<img src="'+r+'" alt="image-20240929165516542" loading="lazy"></li><li>在屋顶线图上，我们可以绘制标量单核、SIMD单核和SIMD多核性能的理论最大值，这可以让我们了解应用程序性能的提高空间<img src="'+c+'" alt="image-20240929165535410" loading="lazy"><ul><li>如果发现应用程序是计算密集型的（即具有较高的算术强度）并且性能低于峰值标量单核性能，则应该考虑强制向量化（见8.2.3节）并利用多个线程分配工作</li><li>如果应用程序的算术强度较低，则应该寻找改善内存访问的方法</li></ul></li><li>使用屋顶线模型优化性能的最终目标是将点向上移动 <ul><li>向量化和线程化将点向上移动</li><li>通过增加算术强度优化内存访问将点向右移动同时还可能提高性能</li></ul></li><li>静态性能分析</li></ul><h4 id="性能分析相关cpu特性" tabindex="-1"><a class="header-anchor" href="#性能分析相关cpu特性"><span>性能分析相关cpu特性</span></a></h4><h5 id="tma" tabindex="-1"><a class="header-anchor" href="#tma"><span>TMA<img src="'+p+'" alt="image-20240929165835700" loading="lazy"></span></a></h5><ul><li><p>前端绑定 front bound</p><ul><li>读取延迟 fe latency</li><li>读取带宽 fe bandwidth</li></ul></li><li><p>后端绑定 backend bound</p><ul><li>核绑定 core bound</li><li>内存绑定 memory bound <ul><li>L1 bound</li><li>L2 bound</li><li>L3 bound</li><li>DRAM bound</li><li>stroe bound</li></ul></li></ul></li><li><p>退休 retiring</p><ul><li>轻量微操作 base</li><li>微码序列器 microcode sequencer</li></ul></li><li><p>错误投机 bad speculation</p><ul><li>分支预测错误 brach mispred</li><li>机器清理 machine clears</li></ul></li><li><p>linux perf中TMA，获取TMA第1层指标</p><ul><li>perf stat --topdown -a -- taskset -c 0 ./exec b <ul><li>--topdown可以查看TMA指标</li><li>taskset -c 0可以绑定core 0</li></ul></li></ul></li><li><p>toplev可以获取TMA的第2，3层指标</p><ul><li><p>python实现，通过封装和调用linux perf工具实现</p></li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>toplev.py --core S0-C0 -l1 -v --no-desc -c 0 ./exec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>后端绑定53.43%</li></ul></li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>toplev.py --core S0-C0 -l2 -v --no-desc -c 0 ./exec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>内存绑定44.59%</li></ul></li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>toplev.py --core S0-C0 -l3 -v --no-desc -c 0 ./exec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>DRAM绑定47.11%</li><li>Skylake CPU架构，DRAM_Bound指标是通过CYCLE_ACTIVITY.STALLS_L3_MISS性能事件计算的</li></ul></li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>perf stat -e cycles,cycle_activity.stalls_l3_miss -- ./exec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>统计了当L3缓存未命中未完成预期加载而导致执行阻塞的CPU周期数</li></ul></li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>perf record -e cpu/event=0xd1,umask=0x20,name=MEM_LOAD_RETIRED.L3_MISS/PPP ./exec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="最后分支记录" tabindex="-1"><a class="header-anchor" href="#最后分支记录"><span>最后分支记录</span></a></h4><ul><li><p>利用该特性可以持续地记录大量已经执行的分支跳转指令</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>perf record -b -e cycles ./exec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>分析分支预测错误率</p></li></ul><h2 id="基于源代码的cpu调优" tabindex="-1"><a class="header-anchor" href="#基于源代码的cpu调优"><span>基于源代码的cpu调优</span></a></h2><h3 id="cpu前端优化" tabindex="-1"><a class="header-anchor" href="#cpu前端优化"><span>cpu前端优化</span></a></h3><p>前端不能给执行单元提供指令的原因有很多，不过通常被归结为<code>缓存利用率</code>和<code>无法从内存中获取指令</code>两类</p><figure><img src="'+d+'" alt="image_0099" tabindex="0" loading="lazy"><figcaption>image_0099</figcaption></figure><ul><li>基本块布局</li><li>基本块对齐</li><li>函数拆分</li><li>函数分组</li></ul><h3 id="cpu后端优化" tabindex="-1"><a class="header-anchor" href="#cpu后端优化"><span>cpu后端优化</span></a></h3><p>内存绑定，几种策略优化</p><ul><li>缓存友好的数据结构</li><li>按顺序访问数据</li></ul><h3 id="优化错误投机" tabindex="-1"><a class="header-anchor" href="#优化错误投机"><span>优化错误投机</span></a></h3><p>当经常发生分支预测错误时，会导致显著的性能劣化</p><p>通常，现代CPU发生分支预测错误时会有15～20个时钟周期的开销</p><p>对于常规应用程序，有5%～10%的“错误投机”率是正常的</p><p>可以直接解决分支预测错误问题的方法就是消除分支本身</p><ul><li>用查表替换分支</li><li>用断言替换分支<img src="'+h+'" alt="image-20240929174511" loading="lazy"></li></ul><p>当CPU分支预测器难以预测分支输出模式时，应用程序的性能可能会受到影响。在这种场景下，无分支版本的算法会更好。</p><h3 id="其他调优" tabindex="-1"><a class="header-anchor" href="#其他调优"><span>其他调优</span></a></h3><ul><li>编译时计算</li><li>编译器内建函数</li><li>缓存预热</li><li>减少慢速浮点运算 <ul><li>对于有浮点值运算的应用程序，当浮点数值非规范时，可能会遇到异常场景。对非规范的数值进行运算，很容易就会变得非常慢。当CPU处理尝试对非规范浮点值运算的指令时，需要对这个场景进行特殊处理。因为是异常场景，CPU需要请求微码协助[插图]。微码序列器只读存储器将会为流水线提供大量微操作。</li></ul></li></ul><h3 id="优化多线程应用程序" tabindex="-1"><a class="header-anchor" href="#优化多线程应用程序"><span>优化多线程应用程序</span></a></h3><h4 id="性能扩展和开销" tabindex="-1"><a class="header-anchor" href="#性能扩展和开销"><span>性能扩展和开销</span></a></h4><p>阿姆达尔定律</p><p>该定律表明并行程序的加速效果被它的串行组件所限制</p><figure><img src="'+u+'" alt="image_0167" tabindex="0" loading="lazy"><figcaption>image_0167</figcaption></figure><p>进一步给系统添加计算单元可能会产生负加速效果。Neil Gunther将这种效应解释为通用可伸缩性定律(Universal Scalability Law，USL)，它是阿姆达尔定律的扩展。通用可伸缩性定律将计算单元（线程）之间的通信描述为影响性能的另一个门控因素。随着系统规模的扩大，开销将阻碍性能。超过某个临界点，系统性能开始下降。通用可伸缩性定律被广泛地应用于系统容量和扩展性的建模。</p><figure><img src="'+o+'" alt="image_0169" tabindex="0" loading="lazy"><figcaption>image_0169</figcaption></figure><h4 id="并行效率指标" tabindex="-1"><a class="header-anchor" href="#并行效率指标"><span>并行效率指标</span></a></h4><p>有效CPU利用率</p><h4 id="使用linux-perf进行分析" tabindex="-1"><a class="header-anchor" href="#使用linux-perf进行分析"><span>使用Linux perf进行分析</span></a></h4><h4 id="使用coz进行分析" tabindex="-1"><a class="header-anchor" href="#使用coz进行分析"><span>使用Coz进行分析</span></a></h4><p>Coz是一个新型的剖析工具，它可以解决这类问题并填补传统软件剖析工具的短板。它使用了一种名为“因果剖析”的新技术，该技术在应用程序运行时进行实验，通过模拟加快代码段的速度来预测某些优化的总体效果。它通过对其他同步运行的代码插入暂停动作，以实现“模拟加速”(Curtsinger&amp;Berger，2015)。</p><h4 id="使用ebpf和gapp进行分析" tabindex="-1"><a class="header-anchor" href="#使用ebpf和gapp进行分析"><span>使用eBPF和GAPP进行分析</span></a></h4><p>eBPF是基于运行在内核中的沙箱虚拟机的，这使得在内核中安全、高效地执行用户自定义程序成为可能。用C语言开发用户自定义的程序，然后用准备好的BCC编译器[插图]将其编译成BPF字节码，以便在内核虚拟机中进行加载。这些BPF程序可以设计为在某个内核事件执行时启动，然后通过不同方式把原始或处理过的数据返回用户空间。</p><p>开源社区提供了很多通用的eBPF程序，其中一个叫通用自动并行剖析工具(Generic Automatic Parallel Profiler，GAPP)，它有助于跟踪多线程竞争问题。GAPP通过eBPF对已识别的序列化瓶颈的紧急程度进行排序并收集被阻塞的线程和导致阻塞的线程的堆栈，来跟踪多线程应用程序的竞争开销。GAPP的好处是它不需要进行代码更改、代码插桩，也不需要重新编译。</p><h4 id="检测一致性问题" tabindex="-1"><a class="header-anchor" href="#检测一致性问题"><span>检测一致性问题</span></a></h4><p>缓存一致性协议</p><p>最著名的一个缓存一致性协议是MESI（Modified Exclusive Shared Invalid，修改、独有、共享、无效），它支持如现代CPU中使用的缓存回写。</p><ul><li>修改(Modified)—缓存行只在当前缓存出现，其值相对内存中的值已经发生变化</li><li>独有(Exclusive)—缓存行只在当前缓存出现，其值与内存中的值一致</li><li>共享(Shared)—缓存行出现在当前缓存和其他缓存，并且值都与内存中的值一致</li><li>无效(Invalid)—缓存行没有被使用（例如，不包含任何内存地址的内容）</li></ul><p>实际上，CPU厂商通常会实现稍加改进的MESI变体。例如，Intel使用MESIF，它增添加了一个转发(Forwarding，F)状态；而AMD使用MOESI，它增加了一个持有(Owning，O)状态。</p><figure><img src="'+g+'" alt="image_0187" tabindex="0" loading="lazy"><figcaption>image_0187</figcaption></figure><h5 id="真共享" tabindex="-1"><a class="header-anchor" href="#真共享"><span>真共享</span></a></h5><p>当处理器访问相同变量时，称为“真共享”</p><h5 id="伪共享" tabindex="-1"><a class="header-anchor" href="#伪共享"><span>伪共享</span></a></h5><p>当两个不同的处理器修改恰巧位于同一缓存行的不同变量时，称为“伪共享”</p><p>伪共享是多线程应用程序性能问题的主要来源，因此现代分析工具都支持这种场景的检测。TMA把有真共享和伪共享问题的应用程序表征为内存绑定类型。在这种场景下，通常可以看到比较高的竞争访问(Contested Access)指标。</p>',73)]))}const x=l(m,[["render",b],["__file","现代cpu性能分析与优化.html.vue"]]),_=JSON.parse('{"path":"/tech/book/%E7%8E%B0%E4%BB%A3cpu%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96.html","title":"现代cpu性能分析与优化","lang":"zh-CN","frontmatter":{"title":"现代cpu性能分析与优化","date":"2024-09-29T08:45:00.000Z","category":"cpu","tag":["profile","lbr","ILP"],"description":"现代cpu性能分析 cpu微架构 流水线 取址-IF 译码-ID 执行-EXE 访存-MEM 回写-WB 指令集并行 程序中的大多数指令是独立的，所以都适合流水线化和并行执行 ILP-instruction level parallelism 指令在最终执行时称为退休 乱序执行OOO-out of order 大多数CPU可以一个时钟周期发射多个指令 ...","head":[["meta",{"property":"og:url","content":"https://blog.ruizhou.cf/tech/book/%E7%8E%B0%E4%BB%A3cpu%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"rz blog"}],["meta",{"property":"og:title","content":"现代cpu性能分析与优化"}],["meta",{"property":"og:description","content":"现代cpu性能分析 cpu微架构 流水线 取址-IF 译码-ID 执行-EXE 访存-MEM 回写-WB 指令集并行 程序中的大多数指令是独立的，所以都适合流水线化和并行执行 ILP-instruction level parallelism 指令在最终执行时称为退休 乱序执行OOO-out of order 大多数CPU可以一个时钟周期发射多个指令 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-09T02:03:02.000Z"}],["meta",{"property":"article:tag","content":"profile"}],["meta",{"property":"article:tag","content":"lbr"}],["meta",{"property":"article:tag","content":"ILP"}],["meta",{"property":"article:published_time","content":"2024-09-29T08:45:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-09T02:03:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"现代cpu性能分析与优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-29T08:45:00.000Z\\",\\"dateModified\\":\\"2024-10-09T02:03:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ruizhou\\",\\"url\\":\\"https://blog.ruizhou.cf\\"}]}"]]},"headers":[{"level":2,"title":"现代cpu性能分析","slug":"现代cpu性能分析","link":"#现代cpu性能分析","children":[{"level":3,"title":"cpu微架构","slug":"cpu微架构","link":"#cpu微架构","children":[{"level":4,"title":"流水线","slug":"流水线","link":"#流水线","children":[]},{"level":4,"title":"指令集并行","slug":"指令集并行","link":"#指令集并行","children":[]},{"level":4,"title":"存储","slug":"存储","link":"#存储","children":[]},{"level":4,"title":"cpu前端","slug":"cpu前端","link":"#cpu前端","children":[]},{"level":4,"title":"cpu后端","slug":"cpu后端","link":"#cpu后端","children":[]},{"level":4,"title":"性能监控单元","slug":"性能监控单元","link":"#性能监控单元","children":[]}]},{"level":3,"title":"性能分析专业术语","slug":"性能分析专业术语","link":"#性能分析专业术语","children":[]},{"level":3,"title":"性能分析方法","slug":"性能分析方法","link":"#性能分析方法","children":[{"level":4,"title":"代码插桩","slug":"代码插桩","link":"#代码插桩","children":[]},{"level":4,"title":"跟踪","slug":"跟踪","link":"#跟踪","children":[]},{"level":4,"title":"采样","slug":"采样","link":"#采样","children":[]},{"level":4,"title":"屋顶线性能模型","slug":"屋顶线性能模型","link":"#屋顶线性能模型","children":[]},{"level":4,"title":"性能分析相关cpu特性","slug":"性能分析相关cpu特性","link":"#性能分析相关cpu特性","children":[{"level":5,"title":"TMA","slug":"tma","link":"#tma","children":[]}]},{"level":4,"title":"最后分支记录","slug":"最后分支记录","link":"#最后分支记录","children":[]}]}]},{"level":2,"title":"基于源代码的cpu调优","slug":"基于源代码的cpu调优","link":"#基于源代码的cpu调优","children":[{"level":3,"title":"cpu前端优化","slug":"cpu前端优化","link":"#cpu前端优化","children":[]},{"level":3,"title":"cpu后端优化","slug":"cpu后端优化","link":"#cpu后端优化","children":[]},{"level":3,"title":"优化错误投机","slug":"优化错误投机","link":"#优化错误投机","children":[]},{"level":3,"title":"其他调优","slug":"其他调优","link":"#其他调优","children":[]},{"level":3,"title":"优化多线程应用程序","slug":"优化多线程应用程序","link":"#优化多线程应用程序","children":[{"level":4,"title":"性能扩展和开销","slug":"性能扩展和开销","link":"#性能扩展和开销","children":[]},{"level":4,"title":"并行效率指标","slug":"并行效率指标","link":"#并行效率指标","children":[]},{"level":4,"title":"使用Linux perf进行分析","slug":"使用linux-perf进行分析","link":"#使用linux-perf进行分析","children":[]},{"level":4,"title":"使用Coz进行分析","slug":"使用coz进行分析","link":"#使用coz进行分析","children":[]},{"level":4,"title":"使用eBPF和GAPP进行分析","slug":"使用ebpf和gapp进行分析","link":"#使用ebpf和gapp进行分析","children":[]},{"level":4,"title":"检测一致性问题","slug":"检测一致性问题","link":"#检测一致性问题","children":[{"level":5,"title":"真共享","slug":"真共享","link":"#真共享","children":[]},{"level":5,"title":"伪共享","slug":"伪共享","link":"#伪共享","children":[]}]}]}]}],"git":{"createdTime":1727688404000,"updatedTime":1728439382000,"contributors":[{"name":"liuruizhou","email":"liuruizhou@bilibili.com","commits":3}]},"readingTime":{"minutes":8.81,"words":2644},"filePathRelative":"tech/book/现代cpu性能分析与优化.md","localizedDate":"2024年9月29日","excerpt":"","autoDesc":true}');export{x as comp,_ as data};
