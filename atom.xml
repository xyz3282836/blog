<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://blog.ruizhou.cf/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://blog.ruizhou.cf/</id>
  <title>rz blog</title>
  <subtitle>blog for it tech</subtitle>
  <icon>https://blog.ruizhou.cf/favicon.ico</icon>
  <rights>MIT 协议</rights>
  <updated>2024-10-30T13:12:31.560Z</updated>
  <generator>@vuepress/plugin-feed</generator>
  <link rel="self" href="https://blog.ruizhou.cf/atom.xml"/>
  <link rel="alternate" href="https://blog.ruizhou.cf/"/>
  <category term="发布会"/>
  <category term="小米"/>
  <category term="docker"/>
  <category term="cpu"/>
  <category term="go"/>
  <category term="money"/>
  <category term="engineering"/>
  <category term="linux"/>
  <category term="harmony"/>
  <category term="web"/>
  <category term="英文"/>
  <category term="ai"/>
  <category term="硬件"/>
  <category term="Linux"/>
  <category term="基础"/>
  <category term="服务器"/>
  <category term="软件"/>
  <category term="技术"/>
  <category term="前端"/>
  <category term="Android"/>
  <category term="后端"/>
  <category term="GitHub"/>
  <category term="教程"/>
  <category term="小程序"/>
  <category term="Node.js"/>
  <contributor>
    <name>陈慧玲</name>
  </contributor>
  <entry>
    <title type="text">科技发布会</title>
    <id>https://blog.ruizhou.cf/launch-event/</id>
    <link href="https://blog.ruizhou.cf/launch-event/"/>
    <updated>2024-10-30T05:11:15.000Z</updated>
    <summary type="html"><![CDATA[<h2>发布会</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p><strong>xiaomi</strong> 发布会官方新闻地址 <a href="https://www.mi.com/global/discover" target="_blank" rel="noopener noreferrer">全球地址</a></p>
</div>
<!-- markdownlint-disable MD033 -->
<div class="catalog-display-container">
  </div>]]></summary>
    <content type="html"><![CDATA[<h2>发布会</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p><strong>xiaomi</strong> 发布会官方新闻地址 <a href="https://www.mi.com/global/discover" target="_blank" rel="noopener noreferrer">全球地址</a></p>
</div>
<!-- markdownlint-disable MD033 -->
<div class="catalog-display-container">
  </div>
<!-- markdownlint-enable MD033 -->
]]></content>
    <category term="发布会"/>
    <published>2024-10-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">小米2024-10-29新品发布会</title>
    <id>https://blog.ruizhou.cf/launch-event/xiaomi20241029.html</id>
    <link href="https://blog.ruizhou.cf/launch-event/xiaomi20241029.html"/>
    <updated>2024-10-30T05:11:15.000Z</updated>
    <summary type="html"><![CDATA[<h2>发布会产品</h2>
<figure><figcaption>xiaomi10-29</figcaption></figure>
]]></summary>
    <content type="html"><![CDATA[<h2>发布会产品</h2>
<figure><figcaption>xiaomi10-29</figcaption></figure>
]]></content>
    <category term="小米"/>
    <published>2024-10-29T11:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">prometheus+granfan</title>
    <id>https://blog.ruizhou.cf/tech/docker/prometheus-granfan.html</id>
    <link href="https://blog.ruizhou.cf/tech/docker/prometheus-granfan.html"/>
    <updated>2024-10-30T05:11:15.000Z</updated>
    <summary type="html"><![CDATA[<h3>prometheus.yml</h3>
<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># my global config</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  scrape_interval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">5s</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  evaluation_interval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">5s</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # Evaluate rules every 15 seconds. The default is every 1 minute.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # scrape_timeout is set to the global default (10s).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Alertmanager configuration</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">alerting</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  alertmanagers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">static_configs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">targets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # - alertmanager:9093</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rule_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # - "first_rules.yml"</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # - "second_rules.yml"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># A scrape configuration containing exactly one endpoint to scrape:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Here it's Prometheus itself.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scrape_configs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">job_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"bwg_wode"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # metrics_path defaults to '/metrics'</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # scheme defaults to 'http'.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    scheme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"https"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    static_configs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">targets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"www.ruizhou.buzz"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h3>prometheus.yml</h3>
<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># my global config</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  scrape_interval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">5s</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  evaluation_interval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">5s</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> # Evaluate rules every 15 seconds. The default is every 1 minute.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # scrape_timeout is set to the global default (10s).</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Alertmanager configuration</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">alerting</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  alertmanagers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">static_configs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">targets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # - alertmanager:9093</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rule_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # - "first_rules.yml"</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # - "second_rules.yml"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># A scrape configuration containing exactly one endpoint to scrape:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># Here it's Prometheus itself.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scrape_configs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">job_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"bwg_wode"</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # metrics_path defaults to '/metrics'</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # scheme defaults to 'http'.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    scheme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"https"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    static_configs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">targets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"www.ruizhou.buzz"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>web-config.yml</h3>
<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">basic_auth_users</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">$2a$10$SbdVuCOUD8ax.YQ2kX69Muu8rxXAsqFZ2gtZ/43yh9BVFl12HQkhi</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3>compose.yml</h3>
<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1.0"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  prometheus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    restart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">always</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">prometheus</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">prom/prometheus:latest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 配置文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"--config.file=/etc/prometheus/prometheus.yml"</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 指定web面板账号密码访问</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # - '--web.config.file=/etc/prometheus/web-config.yml'</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 数据目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"--storage.tsdb.path=/data/prometheus"</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 数据保留时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"--storage.tsdb.retention.time=30d"</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 运行使用 curl -X POST http://localhost:9090/-/reload  重载其配置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"--web.enable-lifecycle"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 需要权限 mkdir prometheus_data &amp;&amp; chown 65534 ./prometheus_data</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">./config/prometheus.yml:/etc/prometheus/prometheus.yml</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">./data:/data/prometheus</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">./config/web-config.yml:/etc/prometheus/web-config.yml</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">9090:9090</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  grafana</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    restart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">always</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">grafana</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">grafana/grafana:latest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"3000:3000"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">./grafana_data:/var/lib/grafana</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">GF_SECURITY_ADMIN_USER=admin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">GF_SECURITY_ADMIN_PASSWORD=123456</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">GF_USERS_ALLOW_SIGN_UP=false</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>run shell</h3>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 9090:9090</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/dev/promtheus/bwg_wode/config/prometheus.yml:/etc/prometheus/prometheus.yml</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/dev/promtheus/bwg_wode/data:/etc/prometheus/data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">    prom/prometheus:latest</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">	--storage.tsdb.path=/etc/prometheus/data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">	--storage.tsdb.retention.time=30d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> \</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">	--config.file=/etc/prometheus/prometheus.yml</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="docker"/>
    <published>2024-10-29T10:08:00.000Z</published>
  </entry>
  <entry>
    <title type="text">现代cpu性能分析与优化</title>
    <id>https://blog.ruizhou.cf/tech/book/%E7%8E%B0%E4%BB%A3cpu%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96.html</id>
    <link href="https://blog.ruizhou.cf/tech/book/%E7%8E%B0%E4%BB%A3cpu%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E4%B8%8E%E4%BC%98%E5%8C%96.html"/>
    <updated>2024-10-09T02:03:02.000Z</updated>
    <summary type="html"><![CDATA[<h2>现代cpu性能分析</h2>
<h3>cpu微架构</h3>
<h4>流水线</h4>
<ul>
<li>取址-IF</li>
<li>译码-ID</li>
<li>执行-EXE</li>
<li>访存-MEM</li>
<li>回写-WB</li>
</ul>
<h4>指令集并行</h4>
<ul>
<li>程序中的大多数指令是独立的，所以都适合流水线化和并行执行</li>
<li>ILP-instruction level parallelism</li>
<li>指令在最终执行时称为退休</li>
<li>乱序执行OOO-out of order</li>
<li>大多数CPU可以一个时钟周期发射多个指令</li>
<li>投机执行
<ul>
<li>预测分支执行</li>
<li>投机执行的结果必须被制止和丢弃。这被称为分支预测错误惩罚</li>
</ul>
</li>
<li>线程并行
<ul>
<li>也就是常见的多线程或者多进程，通过切换上下文来跟踪线程或者进程的状态</li>
</ul>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>现代cpu性能分析</h2>
<h3>cpu微架构</h3>
<h4>流水线</h4>
<ul>
<li>取址-IF</li>
<li>译码-ID</li>
<li>执行-EXE</li>
<li>访存-MEM</li>
<li>回写-WB</li>
</ul>
<h4>指令集并行</h4>
<ul>
<li>程序中的大多数指令是独立的，所以都适合流水线化和并行执行</li>
<li>ILP-instruction level parallelism</li>
<li>指令在最终执行时称为退休</li>
<li>乱序执行OOO-out of order</li>
<li>大多数CPU可以一个时钟周期发射多个指令</li>
<li>投机执行
<ul>
<li>预测分支执行</li>
<li>投机执行的结果必须被制止和丢弃。这被称为分支预测错误惩罚</li>
</ul>
</li>
<li>线程并行
<ul>
<li>也就是常见的多线程或者多进程，通过切换上下文来跟踪线程或者进程的状态</li>
</ul>
</li>
</ul>
<h4>存储</h4>
<ul>
<li>主存-位于高速缓存的下游，支持大容量且成本合适的DRAM（动态RAM）
<ul>
<li>主存三属性
<ul>
<li>延迟</li>
<li>带宽</li>
<li>容量</li>
</ul>
</li>
<li>大多数CPU都支持的主流DRAM技术是DDR（Double Data Rate，双倍数据速率）DRAM技术</li>
</ul>
</li>
</ul>
<h4>cpu前端</h4>
<ul>
<li>将准备好的指令送入CPU后端</li>
</ul>
<h4>cpu后端</h4>
<ul>
<li>CPU后端采用乱序(Out-Of-Order)引擎来执行指令并存储结果</li>
</ul>
<h4>性能监控单元</h4>
<ul>
<li>PMU-performance monitoring unit</li>
</ul>
<h3>性能分析专业术语</h3>
<ul>
<li>退休指令与执行指令
<ul>
<li>PMC-性能监控计数器
<ul>
<li>perf stat -e instructions ./bin</li>
</ul>
</li>
</ul>
</li>
<li>CPI-每指令周期数
<ul>
<li>1/IPC</li>
</ul>
</li>
<li>IPC-每周期指令数</li>
<li>微操作
<ul>
<li>x86架构微处理器把复杂类CISC指令转化为简单类RISC微操作（microoperation，简称μop或uop）</li>
</ul>
</li>
<li>缓存未命中
<ul>
<li>指令缓存未命中被归类为前端停滞</li>
<li>数据缓存未命中被归类为后端停滞</li>
</ul>
</li>
<li>分支预测错误
<ul>
<li>perf stat -e branches,branch-misses -- bin</li>
</ul>
</li>
</ul>
<h3>性能分析方法</h3>
<h4>代码插桩</h4>
<ul>
<li>手动插桩</li>
<li>自动插桩
<ul>
<li>最广为人知的用例是代码覆盖度分析和基于剖析文件的编译优化</li>
</ul>
</li>
<li>二进制插桩
<ul>
<li>静态插桩（提前完成）</li>
<li>动态插桩（在程序执行时按需插入插桩代码）</li>
<li>Intel Pin是非常流行的二进制插桩工具之一</li>
</ul>
</li>
</ul>
<h4>跟踪</h4>
<ul>
<li>跟踪依赖于程序外部依赖项的现有插桩
<ul>
<li>strace工具可以跟踪系统调用，可以被认为是Linux内核的插桩</li>
</ul>
</li>
</ul>
<h4>采样</h4>
<ul>
<li>linux perf收集调用栈
<ul>
<li>帧指针</li>
<li>DWARF</li>
<li>最后分支特性 lbr</li>
</ul>
</li>
<li>火焰图</li>
</ul>
<h4>屋顶线性能模型</h4>
<ul>
<li>硬件有两个主要限制
<ul>
<li>计算速度（峰值计算性能，FLOPS）</li>
<li>数据搬移速度（峰值内存带宽，GB/s）</li>
</ul>
</li>
<li>应用程序的最大性能受峰值计算性能（水平线）和平台带宽与算术强度乘积（对角线）之间的最小值的限制</li>
<li>在屋顶线图上，我们可以绘制标量单核、SIMD单核和SIMD多核性能的理论最大值，这可以让我们了解应用程序性能的提高空间
<ul>
<li>如果发现应用程序是计算密集型的（即具有较高的算术强度）并且性能低于峰值标量单核性能，则应该考虑强制向量化（见8.2.3节）并利用多个线程分配工作</li>
<li>如果应用程序的算术强度较低，则应该寻找改善内存访问的方法</li>
</ul>
</li>
<li>使用屋顶线模型优化性能的最终目标是将点向上移动
<ul>
<li>向量化和线程化将点向上移动</li>
<li>通过增加算术强度优化内存访问将点向右移动同时还可能提高性能</li>
</ul>
</li>
<li>静态性能分析</li>
</ul>
<h4>性能分析相关cpu特性</h4>
<h5>TMA</h5>
<ul>
<li>
<p>前端绑定 front bound</p>
<ul>
<li>读取延迟 fe latency</li>
<li>读取带宽 fe bandwidth</li>
</ul>
</li>
<li>
<p>后端绑定 backend bound</p>
<ul>
<li>核绑定 core bound</li>
<li>内存绑定 memory bound
<ul>
<li>L1 bound</li>
<li>L2 bound</li>
<li>L3 bound</li>
<li>DRAM bound</li>
<li>stroe bound</li>
</ul>
</li>
</ul>
</li>
<li>
<p>退休 retiring</p>
<ul>
<li>轻量微操作 base</li>
<li>微码序列器 microcode sequencer</li>
</ul>
</li>
<li>
<p>错误投机 bad speculation</p>
<ul>
<li>分支预测错误 brach mispred</li>
<li>机器清理 machine clears</li>
</ul>
</li>
<li>
<p>linux perf中TMA，获取TMA第1层指标</p>
<ul>
<li>perf stat --topdown -a -- taskset -c 0 ./exec b
<ul>
<li>--topdown可以查看TMA指标</li>
<li>taskset -c 0可以绑定core 0</li>
</ul>
</li>
</ul>
</li>
<li>
<p>toplev可以获取TMA的第2，3层指标</p>
<ul>
<li>
<p>python实现，通过封装和调用linux perf工具实现</p>
</li>
<li>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>toplev.py --core S0-C0 -l1 -v --no-desc -c 0 ./exec</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>后端绑定53.43%</li>
</ul>
</li>
<li>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>toplev.py --core S0-C0 -l2 -v --no-desc -c 0 ./exec</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>内存绑定44.59%</li>
</ul>
</li>
<li>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>toplev.py --core S0-C0 -l3 -v --no-desc -c 0 ./exec</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>DRAM绑定47.11%</li>
<li>Skylake CPU架构，DRAM_Bound指标是通过CYCLE_ACTIVITY.STALLS_L3_MISS性能事件计算的</li>
</ul>
</li>
<li>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>perf stat -e cycles,cycle_activity.stalls_l3_miss -- ./exec</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>统计了当L3缓存未命中未完成预期加载而导致执行阻塞的CPU周期数</li>
</ul>
</li>
<li>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>perf record -e cpu/event=0xd1,umask=0x20,name=MEM_LOAD_RETIRED.L3_MISS/PPP ./exec</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
</ul>
</li>
</ul>
<h4>最后分支记录</h4>
<ul>
<li>
<p>利用该特性可以持续地记录大量已经执行的分支跳转指令</p>
<ul>
<li>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>perf record -b -e cycles ./exec</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
</ul>
</li>
<li>
<p>分析分支预测错误率</p>
</li>
</ul>
<h2>基于源代码的cpu调优</h2>
<h3>cpu前端优化</h3>
<p>前端不能给执行单元提供指令的原因有很多，不过通常被归结为<code>缓存利用率</code>和<code>无法从内存中获取指令</code>两类</p>
<figure><figcaption>image_0099</figcaption></figure>
<ul>
<li>基本块布局</li>
<li>基本块对齐</li>
<li>函数拆分</li>
<li>函数分组</li>
</ul>
<h3>cpu后端优化</h3>
<p>内存绑定，几种策略优化</p>
<ul>
<li>缓存友好的数据结构</li>
<li>按顺序访问数据</li>
</ul>
<h3>优化错误投机</h3>
<p>当经常发生分支预测错误时，会导致显著的性能劣化</p>
<p>通常，现代CPU发生分支预测错误时会有15～20个时钟周期的开销</p>
<p>对于常规应用程序，有5%～10%的“错误投机”率是正常的</p>
<p>可以直接解决分支预测错误问题的方法就是消除分支本身</p>
<ul>
<li>用查表替换分支</li>
<li>用断言替换分支</li>
</ul>
<p>当CPU分支预测器难以预测分支输出模式时，应用程序的性能可能会受到影响。在这种场景下，无分支版本的算法会更好。</p>
<h3>其他调优</h3>
<ul>
<li>编译时计算</li>
<li>编译器内建函数</li>
<li>缓存预热</li>
<li>减少慢速浮点运算
<ul>
<li>对于有浮点值运算的应用程序，当浮点数值非规范时，可能会遇到异常场景。对非规范的数值进行运算，很容易就会变得非常慢。当CPU处理尝试对非规范浮点值运算的指令时，需要对这个场景进行特殊处理。因为是异常场景，CPU需要请求微码协助[插图]。微码序列器只读存储器将会为流水线提供大量微操作。</li>
</ul>
</li>
</ul>
<h3>优化多线程应用程序</h3>
<h4>性能扩展和开销</h4>
<p>阿姆达尔定律</p>
<p>该定律表明并行程序的加速效果被它的串行组件所限制</p>
<figure><figcaption>image_0167</figcaption></figure>
<p>进一步给系统添加计算单元可能会产生负加速效果。Neil Gunther将这种效应解释为通用可伸缩性定律(Universal Scalability Law，USL)，它是阿姆达尔定律的扩展。通用可伸缩性定律将计算单元（线程）之间的通信描述为影响性能的另一个门控因素。随着系统规模的扩大，开销将阻碍性能。超过某个临界点，系统性能开始下降。通用可伸缩性定律被广泛地应用于系统容量和扩展性的建模。</p>
<figure><figcaption>image_0169</figcaption></figure>
<h4>并行效率指标</h4>
<p>有效CPU利用率</p>
<h4>使用Linux perf进行分析</h4>
<h4>使用Coz进行分析</h4>
<p>Coz是一个新型的剖析工具，它可以解决这类问题并填补传统软件剖析工具的短板。它使用了一种名为“因果剖析”的新技术，该技术在应用程序运行时进行实验，通过模拟加快代码段的速度来预测某些优化的总体效果。它通过对其他同步运行的代码插入暂停动作，以实现“模拟加速”(Curtsinger&amp;Berger，2015)。</p>
<h4>使用eBPF和GAPP进行分析</h4>
<p>eBPF是基于运行在内核中的沙箱虚拟机的，这使得在内核中安全、高效地执行用户自定义程序成为可能。用C语言开发用户自定义的程序，然后用准备好的BCC编译器[插图]将其编译成BPF字节码，以便在内核虚拟机中进行加载。这些BPF程序可以设计为在某个内核事件执行时启动，然后通过不同方式把原始或处理过的数据返回用户空间。</p>
<p>开源社区提供了很多通用的eBPF程序，其中一个叫通用自动并行剖析工具(Generic Automatic Parallel Profiler，GAPP)，它有助于跟踪多线程竞争问题。GAPP通过eBPF对已识别的序列化瓶颈的紧急程度进行排序并收集被阻塞的线程和导致阻塞的线程的堆栈，来跟踪多线程应用程序的竞争开销。GAPP的好处是它不需要进行代码更改、代码插桩，也不需要重新编译。</p>
<h4>检测一致性问题</h4>
<p>缓存一致性协议</p>
<p>最著名的一个缓存一致性协议是MESI（Modified Exclusive Shared Invalid，修改、独有、共享、无效），它支持如现代CPU中使用的缓存回写。</p>
<ul>
<li>修改(Modified)—缓存行只在当前缓存出现，其值相对内存中的值已经发生变化</li>
<li>独有(Exclusive)—缓存行只在当前缓存出现，其值与内存中的值一致</li>
<li>共享(Shared)—缓存行出现在当前缓存和其他缓存，并且值都与内存中的值一致</li>
<li>无效(Invalid)—缓存行没有被使用（例如，不包含任何内存地址的内容）</li>
</ul>
<p>实际上，CPU厂商通常会实现稍加改进的MESI变体。例如，Intel使用MESIF，它增添加了一个转发(Forwarding，F)状态；而AMD使用MOESI，它增加了一个持有(Owning，O)状态。</p>
<figure><figcaption>image_0187</figcaption></figure>
<h5>真共享</h5>
<p>当处理器访问相同变量时，称为“真共享”</p>
<h5>伪共享</h5>
<p>当两个不同的处理器修改恰巧位于同一缓存行的不同变量时，称为“伪共享”</p>
<p>伪共享是多线程应用程序性能问题的主要来源，因此现代分析工具都支持这种场景的检测。TMA把有真共享和伪共享问题的应用程序表征为内存绑定类型。在这种场景下，通常可以看到比较高的竞争访问(Contested Access)指标。</p>
]]></content>
    <category term="cpu"/>
    <published>2024-09-29T08:45:00.000Z</published>
  </entry>
  <entry>
    <title type="text">gmp</title>
    <id>https://blog.ruizhou.cf/tech/go/gmp.html</id>
    <link href="https://blog.ruizhou.cf/tech/go/gmp.html"/>
    <updated>2024-09-30T09:26:44.000Z</updated>
    <summary type="html"><![CDATA[<h3>reference</h3>
<p>https://mp.weixin.qq.com/s/9rBFZGlu8Kt5W8VgdoQkow</p>
<p>https://www.luozhiyun.com/archives/506</p>
]]></summary>
    <content type="html"><![CDATA[<h3>reference</h3>
<p>https://mp.weixin.qq.com/s/9rBFZGlu8Kt5W8VgdoQkow</p>
<p>https://www.luozhiyun.com/archives/506</p>
]]></content>
    <category term="go"/>
    <published>2025-07-13T07:30:00.000Z</published>
  </entry>
  <entry>
    <title type="text">财经</title>
    <id>https://blog.ruizhou.cf/tech/book/money.html</id>
    <link href="https://blog.ruizhou.cf/tech/book/money.html"/>
    <updated>2024-07-17T12:34:05.000Z</updated>
    <summary type="html"><![CDATA[<h2>有钱人和你想的不一样</h2>
<p>金钱观，从父母那边耳濡目染，其实本身就是错的</p>
<p>行动起来，宇宙都会帮你</p>
<p>创业，不是抛弃所有，而是要更加安全的创业，软着陆</p>
<h2>富爸爸穷爸爸</h2>
<ul>
<li>恐惧</li>
<li>欲望</li>
<li>无知，需要不断学习</li>
</ul>
<p>按部就班，努力学习，考好大学，顺利找了一份朝九晚五的工作，渐渐你会依赖这种模式，滋生<code>恐惧</code>，一旦没工作就没有收入，而一旦升职加薪，消费提升，<code>贪婪</code>心态作祟，更加依赖这种模式</p>
<p><code>无知</code>导致了恐惧和欲望</p>]]></summary>
    <content type="html"><![CDATA[<h2>有钱人和你想的不一样</h2>
<p>金钱观，从父母那边耳濡目染，其实本身就是错的</p>
<p>行动起来，宇宙都会帮你</p>
<p>创业，不是抛弃所有，而是要更加安全的创业，软着陆</p>
<h2>富爸爸穷爸爸</h2>
<ul>
<li>恐惧</li>
<li>欲望</li>
<li>无知，需要不断学习</li>
</ul>
<p>按部就班，努力学习，考好大学，顺利找了一份朝九晚五的工作，渐渐你会依赖这种模式，滋生<code>恐惧</code>，一旦没工作就没有收入，而一旦升职加薪，消费提升，<code>贪婪</code>心态作祟，更加依赖这种模式</p>
<p><code>无知</code>导致了恐惧和欲望</p>
<p>让感情跟随思想，不能任由感情控制人</p>
<p>不求回报的工作，很快就可以发现比拿工资更挣钱的方法。</p>
]]></content>
    <category term="money"/>
    <published>2024-07-07T13:08:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Soft Engineering At Google</title>
    <id>https://blog.ruizhou.cf/tech/book/se.html</id>
    <link href="https://blog.ruizhou.cf/tech/book/se.html"/>
    <updated>2024-07-17T12:34:05.000Z</updated>
    <summary type="html"><![CDATA[<h3>设定基调：心理安全</h3>
<p>大型群体的心里安全</p>
<p>向身边的朋友求助询问比问一大群陌生人容易的多。</p>
<p>一个新生向一大群人提问，心里暗示这个问题会被保存很多年，令新人感到害怕。心里安全的需求在大群体中会被放大。小群组的每个成员都需要发挥作用，创作一个安全的环境，确保新人有信心提出问题。后起专家感到有能力帮助新人，不必担心他们的答案收到既有专家的攻击。</p>
<p>实现这种安全友好环境的最重要方式是团队互动，而不是对抗性互动。</p>
<p><strong>团队互动模式</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">推荐模式（合作型）</th>
<th style="text-align:left">反模式(对抗型)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">基本的问题或错误被引导到正确的方向</td>
<td style="text-align:left">基本的问题或错误被挑剔，提问者被责骂</td>
</tr>
<tr>
<td style="text-align:left">解释的目的是为了帮助提问者学习</td>
<td style="text-align:left">解释的目的是为了炫耀自己的知识</td>
</tr>
<tr>
<td style="text-align:left">回应是亲切、耐心、乐于助人的</td>
<td style="text-align:left">回应是居高临下、尖酸刻薄、毫无建设性的</td>
</tr>
<tr>
<td style="text-align:left">互动是寻找解决方案的共享讨论</td>
<td style="text-align:left">互动是 "赢家 "和 "输家 "的争论</td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<h3>设定基调：心理安全</h3>
<p>大型群体的心里安全</p>
<p>向身边的朋友求助询问比问一大群陌生人容易的多。</p>
<p>一个新生向一大群人提问，心里暗示这个问题会被保存很多年，令新人感到害怕。心里安全的需求在大群体中会被放大。小群组的每个成员都需要发挥作用，创作一个安全的环境，确保新人有信心提出问题。后起专家感到有能力帮助新人，不必担心他们的答案收到既有专家的攻击。</p>
<p>实现这种安全友好环境的最重要方式是团队互动，而不是对抗性互动。</p>
<p><strong>团队互动模式</strong></p>
<p>| 推荐模式（合作型）                 | 反模式(对抗型)                         |
| :</p>
]]></content>
    <category term="engineering"/>
    <published>2024-04-06T02:45:00.000Z</published>
  </entry>
  <entry>
    <title type="text">base</title>
    <id>https://blog.ruizhou.cf/tech/linux/base.html</id>
    <link href="https://blog.ruizhou.cf/tech/linux/base.html"/>
    <updated>2024-07-17T12:34:05.000Z</updated>
    <summary type="html"><![CDATA[<h2>系统监控和诊断工具</h2>
<p>sysstat</p>
<p>iotop</p>
<p>pop-system-tools</p>
<h2>网络</h2>
<p>net-tools</p>
<p>freedp</p>
<p>tcpdump</p>
<p>telnet</p>
<p>nmap</p>
<p>mtr</p>
<p>map-ncat</p>
<h2>文件系统与磁盘</h2>
<p>lsof</p>
<p>xfsdump</p>
<p>strace</p>
<p>Boom-boot</p>
<p>smartmontools</p>
<h2>系统管理</h2>
<p>yum-utils</p>]]></summary>
    <content type="html"><![CDATA[<h2>系统监控和诊断工具</h2>
<p>sysstat</p>
<p>iotop</p>
<p>pop-system-tools</p>
<h2>网络</h2>
<p>net-tools</p>
<p>freedp</p>
<p>tcpdump</p>
<p>telnet</p>
<p>nmap</p>
<p>mtr</p>
<p>map-ncat</p>
<h2>文件系统与磁盘</h2>
<p>lsof</p>
<p>xfsdump</p>
<p>strace</p>
<p>Boom-boot</p>
<p>smartmontools</p>
<h2>系统管理</h2>
<p>yum-utils</p>
<p>tmux</p>
<p>psmisc</p>
<p>rsync</p>
<h2>系统日志</h2>
<p>rsyslog</p>
<p>sos</p>
<h2>调试分析</h2>
<p>strace</p>
<p>perf</p>
<p>valgrind</p>
<p>bcc-tools</p>
]]></content>
    <category term="linux"/>
    <published>2024-06-18T04:44:00.000Z</published>
  </entry>
  <entry>
    <title type="text">鸿蒙</title>
    <id>https://blog.ruizhou.cf/tech/other/harmony.html</id>
    <link href="https://blog.ruizhou.cf/tech/other/harmony.html"/>
    <updated>2024-07-17T12:34:05.000Z</updated>
    <summary type="html"><![CDATA[<h2>diff</h2>
<figure><figcaption>diff</figcaption></figure>
]]></summary>
    <content type="html"><![CDATA[<h2>diff</h2>
<figure><figcaption>diff</figcaption></figure>
]]></content>
    <category term="harmony"/>
    <published>2024-06-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">cors</title>
    <id>https://blog.ruizhou.cf/tech/web/cors.html</id>
    <link href="https://blog.ruizhou.cf/tech/web/cors.html"/>
    <updated>2024-07-17T12:34:05.000Z</updated>
    <summary type="html"><![CDATA[<h2>CORS错误配置漏洞修复建议</h2>
<h3>漏洞简介：</h3>
<p>CORS，跨域资源共享（Cross-origin resource sharing）的本质是由服务端配置的策略指导客户端浏览器，放松同源策略限制，实现跨域资源共享。但是一旦服务器端访问控制策略配置出现错误，信任非预期域名，就会出现浏览器SOP被绕过。攻击者便可以利用CORS误配置漏洞， 从恶意网站跨域读写目标系统中的敏感信息。</p>
<h3>常见的CORS错误配置：</h3>
<ol>
<li>
<h4>反射 Origin头</h4>
<p>最简单地动态生成访问控制策略的方法，就是在Access-Control-Allow-Origin中反射请求的Origin值。例如，下面是一个错误 Nginx 配置示例：</p>
<p>​ add_header "Access-Control-Allow-Origin" $http_origin;</p>
<p>​ add_header “Access-Control-Allow-Credentials” “true”;</p>
<p>这种配置非常危险，相当于信任任意网站，给攻击者网站敞开了大门。任意攻击者网站可以直接跨域读取其资源内容。</p>
</li>
<li>
<h4>Origin 校验错误</h4>
<p>校验Origin头时使用了错误的方式，如：</p>
<ul>
<li>前缀匹配：例如<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 想要允许<a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>访问，但是只做了前缀匹配，导致同时信任了<a href="http://example.com.attack.com/" target="_blank" rel="noopener noreferrer">example.com.attack.com</a>的访问，而<a href="http://example.com.attack.com/" target="_blank" rel="noopener noreferrer">example.com.attack.com</a> 是攻击者可以控制的网站。</li>
<li>后缀匹配：例如<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 想要允许<a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>访问，由于后缀匹配出错，导致允许<a href="http://attackexample.com/" target="_blank" rel="noopener noreferrer">attackexample.com</a>访问。</li>
<li>没有转义’.’：例如，<a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>想要允许<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 访问时，但正则匹配没有转义’.’，导致允许<a href="http://wwwaexample.com/" target="_blank" rel="noopener noreferrer">wwwaexample.com</a>访问。</li>
<li>包含匹配：例如网站<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 想要允许 <a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>，但是Origin校验出错，出现允许<a href="http://ample.com/" target="_blank" rel="noopener noreferrer">ample.com</a>访问。</li>
</ul>
</li>
<li>
<h4>信任null</h4>
<p>​ Access-Control-Allow-Origin: null</p>
<p>​ Access-Control-Allow-Credentials: true</p>
</li>
<li>
<h4>Https域信任Http域</h4>
<p>如果HTTPS网站配置了CORS且信任HTTP域，那么中间人攻击者可以先劫持受信任HTTP域，然后通过这个域发送跨域请求到HTTPS网站，间接读取HTTPS域下的受保护内容。</p>
</li>
<li>
<h4>信任自身全部子域</h4>
<p>如果某个域配置了CORS且信任全部子域，那么攻击者可以利用其他任意子域上XSS漏洞，发送跨域请求到目标重要域网站，从而获取敏感内容。</p>
</li>
<li>
<h4>Origin:*与 Credentials:true 共用</h4>
<p>Access-Control-Allow-Origin: *</p>
<p>Access-Control-Allow-Credentials: true</p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>CORS错误配置漏洞修复建议</h2>
<h3>漏洞简介：</h3>
<p>CORS，跨域资源共享（Cross-origin resource sharing）的本质是由服务端配置的策略指导客户端浏览器，放松同源策略限制，实现跨域资源共享。但是一旦服务器端访问控制策略配置出现错误，信任非预期域名，就会出现浏览器SOP被绕过。攻击者便可以利用CORS误配置漏洞， 从恶意网站跨域读写目标系统中的敏感信息。</p>
<h3>常见的CORS错误配置：</h3>
<ol>
<li>
<h4>反射 Origin头</h4>
<p>最简单地动态生成访问控制策略的方法，就是在Access-Control-Allow-Origin中反射请求的Origin值。例如，下面是一个错误 Nginx 配置示例：</p>
<p>​ add_header "Access-Control-Allow-Origin" $http_origin;</p>
<p>​ add_header “Access-Control-Allow-Credentials” “true”;</p>
<p>这种配置非常危险，相当于信任任意网站，给攻击者网站敞开了大门。任意攻击者网站可以直接跨域读取其资源内容。</p>
</li>
<li>
<h4>Origin 校验错误</h4>
<p>校验Origin头时使用了错误的方式，如：</p>
<ul>
<li>前缀匹配：例如<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 想要允许<a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>访问，但是只做了前缀匹配，导致同时信任了<a href="http://example.com.attack.com/" target="_blank" rel="noopener noreferrer">example.com.attack.com</a>的访问，而<a href="http://example.com.attack.com/" target="_blank" rel="noopener noreferrer">example.com.attack.com</a> 是攻击者可以控制的网站。</li>
<li>后缀匹配：例如<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 想要允许<a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>访问，由于后缀匹配出错，导致允许<a href="http://attackexample.com/" target="_blank" rel="noopener noreferrer">attackexample.com</a>访问。</li>
<li>没有转义’.’：例如，<a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>想要允许<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 访问时，但正则匹配没有转义’.’，导致允许<a href="http://wwwaexample.com/" target="_blank" rel="noopener noreferrer">wwwaexample.com</a>访问。</li>
<li>包含匹配：例如网站<a href="http://www.example.com/" target="_blank" rel="noopener noreferrer">www.example.com</a> 想要允许 <a href="http://example.com/" target="_blank" rel="noopener noreferrer">example.com</a>，但是Origin校验出错，出现允许<a href="http://ample.com/" target="_blank" rel="noopener noreferrer">ample.com</a>访问。</li>
</ul>
</li>
<li>
<h4>信任null</h4>
<p>​ Access-Control-Allow-Origin: null</p>
<p>​ Access-Control-Allow-Credentials: true</p>
</li>
<li>
<h4>Https域信任Http域</h4>
<p>如果HTTPS网站配置了CORS且信任HTTP域，那么中间人攻击者可以先劫持受信任HTTP域，然后通过这个域发送跨域请求到HTTPS网站，间接读取HTTPS域下的受保护内容。</p>
</li>
<li>
<h4>信任自身全部子域</h4>
<p>如果某个域配置了CORS且信任全部子域，那么攻击者可以利用其他任意子域上XSS漏洞，发送跨域请求到目标重要域网站，从而获取敏感内容。</p>
</li>
<li>
<h4>Origin:*与 Credentials:true 共用</h4>
<p>Access-Control-Allow-Origin: *</p>
<p>Access-Control-Allow-Credentials: true</p>
</li>
</ol>
<h3>修复建议：</h3>
<ol>
<li>不要盲目反射 Origin头</li>
<li>严格校验 Origin 头，避免出现权限泄露</li>
<li>不要配置 Access-Control-Allow-Origin: null</li>
<li>HTTPS 网站不要信任HTTP 域</li>
<li>不要信任全部自身子域，减少攻击面</li>
<li>不要配置 Origin:*和 Credentials: true</li>
</ol>
]]></content>
    <category term="web"/>
    <published>2024-04-07T10:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">csrf</title>
    <id>https://blog.ruizhou.cf/tech/web/csrf.html</id>
    <link href="https://blog.ruizhou.cf/tech/web/csrf.html"/>
    <updated>2024-07-17T12:34:05.000Z</updated>
    <summary type="html"><![CDATA[<h2>CSRF错误配置漏洞修复建议</h2>
<h3>漏洞简介：</h3>
<p>CSRF(Cross-site request forgery) 跨站请求伪造，是用一些欺骗的手段诱导受害者访问一个带攻击代码的第三方网站，带攻击代码的第三方网站向被攻击的网站发起跨站请求。利用受害者已经登陆的权限，进行一些需要登陆的敏感操作。</p>
<h3>两种常见的 CSRF 漏洞利用：</h3>
<ol>
<li>
<h4>GET方法的CSRF</h4>
<p><code>&lt;img src=``"https://xxx.bilibili.com/action?xxx=xxx"</code> <code>&gt;</code></p>
<p>受害者访问带攻击代码的站点时，浏览器会带上 bilibili 域的 Cookie 请求 http://xxx.bilibili.com/action?xxx=xxx 域名</p>
</li>
<li>
<h4>POST方法的CSRF</h4>
<p><code>&lt;form action=``"https://xxx.bilibili.com/action"</code> <code>method=POST&gt;``  ``&lt;input type=``"hidden"</code> <code>name=``"xxx"</code> <code>value=``"xxx"</code> <code>/&gt;``&lt;/form&gt;``&lt;script&gt; document.forms[0].submit(); &lt;/script&gt;</code></p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>CSRF错误配置漏洞修复建议</h2>
<h3>漏洞简介：</h3>
<p>CSRF(Cross-site request forgery) 跨站请求伪造，是用一些欺骗的手段诱导受害者访问一个带攻击代码的第三方网站，带攻击代码的第三方网站向被攻击的网站发起跨站请求。利用受害者已经登陆的权限，进行一些需要登陆的敏感操作。</p>
<h3>两种常见的 CSRF 漏洞利用：</h3>
<ol>
<li>
<h4>GET方法的CSRF</h4>
<p><code>&lt;img src=``"https://xxx.bilibili.com/action?xxx=xxx"</code> <code>&gt;</code></p>
<p>受害者访问带攻击代码的站点时，浏览器会带上 bilibili 域的 Cookie 请求 http://xxx.bilibili.com/action?xxx=xxx 域名</p>
</li>
<li>
<h4>POST方法的CSRF</h4>
<p><code>&lt;form action=``"https://xxx.bilibili.com/action"</code> <code>method=POST&gt;``  ``&lt;input type=``"hidden"</code> <code>name=``"xxx"</code> <code>value=``"xxx"</code> <code>/&gt;``&lt;/form&gt;``&lt;script&gt; document.forms[0].submit(); &lt;/script&gt;</code></p>
</li>
</ol>
<h3>修复建议：</h3>
<ol>
<li>敏感操作避免使用 GET 方法（目前我们有一些业务同时支持 GET、POST 两种方式请求，GET 请求无 CSRF TOKEN 的校验）</li>
<li>POST 请求增加 CSRF TOKEN 校验（第三方站点无法获取用户的Token）</li>
<li>其他建议：也可以增加同源检测</li>
</ol>
]]></content>
    <category term="web"/>
    <published>2024-04-07T10:06:00.000Z</published>
  </entry>
  <entry>
    <title type="text"></title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/03/2404182054.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/03/2404182054.html"/>
    <updated>2024-07-17T12:34:05.000Z</updated>
    <summary type="html"><![CDATA[<p>The script depicted a heroic character standing up against harassment,showcasing the bravery and resilience of individuals in the fact of adversity.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>harassment 骚挠</p>
<p>adversity 逆境（adverse 敌对的；不利的）</p>
<p>resilience 韧性（resile 弹回，有弹力）</p>
</div>]]></summary>
    <content type="html"><![CDATA[<p>The script depicted a heroic character standing up against harassment,showcasing the bravery and resilience of individuals in the fact of adversity.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>harassment 骚挠</p>
<p>adversity 逆境（adverse 敌对的；不利的）</p>
<p>resilience 韧性（resile 弹回，有弹力）</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-04-18T12:54:00.000Z</published>
  </entry>
  <entry>
    <title type="text">go语言测试</title>
    <id>https://blog.ruizhou.cf/tech/go/test.html</id>
    <link href="https://blog.ruizhou.cf/tech/go/test.html"/>
    <updated>2024-04-04T15:27:22.000Z</updated>
    <summary type="html"><![CDATA[<h2>普通测试</h2>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Testxxx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">匹配</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Testxxx</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h2>普通测试</h2>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Testxxx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">匹配</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> Testxxx</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>必须Test开头</p>
<h2>性能测试</h2>
<p><code>-run</code>一般执行普通测试，性能测试需要<code>-bench</code>开启</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -bench</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> xxx</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>必须<code>Benchmark</code>开头，负责出错</p>
<p>例子：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go test -bench=BenchmarkGenerate$ -benchmem -benchtime=50x -count=3</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>-benchmem 展示内存分配信息</p>
<p>-benchtime 50x指执行50次，还可以是5s，表示控制在5s内</p>
<p>-count 3 表示benchmark 3轮</p>
<p>可以通过下面代码，跳过前面的耗时</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>b.ResetTimer() // 重置定时器</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>还可以限制指定范围做压力测试</p>
<div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> BenchmarkBubbleSort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">b</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">testing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">N</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">		b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">StopTimer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">		nums</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> generateWithCap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">		b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">StartTimer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">		bubbleSort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="go"/>
    <published>2024-04-01T06:26:00.000Z</published>
  </entry>
  <entry>
    <title type="text">常用命令</title>
    <id>https://blog.ruizhou.cf/tech/linux/normal.html</id>
    <link href="https://blog.ruizhou.cf/tech/linux/normal.html"/>
    <updated>2024-03-21T06:58:34.000Z</updated>
    <summary type="html"><![CDATA[<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">top</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> $(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">pgrep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ','</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">top</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> $(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">pgrep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ','</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nginx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>-c 显示完整命令行</p>
<p>-p 指定进程ID</p>
<p>pgrep 查找匹配条件的进程</p>
<p>-d ',' 指定输出分隔符</p>
<p>-f 进程名称</p>
]]></content>
    <category term="linux"/>
    <published>2024-03-07T13:20:00.000Z</published>
  </entry>
  <entry>
    <title type="text">New Zealand set to scrap world-first tobacco ban</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402280601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402280601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>New Zealand will <code>repeal</code> on Tuesday a world-first law banning <code>tobacco</code> sales for future generations, the government said, even while researchers and <code>campaigners</code> warned of the risk that people could die as a result. Set to take effect from July, the <code>toughest</code> anti-tobacco rules in the world would have banned sales to those born after Jan. 1, 2009, cut <code>nicotine</code> content in smoked tobacco products and reduced the number of tobacco retailers by more than 90%. The new <code>coalition</code> government <code>elected</code> in October confirmed the repeal will happen on Tuesday as a matter of urgency, enabling it to <code>scrap</code> the law without seeking public comment.</p>]]></summary>
    <content type="html"><![CDATA[<p>New Zealand will <code>repeal</code> on Tuesday a world-first law banning <code>tobacco</code> sales for future generations, the government said, even while researchers and <code>campaigners</code> warned of the risk that people could die as a result. Set to take effect from July, the <code>toughest</code> anti-tobacco rules in the world would have banned sales to those born after Jan. 1, 2009, cut <code>nicotine</code> content in smoked tobacco products and reduced the number of tobacco retailers by more than 90%. The new <code>coalition</code> government <code>elected</code> in October confirmed the repeal will happen on Tuesday as a matter of urgency, enabling it to <code>scrap</code> the law without seeking public comment.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>campaign 战役；运动；竞选活动（本意是在旷野中进行军事活动）</p>
<p>campainer 参加相关运动的人</p>
<p>nocotine 尼古丁</p>
<p>tobacco 烟草</p>
<p>repeal 废除；撤销</p>
<p>elect 选举</p>
<p>coalition 联合（联合政府）</p>
<p>scrap 放弃；拆毁；敲碎</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-27T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Toyota warns 50,000 US vehicle owners to stop driving, get immediate repairs</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402010601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402010601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Toyota Motor said it is <code>urging</code> the owners of 50,000 older U.S. vehicles to get immediate recall repairs because an air bag <code>inflator</code> could explode and potentially kill <code>motorists</code>. The Japanese automaker said the "Do Not Drive" <code>advisory</code> covers some 2003-2004 model year Corolla, 2003-2004 Corolla Matrix, and 2004-2005 RAV4s with Takata air bag inflators. More than 30 deaths worldwide, including 26 U.S. deaths, and hundreds of injuries in various automakers' vehicles since 2009 are linked to Takata air bag inflators that can explode, <code>unleashing</code> metal shrapnel inside cars and trucks.</p>]]></summary>
    <content type="html"><![CDATA[<p>Toyota Motor said it is <code>urging</code> the owners of 50,000 older U.S. vehicles to get immediate recall repairs because an air bag <code>inflator</code> could explode and potentially kill <code>motorists</code>. The Japanese automaker said the "Do Not Drive" <code>advisory</code> covers some 2003-2004 model year Corolla, 2003-2004 Corolla Matrix, and 2004-2005 RAV4s with Takata air bag inflators. More than 30 deaths worldwide, including 26 U.S. deaths, and hundreds of injuries in various automakers' vehicles since 2009 are linked to Takata air bag inflators that can explode, <code>unleashing</code> metal shrapnel inside cars and trucks.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>urge 敦促，鼓动</p>
<p>inflator 充气机</p>
<p>motorist 开汽车者</p>
<p>advisory 顾问的；咨询的</p>
<p>unleash 解开；发动</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-31T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Chita Rivera, quintessential Broadway musical star, dies at 91</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402011901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402011901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Chita Rivera, the vivacious Broadway musical star who <code>originated</code> roles in “West Side Story,” “Bye Bye Birdie,” “Chicago” and “Kiss of the Spider Woman,” won two competitive Tony Awards, and became one of the most honored Latina <code>entertainers</code> of her generation, died Jan. 30 in New York. She was 91. Her daughter, Lisa Mordente, announced the death but did not provide a specific cause. With her <code>raven</code> hair, <code>lithe</code> frame and smoky voice, Ms. Rivera cut a <code>mesmerizing</code> Broadway figure for more than six decades, her name <code>synonymous</code> with <code>vitality</code> and longevity on the musical stage.</p>]]></summary>
    <content type="html"><![CDATA[<p>Chita Rivera, the vivacious Broadway musical star who <code>originated</code> roles in “West Side Story,” “Bye Bye Birdie,” “Chicago” and “Kiss of the Spider Woman,” won two competitive Tony Awards, and became one of the most honored Latina <code>entertainers</code> of her generation, died Jan. 30 in New York. She was 91. Her daughter, Lisa Mordente, announced the death but did not provide a specific cause. With her <code>raven</code> hair, <code>lithe</code> frame and smoky voice, Ms. Rivera cut a <code>mesmerizing</code> Broadway figure for more than six decades, her name <code>synonymous</code> with <code>vitality</code> and longevity on the musical stage.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>broadway 百老汇</p>
<p>entertainment 娱乐</p>
<p>entertainer 艺人</p>
<p>raven 渡鸦；乌黑</p>
<p>lithe 柔软的</p>
<p>mesmerize 施催眠术；迷惑</p>
<p>synonymous 同义的（synonym 同义词）</p>
<p>vitality 生命力；长寿（vital 生命的）</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-01T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Meta’s Mark Zuckerberg issues dramatic apology at Senate hearing on child safety</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402020601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402020601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Meta’s Mark Zuckerberg was pushed to publicly apologise to the families of people who said they had been harmed by his social media platform, a dramatic moment in a heated congressional hearing over child safety online. Zuckerberg, whose Meta is the parent of popular platforms Facebook and Instagram, came under particular fire by <code>irate</code> lawmakers during Wednesday’s hearing before the <code>Senate</code> <code>judiciary</code> committee over whether social media companies have done enough to protect younger users from child <code>predators</code>, <code>pornography</code> and other harmful content.</p>]]></summary>
    <content type="html"><![CDATA[<p>Meta’s Mark Zuckerberg was pushed to publicly apologise to the families of people who said they had been harmed by his social media platform, a dramatic moment in a heated congressional hearing over child safety online. Zuckerberg, whose Meta is the parent of popular platforms Facebook and Instagram, came under particular fire by <code>irate</code> lawmakers during Wednesday’s hearing before the <code>Senate</code> <code>judiciary</code> committee over whether social media companies have done enough to protect younger users from child <code>predators</code>, <code>pornography</code> and other harmful content.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>irate 发怒的（-ire 愤怒💢）</p>
<p>the Senate judiciary committee 参议院司法委员会</p>
<p>senate 参议院；立法机构（sen- = old）</p>
<p>judiciary 司法部</p>
<p>predator 掠夺者</p>
<p>sexual predator 性侵犯者</p>
<p>pornography 色情小说作家</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-01T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Universal Music to pull songs from TikTok</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402021901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402021901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Universal Music is set to pull its millions of songs from TikTok after a breakdown in talks over payments. The move would mean the social media platform would no longer have access to songs by artists including Taylor Swift, The Weeknd and Drake. Universal <code>accused</code> TikTok of "<code>bullying</code>" and said it wanted to pay a "<code>fraction</code>" of the rate other social media sites do for access to its vast catalogue. TikTok said Universal was presenting a "false <code>narrative</code> and <code>rhetoric</code>".</p>]]></summary>
    <content type="html"><![CDATA[<p>Universal Music is set to pull its millions of songs from TikTok after a breakdown in talks over payments. The move would mean the social media platform would no longer have access to songs by artists including Taylor Swift, The Weeknd and Drake. Universal <code>accused</code> TikTok of "<code>bullying</code>" and said it wanted to pay a "<code>fraction</code>" of the rate other social media sites do for access to its vast catalogue. TikTok said Universal was presenting a "false <code>narrative</code> and <code>rhetoric</code>".</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>accuse 指控</p>
<p>bully 持强凌弱</p>
<p>fraction 微量</p>
<p>narrate 叙述</p>
<p>narrative 叙事的（narrative fiction 叙事小说）</p>
<p>rhetoric 修辞；雄辩；花言巧语；说辞</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-02T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Elmo asks, &amp;quot;How is everybody doing?&amp;quot; and the responses were unexpected</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402030601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402030601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>How is everybody doing? The answer, it seems, is not great. When Elmo, the Muppet, <code>innocently</code> asked people how they were on X (formerly Twitter), thousands of users replied, sharing their <code>grief</code> and despair. The <code>Sesame</code> Street character has now responded, saying he's "glad he asked" and posting the hashtag "#EmotionalWellBeing". US President Joe Biden agreed, posting: "Our friend Elmo is right: We have to be there for each other." It all began with a <code>casual</code> question, posed by the much-loved children's TV character on Monday morning. "Elmo is just checking in! How is everybody doing?" he asked on X.</p>]]></summary>
    <content type="html"><![CDATA[<p>How is everybody doing? The answer, it seems, is not great. When Elmo, the Muppet, <code>innocently</code> asked people how they were on X (formerly Twitter), thousands of users replied, sharing their <code>grief</code> and despair. The <code>Sesame</code> Street character has now responded, saying he's "glad he asked" and posting the hashtag "#EmotionalWellBeing". US President Joe Biden agreed, posting: "Our friend Elmo is right: We have to be there for each other." It all began with a <code>casual</code> question, posed by the much-loved children's TV character on Monday morning. "Elmo is just checking in! How is everybody doing?" he asked on X.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>innocently 无知地；天真的</p>
<p>grief 伤心；悲伤（grav- = heavy，重）</p>
<p>sesame 芝麻</p>
<p>casual 偶然的；不经意的；临时的</p>
<p>casual question 不经意的问题</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-02T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Gen Z boys and men more likely than baby boomers to believe feminism harmful, says poll</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402031901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402031901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Boys and men from generation Z are more likely than older baby boomers to believe that <code>feminism</code> has done more harm than good, according to research. One in four UK males aged 16 to 29 believe it is harder to be a man than a woman and a fifth now <code>look favourably on</code> the social media influencer Andrew Tate, the polling of over 3,600 people found. Tate, the British-American former kickboxer who has 8.7 million followers on the social media platform X, is facing charges in Romania, which he denies, of human <code>trafficking</code>, <code>rape</code> and forming a criminal <code>gang</code> to sexually <code>exploit</code> women.</p>]]></summary>
    <content type="html"><![CDATA[<p>Boys and men from generation Z are more likely than older baby boomers to believe that <code>feminism</code> has done more harm than good, according to research. One in four UK males aged 16 to 29 believe it is harder to be a man than a woman and a fifth now <code>look favourably on</code> the social media influencer Andrew Tate, the polling of over 3,600 people found. Tate, the British-American former kickboxer who has 8.7 million followers on the social media platform X, is facing charges in Romania, which he denies, of human <code>trafficking</code>, <code>rape</code> and forming a criminal <code>gang</code> to sexually <code>exploit</code> women.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>feminism 女权主义（female 女性；femin- 女人）</p>
<p>look favourably on 看好</p>
<p>polling 是指进行调查或投票</p>
<p>poll 选举投票</p>
<p>traffick traffic派生的动作执行者名词，贩子</p>
<p>rape 掠夺；强奸</p>
<p>gang 帮；成群结队</p>
<p>form a criminal gang 组建犯罪团伙</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-03T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Spring Festival Travelers Fret as Extreme Weather Arrives</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402040601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402040601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>With the world’s biggest annual human migration underway, Chinese people are <code>bracing</code> for disruption to their travel plans as extreme weather is set to hit almost half of the country over the next few days. Parts of China are likely to face their “most complicated” weather conditions during this year’s <code>Spring Festival travel rush</code>, known as chunyun, since 2008, the China Meteorological Administration said on Tuesday. Central and eastern areas may witness snowstorms and freezing rain until Feb. 5. Henan, Hubei, and Shandong provinces are forecast to see their heaviest snowfall on record for this time of year.</p>]]></summary>
    <content type="html"><![CDATA[<p>With the world’s biggest annual human migration underway, Chinese people are <code>bracing</code> for disruption to their travel plans as extreme weather is set to hit almost half of the country over the next few days. Parts of China are likely to face their “most complicated” weather conditions during this year’s <code>Spring Festival travel rush</code>, known as chunyun, since 2008, the China Meteorological Administration said on Tuesday. Central and eastern areas may witness snowstorms and freezing rain until Feb. 5. Henan, Hubei, and Shandong provinces are forecast to see their heaviest snowfall on record for this time of year.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>fret 烦躁；焦急；腐蚀</p>
<p>brace 支架；一对</p>
<p>bracing 支撑的；令人精神焕发的</p>
<p>Spring Festival travel rush 春运</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-03T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">&amp;quot;Nemo&amp;quot; clownfish drive away species with same stripes, study suggests</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402041901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402041901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Unlike the star of Disney’s Finding Nemo, real-life common <code>clownfish</code> are not <code>keen</code> on sharing their home with members of their own species. Researchers say they have discovered how they kick unwelcome guests out, by counting the stranger’s vertical white markings. According to previous research, the sea <code>anemones</code> that house common clownfish can also be a temporary home for other species – provided they have horizontal stripes or no stripes at all. However, common clownfish do not tend to <code>cohabit</code> with fish that have vertical markings like their own, instead experiments have shown they are more <code>aggressive</code> towards fish models painted with such patterns.</p>]]></summary>
    <content type="html"><![CDATA[<p>Unlike the star of Disney’s Finding Nemo, real-life common <code>clownfish</code> are not <code>keen</code> on sharing their home with members of their own species. Researchers say they have discovered how they kick unwelcome guests out, by counting the stranger’s vertical white markings. According to previous research, the sea <code>anemones</code> that house common clownfish can also be a temporary home for other species – provided they have horizontal stripes or no stripes at all. However, common clownfish do not tend to <code>cohabit</code> with fish that have vertical markings like their own, instead experiments have shown they are more <code>aggressive</code> towards fish models painted with such patterns.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>clouwn 小丑🤡</p>
<p>keen 热衷于</p>
<p>anemone 海葵</p>
<p>cohabit 同居</p>
<p>habit 习惯（habit- 住）</p>
<p>inhabit 居住于</p>
<p>aggressive 侵略的</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-04T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Scientists found a major clue why 4 of 5 autoimmune patients are women</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402050601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402050601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>An international team led by scientists at Stanford University has discovered a probable explanation for a decades-old biological mystery: why <code>vastly</code> more women than men suffer from <code>autoimmune</code> diseases such as <code>lupus</code> and <code>rheumatoid</code> <code>arthritis</code>. Women account for about 80 percent of the people <code>afflicted</code> with autoimmune diseases, a collection of more than 100 <code>ailments</code> that <code>burden</code> a combined 50 million Americans, according to the nonprofit Autoimmune Association. In a paper published Thursday in the journal Cell, researchers present new evidence that a <code>molecule</code> called Xist — pronounced like the word “exist” and found only in women — is a major <code>culprit</code> in these diseases.</p>]]></summary>
    <content type="html"><![CDATA[<p>An international team led by scientists at Stanford University has discovered a probable explanation for a decades-old biological mystery: why <code>vastly</code> more women than men suffer from <code>autoimmune</code> diseases such as <code>lupus</code> and <code>rheumatoid</code> <code>arthritis</code>. Women account for about 80 percent of the people <code>afflicted</code> with autoimmune diseases, a collection of more than 100 <code>ailments</code> that <code>burden</code> a combined 50 million Americans, according to the nonprofit Autoimmune Association. In a paper published Thursday in the journal Cell, researchers present new evidence that a <code>molecule</code> called Xist — pronounced like the word “exist” and found only in women — is a major <code>culprit</code> in these diseases.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>clue 线索</p>
<p>autoimmune a. 自身免疫的</p>
<p>lupus 狼疮</p>
<p>rheumatoid arthritis 类风湿性关节炎（rheumat- = to flow，流）</p>
<p>afflict 使苦恼；折磨</p>
<p>ailment 疾病；小病</p>
<p>burden 负担；承担</p>
<p>molecule 分子</p>
<p>culprit 引起问题的根因</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-04T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">China’s wild giant panda population reaches nearly 1,900</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402051901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402051901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>China has implemented measures to enhance the protection of giant pandas and their habitats, <code>yielding</code> remarkable outcomes during recent years, leading to an increase in the total number of wild giant pandas from around 1,100 in the 1980s to nearly 1,900 currently, the National Forestry and Grassland Administration said on Thursday. The Global Times has learnt from the administration's press briefing on Thursday that the protected area for giant pandas has increased from 1.39 million hectares to 2.58 million hectares, effectively safeguarding the safety and sustainable development of the wild population of giant pandas.</p>]]></summary>
    <content type="html"><![CDATA[<p>China has implemented measures to enhance the protection of giant pandas and their habitats, <code>yielding</code> remarkable outcomes during recent years, leading to an increase in the total number of wild giant pandas from around 1,100 in the 1980s to nearly 1,900 currently, the National Forestry and Grassland Administration said on Thursday. The Global Times has learnt from the administration's press briefing on Thursday that the protected area for giant pandas has increased from 1.39 million hectares to 2.58 million hectares, effectively safeguarding the safety and sustainable development of the wild population of giant pandas.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>yield 出产；产量</p>
<p>yield remarkable outcomes 取得好的结果</p>
<p>grassland 草原</p>
<p>sustainable development 可持续发展</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-05T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Grammys 2024: Taylor Swift makes history with best album award</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402060601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402060601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Taylor Swift stole the show at this year's Grammy Awards, becoming the first performer to win the prize for album of the year four times. The superstar had previously been tied on three best album wins with Stevie Wonder, Paul Simon and Frank Sinatra. She received the prize from Celine Dion, who made an unexpected <code>appearance</code>. Swift also used the event to reveal a surprise new album. Miley Cyrus and Billie Eilish took the other top awards at Sunday's ceremony.</p>]]></summary>
    <content type="html"><![CDATA[<p>Taylor Swift stole the show at this year's Grammy Awards, becoming the first performer to win the prize for album of the year four times. The superstar had previously been tied on three best album wins with Stevie Wonder, Paul Simon and Frank Sinatra. She received the prize from Celine Dion, who made an unexpected <code>appearance</code>. Swift also used the event to reveal a surprise new album. Miley Cyrus and Billie Eilish took the other top awards at Sunday's ceremony.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>appearance 出现；露面</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-05T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">A Russian cosmonaut sets a new record for the most time in space</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402061901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402061901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Russian <code>cosmonaut</code> Oleg Kononenko has broken the world record for the most <code>cumulative</code> time spent in space, Russia’s space agency Roscosmos reported Sunday. The 59-year-old has now spent more than 878 days and 12 hours in space, <code>surpassing</code> fellow Russian Gennady Padalka, who set the previous record of 878 days, 11 hours, 29 minutes, and 48 seconds in 2015. Kononenko has made five journeys to the International Space Station, dating back to 2008.</p>]]></summary>
    <content type="html"><![CDATA[<p>Russian <code>cosmonaut</code> Oleg Kononenko has broken the world record for the most <code>cumulative</code> time spent in space, Russia’s space agency Roscosmos reported Sunday. The 59-year-old has now spent more than 878 days and 12 hours in space, <code>surpassing</code> fellow Russian Gennady Padalka, who set the previous record of 878 days, 11 hours, 29 minutes, and 48 seconds in 2015. Kononenko has made five journeys to the International Space Station, dating back to 2008.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>cosmonaut 一般指的是俄罗斯宇航员</p>
<p>cumulative 累积的</p>
<p>cumulate 堆积</p>
<p>accumulate 堆积</p>
<p>surpass 超过</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-06T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">King Charles III diagnosed with cancer, Buckingham Palace says</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402070601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402070601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>King Charles has been diagnosed with a form of cancer, says Buckingham Palace. The type of cancer has not been revealed - it is not <code>prostate</code> cancer, but was discovered during his recent treatment for an enlarged prostate. The King began "regular treatments" on Monday and will <code>postpone</code> public duties during it, the Palace said. The Monarch, 75, "remains wholly positive about his treatment and looks forward to returning to full public duty as soon as possible," it added. No further details are being shared on the stage of cancer or a <code>prognosis</code>.</p>]]></summary>
    <content type="html"><![CDATA[<p>King Charles has been diagnosed with a form of cancer, says Buckingham Palace. The type of cancer has not been revealed - it is not <code>prostate</code> cancer, but was discovered during his recent treatment for an enlarged prostate. The King began "regular treatments" on Monday and will <code>postpone</code> public duties during it, the Palace said. The Monarch, 75, "remains wholly positive about his treatment and looks forward to returning to full public duty as soon as possible," it added. No further details are being shared on the stage of cancer or a <code>prognosis</code>.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>diagnose 诊断</p>
<p>prostate 前列腺</p>
<p>postpone 延迟；推迟（post - = behind，后面；pon- = put，放置）</p>
<p>propone 提议</p>
<p>proponent 支持者</p>
<p>prognosis 预测</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-06T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Lionel Messi match organiser declines to address demands for ticket refunds in Hong Kong</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402071901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402071901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>The organiser of a football match that superstar Lionel Messi sat out in Hong Kong, disappointing tens of thousands of fans, has <code>withdrawn</code> its application for HK$16 million in government <code>sponsorship</code> for the much-anticipated event in the face of public <code>outrage</code> and official pressure. Tatler Asia also revealed on Monday that Messi was said to be fit to play and included on the team sheet submitted by Inter Miami’s management before the match against a Hong Kong XI on Sunday. But Tatler Asia made no mention of refunds for fans, many from mainland China and some from as far away as Thailand, to see the footballing legend play.</p>]]></summary>
    <content type="html"><![CDATA[<p>The organiser of a football match that superstar Lionel Messi sat out in Hong Kong, disappointing tens of thousands of fans, has <code>withdrawn</code> its application for HK$16 million in government <code>sponsorship</code> for the much-anticipated event in the face of public <code>outrage</code> and official pressure. Tatler Asia also revealed on Monday that Messi was said to be fit to play and included on the team sheet submitted by Inter Miami’s management before the match against a Hong Kong XI on Sunday. But Tatler Asia made no mention of refunds for fans, many from mainland China and some from as far away as Thailand, to see the footballing legend play.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>withdraw 撤回</p>
<p>sponsorship 赞助</p>
<p>sponsor 发起者；赞助者；vt. 发起，赞助</p>
<p>outrage 愤怒💢；暴行</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-07T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Don’t shoot for it: shrinking moon sees hours-long quakes and landslides</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402080601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402080601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>The constancy of the moon in the night sky <code>belies</code> a more <code>volatile</code> reality, researchers said in new Nasa-funded research. As the core of the Earth’s only natural satellite cools, the moon is shrinking, causing it to <code>shrivel</code>. That creates <code>ripples</code> tens of meters high, called <code>thrust</code> faults, across the moon’s surface. In turn, those thrust faults can be the site of hours-long moonquakes and landslides, which could <code>imperil</code> people and robots as humans continue to explore the moon.</p>]]></summary>
    <content type="html"><![CDATA[<p>The constancy of the moon in the night sky <code>belies</code> a more <code>volatile</code> reality, researchers said in new Nasa-funded research. As the core of the Earth’s only natural satellite cools, the moon is shrinking, causing it to <code>shrivel</code>. That creates <code>ripples</code> tens of meters high, called <code>thrust</code> faults, across the moon’s surface. In turn, those thrust faults can be the site of hours-long moonquakes and landslides, which could <code>imperil</code> people and robots as humans continue to explore the moon.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>landslide 山崩</p>
<p>belie 掩饰</p>
<p>volatile 不稳定性的</p>
<p>shrivel 枯萎；干瘪</p>
<p>ripple 涟漪</p>
<p>thrust 冲刺；刺入</p>
<p>fault 这里是“断层”的意思</p>
<p>imperil 使处于危险（peril 危险）</p>
<p>perilous 濒危的</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-07T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Decades of research destroyed after freezer fails at Swedish university</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/02/2402081901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/02/2402081901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Karolinska Institutet (KI) in Stockholm, a <code>prominent</code> Swedish medical university home to the Nobel Assembly, faced a significant <code>setback</code> as research samples gathered over decades were destroyed due to a freezer <code>malfunction</code> during the Christmas holidays. Stored in <code>cryogenic</code> tanks cooled with liquid nitrogen at -190°C, the samples were <code>crucial</code> for various research <code>initiatives</code>. Between December 22 and 23, a malfunction occurred in the supply of liquid nitrogen to 16 cryogenic tanks, as reported by the Guardian.</p>]]></summary>
    <content type="html"><![CDATA[<p>Karolinska Institutet (KI) in Stockholm, a <code>prominent</code> Swedish medical university home to the Nobel Assembly, faced a significant <code>setback</code> as research samples gathered over decades were destroyed due to a freezer <code>malfunction</code> during the Christmas holidays. Stored in <code>cryogenic</code> tanks cooled with liquid nitrogen at -190°C, the samples were <code>crucial</code> for various research <code>initiatives</code>. Between December 22 and 23, a malfunction occurred in the supply of liquid nitrogen to 16 cryogenic tanks, as reported by the Guardian.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>setback 挫折</p>
<p>prominent 卓越的；显著的</p>
<p>malfunction 故障（mal- = bad，坏）</p>
<p>cryogenic 低温的（cryo- = cold，冷）</p>
<p>crucial 决定性的，至关重要的</p>
<p>initiative 主动行动，这里指各种研究项目、计划或倡议</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-02-08T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Palworld: Pokémon Company to investigate copying claims</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401291901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401291901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>The Pokémon Company says it plans to investigate <code>copycat</code> claims against online multiplayer <code>sensation</code> Palworld. Fans have been pointing out similarities after the new title exploded in popularity this week. In its first statement since, the Pokémon Company said it would take "appropriate action" if it found its copyright had been <code>breached</code>. The boss of Palworld maker Pocketpair has said the game passed legal checks before release. Palworld quickly earned the nickname "Pokémon with guns" when its first <code>trailer</code> was unveiled in 2021. Like the popular Nintendo franchise, it also centres around collecting dozens of strange <code>creatures</code> with different abilities.</p>]]></summary>
    <content type="html"><![CDATA[<p>The Pokémon Company says it plans to investigate <code>copycat</code> claims against online multiplayer <code>sensation</code> Palworld. Fans have been pointing out similarities after the new title exploded in popularity this week. In its first statement since, the Pokémon Company said it would take "appropriate action" if it found its copyright had been <code>breached</code>. The boss of Palworld maker Pocketpair has said the game passed legal checks before release. Palworld quickly earned the nickname "Pokémon with guns" when its first <code>trailer</code> was unveiled in 2021. Like the popular Nintendo franchise, it also centres around collecting dozens of strange <code>creatures</code> with different abilities.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>copycat 模仿者；抄袭者</p>
<p>sensation 感觉；感官</p>
<p>breach 违背；破坏（同break）</p>
<p>trailer 拖车；预告片</p>
<p>first trailer 首支预告片</p>
<p>creature 生物；动物</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-29T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Italy&amp;apos;s Jannik Sinner wins Australian Open with 5-set victory over Russia&amp;apos;s Daniil Medvedev</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401300601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401300601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Jannik Sinner lined up a <code>forehand</code>, drilled it down the line and dropped to the court on his back, giving himself some moments to process how he’d managed to come back from two sets down to win his first <code>Grand Slam</code> title. The 22-year-old Sinner found a way to turn defense into attack in his first major final and take the Australian Open title from Daniil Medvedev 3-6, 3-6, 6-4, 6-4, 6-3 on Sunday. “I like to dance in the pressure storm,” he said.</p>]]></summary>
    <content type="html"><![CDATA[<p>Jannik Sinner lined up a <code>forehand</code>, drilled it down the line and dropped to the court on his back, giving himself some moments to process how he’d managed to come back from two sets down to win his first <code>Grand Slam</code> title. The 22-year-old Sinner found a way to turn defense into attack in his first major final and take the Australian Open title from Daniil Medvedev 3-6, 3-6, 6-4, 6-4, 6-3 on Sunday. “I like to dance in the pressure storm,” he said.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>forehand 正打（网球）</p>
<p>set 盘（网球，排球）</p>
<p>Grand Slam 大满贯</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-29T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Icon of the Seas: World&amp;apos;s largest cruise ship sets sail from Miami</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401301901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401301901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>The world's largest <code>cruise</code> ship has set sail from Miami, Florida, on its <code>maiden</code> <code>voyage</code>, but there are concerns about the <code>vessel</code>'s <code>methane</code> <code>emissions</code>. The 365m-long Icon of the Seas has 20 decks and can house a maximum of 7,600 passengers. It is owned by Royal Caribbean Group. The vessel is going on a seven-day island-<code>hopping</code> voyage in the Caribbean. Environmentalists warn the <code>liquefied</code> natural gas (LNG)-powered ship will <code>leak</code> harmful methane into the air. Built at a shipyard in Turku, Finland, the Bahamas-registered ship has seven swimming pools and six water slides.</p>]]></summary>
    <content type="html"><![CDATA[<p>The world's largest <code>cruise</code> ship has set sail from Miami, Florida, on its <code>maiden</code> <code>voyage</code>, but there are concerns about the <code>vessel</code>'s <code>methane</code> <code>emissions</code>. The 365m-long Icon of the Seas has 20 decks and can house a maximum of 7,600 passengers. It is owned by Royal Caribbean Group. The vessel is going on a seven-day island-<code>hopping</code> voyage in the Caribbean. Environmentalists warn the <code>liquefied</code> natural gas (LNG)-powered ship will <code>leak</code> harmful methane into the air. Built at a shipyard in Turku, Finland, the Bahamas-registered ship has seven swimming pools and six water slides.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>set sail 起航</p>
<p>maiden 年轻未婚女士；初次的</p>
<p>voyage 航行（voy- = way，道路）</p>
<p>vessel 船</p>
<p>methane 甲烷</p>
<p>emission 排放；送出</p>
<p>hop 跳跃</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-30T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Elon Musk Says Neuralink Has Implanted Brain Chip in Human</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401310601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401310601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Elon Musk said that the first human received a Neuralink brain <code>implant</code>, a potential milestone in the development of “brain-computer interface” technology that could one day help those suffering from <code>debilitating</code> conditions such as <code>paralysis</code> to interact with their surroundings. Musk tweeted late Monday that the <code>patient</code> received the implant the <code>prior</code> day and is “recovering well,” suggesting that the surgery was completed successfully and that there were no serious technical problems. Musk didn’t disclose details about the patient. When Neuralink announced last September that it was <code>recruiting</code> a trial participant, it said it was looking for someone suffering from <code>quadriplegia</code>.</p>]]></summary>
    <content type="html"><![CDATA[<p>Elon Musk said that the first human received a Neuralink brain <code>implant</code>, a potential milestone in the development of “brain-computer interface” technology that could one day help those suffering from <code>debilitating</code> conditions such as <code>paralysis</code> to interact with their surroundings. Musk tweeted late Monday that the <code>patient</code> received the implant the <code>prior</code> day and is “recovering well,” suggesting that the surgery was completed successfully and that there were no serious technical problems. Musk didn’t disclose details about the patient. When Neuralink announced last September that it was <code>recruiting</code> a trial participant, it said it was looking for someone suffering from <code>quadriplegia</code>.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>implant 【医】植入；嵌入</p>
<p>debilitate 使人衰弱</p>
<p>paralysis 瘫痪；麻痹（paralyse 使麻痹；使瘫痪）</p>
<p>prior 更重要的；较早的；事先的</p>
<p>recurit 新兵；恢复；征募</p>
<p>quadriplegia 四肢瘫痪（quadri- 四；plegia = to strike 击打）</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-30T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Famous &amp;quot;male&amp;quot; giant panda He Ye turns out to be female</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401311901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401311901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Celebrity giant panda He Ye, who has been believed to be male since it was born in July 2020, is in fact female, according to a post from the Chengdu Research Base of Giant Panda Breeding on Wednesday. “When He Ye was just born, her gender <code>characteristics</code> <code>leaned</code> <code>toward</code> being male. A few months later, she showed more male-like characteristics such as high <code>urination</code>, lively personality, and tall stature, and these convinced everyone that He Ye was a boy,” a breeder surnamed Tan said in a video the base also posted.</p>]]></summary>
    <content type="html"><![CDATA[<p>Celebrity giant panda He Ye, who has been believed to be male since it was born in July 2020, is in fact female, according to a post from the Chengdu Research Base of Giant Panda Breeding on Wednesday. “When He Ye was just born, her gender <code>characteristics</code> <code>leaned</code> <code>toward</code> being male. A few months later, she showed more male-like characteristics such as high <code>urination</code>, lively personality, and tall stature, and these convinced everyone that He Ye was a boy,” a breeder surnamed Tan said in a video the base also posted.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>celetrity 名人；明星</p>
<p>characteristic 特性</p>
<p>lean 瘦的；贫瘠的；倾斜</p>
<p>lean toward 倾向</p>
<p>urination 撒尿</p>
<p>urinate 小便</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-31T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Tutu skirt takes centre stage in Paris as Chanel channels ballet trend</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401281901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401281901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Paris fashion has spoken: get ready for the year of the <code>tutu</code> skirt. Chanel has thrown its <code>might</code> behind 2024’s first breakout look, with <code>tulle</code> dancers’ skirts the stars of <code>the haute couture catwalk</code>. Days after the tutu worn by Sarah Jessica Parker in the title sequence of Sex and the City sold for $52,000 in Los Angeles – <code>outstripping</code> the estimate of $8,000-$12,000 expected by auction house Julien’s – Chanel has confirmed ballet as fashion’s new obsession.</p>]]></summary>
    <content type="html"><![CDATA[<p>Paris fashion has spoken: get ready for the year of the <code>tutu</code> skirt. Chanel has thrown its <code>might</code> behind 2024’s first breakout look, with <code>tulle</code> dancers’ skirts the stars of <code>the haute couture catwalk</code>. Days after the tutu worn by Sarah Jessica Parker in the title sequence of Sex and the City sold for $52,000 in Los Angeles – <code>outstripping</code> the estimate of $8,000-$12,000 expected by auction house Julien’s – Chanel has confirmed ballet as fashion’s new obsession.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>tutu 芭蕾舞裙</p>
<p>tulle 薄纱</p>
<p>might 力量；权利</p>
<p>the haute couture catwalk 高级定制T台时装</p>
<ul>
<li>"haute"：法语，意为高级</li>
<li>"couture"：法语，意为定制（通常指高级定制时装）</li>
<li>"catwalk"：步道，T型台，特指时装表演的舞台</li>
</ul>
<p>days after xxx 几天前xxx</p>
<p>the title sequence 片头序列</p>
<p>outstrip 追过；胜过（strip 脱衣舞；剥夺；长条）</p>
<p>obsession 困扰；痴迷</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-28T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Alabama executes a man with nitrogen gas, the first time the new method has been used</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401290601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401290601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Alabama executed a <code>convicted</code> murderer with <code>nitrogen</code> gas Thursday, putting him to death with a first-of-its-kind method that once again placed the U.S. at the forefront of the debate over capital punishment. The state said the method would be <code>humane</code>, but critics called it <code>cruel</code> and <code>experimental</code>. Officials said Kenneth Eugene Smith, 58, was <code>pronounced</code> dead at 8:25 p.m. at an Alabama prison after breathing pure nitrogen gas through a face mask to cause oxygen <code>deprivation</code>. It marked the first time that a new execution method has been used in the United States since <code>lethal</code> injection, now the most commonly used method, was introduced in 1982.</p>]]></summary>
    <content type="html"><![CDATA[<p>Alabama executed a <code>convicted</code> murderer with <code>nitrogen</code> gas Thursday, putting him to death with a first-of-its-kind method that once again placed the U.S. at the forefront of the debate over capital punishment. The state said the method would be <code>humane</code>, but critics called it <code>cruel</code> and <code>experimental</code>. Officials said Kenneth Eugene Smith, 58, was <code>pronounced</code> dead at 8:25 p.m. at an Alabama prison after breathing pure nitrogen gas through a face mask to cause oxygen <code>deprivation</code>. It marked the first time that a new execution method has been used in the United States since <code>lethal</code> injection, now the most commonly used method, was introduced in 1982.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>convict 罪犯；vt. 宣告有罪</p>
<p>nitrogen 氮气</p>
<p>oxygen 氧气</p>
<p>humane 有人情味的；人道的</p>
<p>cruel 残忍的（crud- crude 粗糙的；天然的）</p>
<p>experimental 实验的</p>
<p>pronounce 宣告；发音（pronunciation 发音）</p>
<p>deprivation 剥夺；免职</p>
<p>deprive 剥夺</p>
<p>lethal 致命的</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-28T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Every year spent in school or university improves life expectancy, study says</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401270601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401270601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Every year spent in school or university improves our life <code>expectancy</code>, while not attending school is as deadly as smoking or heavy drinking, according to the first systematic study directly linking education to gains in <code>longevity</code>. Using evidence from industrialised countries such as the UK and US as well as developing countries such as China and Brazil, the review found that an adult’s risk of <code>mortality</code> went down by 2% for every year in full-time education. Completing primary, secondary and <code>tertiary</code> education is the equivalent of a lifetime of eating a healthy diet, lowering the risk of death by 34% compared with those with no <code>formal</code> education, according to the peer-reviewed analysis in The Lancet Public Health journal.</p>]]></summary>
    <content type="html"><![CDATA[<p>Every year spent in school or university improves our life <code>expectancy</code>, while not attending school is as deadly as smoking or heavy drinking, according to the first systematic study directly linking education to gains in <code>longevity</code>. Using evidence from industrialised countries such as the UK and US as well as developing countries such as China and Brazil, the review found that an adult’s risk of <code>mortality</code> went down by 2% for every year in full-time education. Completing primary, secondary and <code>tertiary</code> education is the equivalent of a lifetime of eating a healthy diet, lowering the risk of death by 34% compared with those with no <code>formal</code> education, according to the peer-reviewed analysis in The Lancet Public Health journal.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>not attending school 不去上学</p>
<p>life expectancy 预期寿命</p>
<p>directly linking education to gains in longevity 直接把教育和长寿联系起来</p>
<p>longevity 长命；长寿；寿命</p>
<p>gain 除了获取的意思，还有增加的意思</p>
<p>mortality 死亡</p>
<p>tertiary 第三的；高等（教育）</p>
<p>tertiary eduction = at university or college level</p>
<p>formal 正式的</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-26T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Dog with six legs has operation to remove extra limbs</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401271901.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401271901.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>Ariel, the six-legged dog found <code>dumped</code> in a supermarket car park, has had <code>surgery</code> to remove her extra <code>limbs</code>. The 11-week-old spaniel hit the headlines after being abandoned outside a Pembrokeshire branch of B&amp;M in September. About £15,000 was raised by well-wishers all over the world, enabling her to have a life-changing operation. Surgeon Aaron Lutchman managed to save all four of her working limbs after fears one might have to be <code>amputated</code>. "She's doing really well, she's <code>bounced</code> back and she's a happy little dog and we're hoping she's going to go on to lead a <code>fabulous</code> little life," said Mr Lutchman.</p>]]></summary>
    <content type="html"><![CDATA[<p>Ariel, the six-legged dog found <code>dumped</code> in a supermarket car park, has had <code>surgery</code> to remove her extra <code>limbs</code>. The 11-week-old spaniel hit the headlines after being abandoned outside a Pembrokeshire branch of B&amp;M in September. About £15,000 was raised by well-wishers all over the world, enabling her to have a life-changing operation. Surgeon Aaron Lutchman managed to save all four of her working limbs after fears one might have to be <code>amputated</code>. "She's doing really well, she's <code>bounced</code> back and she's a happy little dog and we're hoping she's going to go on to lead a <code>fabulous</code> little life," said Mr Lutchman.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>hit the headlines 上头条</p>
<p>dump 丢弃；倾倒</p>
<p>limb 肢体</p>
<p>branch 分支；支流；分店；分部</p>
<p>amputate 切断；截肢</p>
<p>bounce 弹跳</p>
<p>bounce back 恢复过来</p>
<p>fabulous 难以置信的；传说的</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-27T11:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">World’s first IVF rhino pregnancy &amp;quot;could save northern white species&amp;quot;</title>
    <id>https://blog.ruizhou.cf/english/everyday/2024/01/2401280601.html</id>
    <link href="https://blog.ruizhou.cf/english/everyday/2024/01/2401280601.html"/>
    <updated>2024-02-28T11:01:59.000Z</updated>
    <summary type="html"><![CDATA[<p>The world’s first <code>pregnancy</code> in a <code>rhinoceros</code> through IVF could save the most endangered species on the planet, scientists hope. Northern white rhinos are functionally <code>extinct</code>, with just two females remaining after the last male died in 2018. Now in a major breakthrough an international group of scientists and <code>conservationists</code> has successfully transferred an embryo into a southern white rhino surrogate. Although the mother named Curra died within a few months of <code>conception</code> it marks a proof of concept which opens the door to transferring northern white rhino embryos.</p>]]></summary>
    <content type="html"><![CDATA[<p>The world’s first <code>pregnancy</code> in a <code>rhinoceros</code> through IVF could save the most endangered species on the planet, scientists hope. Northern white rhinos are functionally <code>extinct</code>, with just two females remaining after the last male died in 2018. Now in a major breakthrough an international group of scientists and <code>conservationists</code> has successfully transferred an embryo into a southern white rhino surrogate. Although the mother named Curra died within a few months of <code>conception</code> it marks a proof of concept which opens the door to transferring northern white rhino embryos.</p>
<div class="hint-container tip">
<p class="hint-container-title">tips</p>
<p>pregnant 怀孕的</p>
<p>pregnancy 怀孕</p>
<p>rhinoceros 犀牛</p>
<p>rhino 犀牛；现金💰</p>
<p>extinct 灭绝</p>
<p>conservationist 保护主义者</p>
<p>conception 概念；还有受孕的意思</p>
<p>conception 强调的是受精过程的开始阶段，而 pregnancy 则是涵盖了整个怀孕过程，从受精卵着床到分娩</p>
</div>
]]></content>
    <category term="英文"/>
    <published>2024-01-27T22:01:00.000Z</published>
  </entry>
  <entry>
    <title type="text">ruizhou 介绍</title>
    <id>https://blog.ruizhou.cf/about/me.html</id>
    <link href="https://blog.ruizhou.cf/about/me.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>ruizhou 介绍</h2>
<figure><img src="/2233.png" alt="ruizhou" tabindex="0" loading="lazy"><figcaption>ruizhou</figcaption></figure>
<h2>基本信息</h2>
<ul>
<li>blog</li>
<li>英文学校</li>
<li>技术学习</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h2>ruizhou 介绍</h2>
<figure><img src="/2233.png" alt="ruizhou" tabindex="0" loading="lazy"><figcaption>ruizhou</figcaption></figure>
<h2>基本信息</h2>
<ul>
<li>blog</li>
<li>英文学校</li>
<li>技术学习</li>
</ul>
]]></content>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">英文学习</title>
    <id>https://blog.ruizhou.cf/english/</id>
    <link href="https://blog.ruizhou.cf/english/"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<p>英文学习日记</p>
<h2>语法</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>常用语法，属于技巧类型</p>
</div>
<ul>
<li><a href="/english/grammar.html" target="_blank">语法</a></li>
</ul>
<h2>词汇</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>词汇时英文学习的基础，需要下功夫</p>
</div>]]></summary>
    <content type="html"><![CDATA[<p>英文学习日记</p>
<h2>语法</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>常用语法，属于技巧类型</p>
</div>
<ul>
<li><a href="/english/grammar.html" target="_blank">语法</a></li>
</ul>
<h2>词汇</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>词汇时英文学习的基础，需要下功夫</p>
</div>
<ul>
<li><a href="/english/vocabulary/high-frequency-vocabulary.html" target="_blank">高频词汇</a></li>
<li><a href="/english/vocabulary/root.html" target="_blank">词根词缀</a></li>
</ul>
<h2>每日英语</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>每天阅读日常期刊英文读物，是非常必要的，可以验证和复习所学所得</p>
</div>
<ul>
<li><a href="/english/everyday/" target="_blank">点击前往</a></li>
</ul>
]]></content>
    <category term="英文"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">语法</title>
    <id>https://blog.ruizhou.cf/english/grammar.html</id>
    <link href="https://blog.ruizhou.cf/english/grammar.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>简单语法</h2>
<p>这是简单的几种语法</p>
]]></summary>
    <content type="html"><![CDATA[<h2>简单语法</h2>
<p>这是简单的几种语法</p>
]]></content>
    <category term="英文"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">AI</title>
    <id>https://blog.ruizhou.cf/ai/</id>
    <link href="https://blog.ruizhou.cf/ai/"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<p>AI 领域</p>
<h2>Stable Diffusion</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p><strong>Stable Diffusion</strong> is a <a href="https://en.wikipedia.org/wiki/Deep_learning" target="_blank" rel="noopener noreferrer">deep learning</a>, <a href="https://en.wikipedia.org/wiki/Text-to-image_model" target="_blank" rel="noopener noreferrer">text-to-image model</a> released in 2022. It is primarily used to generate detailed images conditioned on text descriptions, though it can also be applied to other tasks such as <a href="https://en.wikipedia.org/wiki/Inpainting" target="_blank" rel="noopener noreferrer">inpainting</a>, outpainting, and generating image-to-image translations guided by a <a href="https://en.wikipedia.org/wiki/Prompt_engineering" target="_blank" rel="noopener noreferrer">text prompt</a>.<a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-:0-3" target="_blank" rel="noopener noreferrer">3</a> It was developed by the start-up Stability AI in collaboration with a number of academic researchers and non-profit organizations.<a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-stable-diffusion-launch-4" target="_blank" rel="noopener noreferrer">4</a></p>
<p>Stable Diffusion is a <a href="https://en.wikipedia.org/wiki/Latent_variable_model" target="_blank" rel="noopener noreferrer">latent</a> <a href="https://en.wikipedia.org/wiki/Diffusion_model" target="_blank" rel="noopener noreferrer">diffusion model</a>, a kind of deep generative <a href="https://en.wikipedia.org/wiki/Neural_network" target="_blank" rel="noopener noreferrer">neural network</a>. Its code and model weights have been released <a href="https://en.wikipedia.org/wiki/Source-available_software" target="_blank" rel="noopener noreferrer">publicly</a>,<a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-stable-diffusion-github-5" target="_blank" rel="noopener noreferrer">5</a> and it can run on most consumer hardware equipped with a modest <a href="https://en.wikipedia.org/wiki/Graphics_processing_unit" target="_blank" rel="noopener noreferrer">GPU</a> with at least 8 GB <a href="https://en.wikipedia.org/wiki/Video_random_access_memory" target="_blank" rel="noopener noreferrer">VRAM</a>. This marked a departure from previous proprietary text-to-image models such as <a href="https://en.wikipedia.org/wiki/DALL-E" target="_blank" rel="noopener noreferrer">DALL-E</a> and <a href="https://en.wikipedia.org/wiki/Midjourney" target="_blank" rel="noopener noreferrer">Midjourney</a> which were accessible only via <a href="https://en.wikipedia.org/wiki/Cloud_service" target="_blank" rel="noopener noreferrer">cloud services</a>.<a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-pcworld-6" target="_blank" rel="noopener noreferrer">6</a><a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-verge-7" target="_blank" rel="noopener noreferrer">7</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<p>AI 领域</p>
<h2>Stable Diffusion</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p><strong>Stable Diffusion</strong> is a <a href="https://en.wikipedia.org/wiki/Deep_learning" target="_blank" rel="noopener noreferrer">deep learning</a>, <a href="https://en.wikipedia.org/wiki/Text-to-image_model" target="_blank" rel="noopener noreferrer">text-to-image model</a> released in 2022. It is primarily used to generate detailed images conditioned on text descriptions, though it can also be applied to other tasks such as <a href="https://en.wikipedia.org/wiki/Inpainting" target="_blank" rel="noopener noreferrer">inpainting</a>, outpainting, and generating image-to-image translations guided by a <a href="https://en.wikipedia.org/wiki/Prompt_engineering" target="_blank" rel="noopener noreferrer">text prompt</a>.<a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-:0-3" target="_blank" rel="noopener noreferrer">3</a> It was developed by the start-up Stability AI in collaboration with a number of academic researchers and non-profit organizations.<a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-stable-diffusion-launch-4" target="_blank" rel="noopener noreferrer">4</a></p>
<p>Stable Diffusion is a <a href="https://en.wikipedia.org/wiki/Latent_variable_model" target="_blank" rel="noopener noreferrer">latent</a> <a href="https://en.wikipedia.org/wiki/Diffusion_model" target="_blank" rel="noopener noreferrer">diffusion model</a>, a kind of deep generative <a href="https://en.wikipedia.org/wiki/Neural_network" target="_blank" rel="noopener noreferrer">neural network</a>. Its code and model weights have been released <a href="https://en.wikipedia.org/wiki/Source-available_software" target="_blank" rel="noopener noreferrer">publicly</a>,<a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-stable-diffusion-github-5" target="_blank" rel="noopener noreferrer">5</a> and it can run on most consumer hardware equipped with a modest <a href="https://en.wikipedia.org/wiki/Graphics_processing_unit" target="_blank" rel="noopener noreferrer">GPU</a> with at least 8 GB <a href="https://en.wikipedia.org/wiki/Video_random_access_memory" target="_blank" rel="noopener noreferrer">VRAM</a>. This marked a departure from previous proprietary text-to-image models such as <a href="https://en.wikipedia.org/wiki/DALL-E" target="_blank" rel="noopener noreferrer">DALL-E</a> and <a href="https://en.wikipedia.org/wiki/Midjourney" target="_blank" rel="noopener noreferrer">Midjourney</a> which were accessible only via <a href="https://en.wikipedia.org/wiki/Cloud_service" target="_blank" rel="noopener noreferrer">cloud services</a>.<a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-pcworld-6" target="_blank" rel="noopener noreferrer">6</a><a href="https://en.wikipedia.org/wiki/Stable_Diffusion#cite_note-verge-7" target="_blank" rel="noopener noreferrer">7</a></p>
</div>
<ul>
<li><a href="/ai/stable-diffusion/base.html" target="_blank">基础</a></li>
<li><a href="/ai/stable-diffusion/doc.html" target="_blank">文档</a></li>
</ul>
]]></content>
    <category term="ai"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">代码笔记</title>
    <id>https://blog.ruizhou.cf/code/</id>
    <link href="https://blog.ruizhou.cf/code/"/>
    <updated>2024-07-24T03:08:09.000Z</updated>
    <summary type="html"><![CDATA[<p>此处是 Mr.Hope 存放的一些代码笔记。</p>
]]></summary>
    <content type="html"><![CDATA[<p>此处是 Mr.Hope 存放的一些代码笔记。</p>
<!-- more -->
<h2>目录</h2>
<h3>基础</h3>
<ul>
<li>
<p><a href="/code/basic/" target="_blank">基础知识</a></p>
</li>
<li>
<p><a href="/code/windows/" target="_blank">Windows 基础</a></p>
</li>
<li>
<p><a href="/code/github/" target="_blank">GitHub 介绍</a></p>
</li>
</ul>
<h3>前端开发</h3>
<ul>
<li>
<p><a href="/code/website/" target="_blank">网站相关</a></p>
</li>
<li>
<p><a href="/code/vue/" target="_blank">Vue 相关</a></p>
</li>
<li>
<p><a href="/code/mini-app/" target="_blank">小程序教程</a></p>
</li>
<li>
<p><a href="/code/node-js/" target="_blank">Node.js</a></p>
</li>
</ul>
<h3>代码学习</h3>
<ul>
<li>
<p><a href="/code/language/" target="_blank">代码学习</a></p>
</li>
<li>
<p><a href="/code/language/learning.html" target="_blank">如何学习一门语言</a></p>
</li>
<li>
<p><a href="/code/language/js/" target="_blank">JavaScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/typescript/" target="_blank">TypeScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/python/" target="_blank">Python 教程</a> (编写中...)</p>
</li>
<li>
<p><a href="/code/language/markdown/" target="_blank">Markdown 教程</a></p>
</li>
<li>
<p><a href="/code/language/yaml/" target="_blank">YAML 教程</a></p>
</li>
<li>
<p><a href="/code/language/json/" target="_blank">JSON 教程</a></p>
</li>
</ul>
<h3>APP</h3>
<ul>
<li><a href="/code/android/" target="_blank">Android 开发</a></li>
</ul>
<h3>后端开发</h3>
<ul>
<li><a href="/code/back-end/" target="_blank">后端开发</a></li>
</ul>
<h3>代码学习网站</h3>
<h3>优质网站</h3>
<ul>
<li>
<p><a href="https://wangdoc.com/" target="_blank" rel="noopener noreferrer">网道</a></p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener noreferrer">廖雪峰的网站</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener noreferrer">MDN</a></p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>MDN 的中文文档翻译很差，大多都是机翻，十分建议直接阅读英文文档。</p>
</div>
</li>
</ul>
<h3>杂牌网站</h3>
<ul>
<li>
<p><a href="https://www.runoob.com/" target="_blank" rel="noopener noreferrer">菜鸟教程</a> </p>
</li>
<li>
<p><a href="https://www.w3cschool.cn" target="_blank" rel="noopener noreferrer">w3cschool</a> </p>
</li>
<li>
<p><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener noreferrer">w3school</a> </p>
</li>
</ul>
]]></content>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">硬件</title>
    <id>https://blog.ruizhou.cf/computer/</id>
    <link href="https://blog.ruizhou.cf/computer/"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">显卡</title>
    <id>https://blog.ruizhou.cf/computer/graphics-card.html</id>
    <link href="https://blog.ruizhou.cf/computer/graphics-card.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<p>nvidia 有八大合作厂商：微星，华硕，技嘉，七彩虹，影驰，耕升，蓝宝石，铭瑄</p>
<table>
<thead>
<tr>
<th>品牌/定位</th>
<th>信仰</th>
<th>旗舰</th>
<th>次旗舰</th>
<th>高端</th>
<th>低端</th>
<th>丐中丐</th>
</tr>
</thead>
<tbody>
<tr>
<td>微星</td>
<td>闪电</td>
<td>超龙</td>
<td>魔龙 3X</td>
<td>魔龙 2X</td>
<td>万图师</td>
<td>-</td>
</tr>
<tr>
<td>技嘉</td>
<td>水雕</td>
<td>大雕</td>
<td>小雕/超级雕</td>
<td>雪鹰/魔鹰</td>
<td>猎鹰</td>
<td>-</td>
</tr>
<tr>
<td>华硕</td>
<td>骇客</td>
<td>ROG 猛禽</td>
<td>猛禽</td>
<td>TUF 电竞特工</td>
<td>巨齿鲨</td>
<td>-</td>
</tr>
<tr>
<td>七彩虹</td>
<td>九段</td>
<td>火神 X OC</td>
<td>水神</td>
<td>AD OC /ultra</td>
<td>战斧</td>
<td>网驰</td>
</tr>
<tr>
<td>影弛</td>
<td>HOF 名人堂限量版</td>
<td>HOF 名人堂</td>
<td>-</td>
<td>星耀</td>
<td>积木/大将</td>
<td>将系列</td>
</tr>
<tr>
<td>索泰</td>
<td>极光</td>
<td>PGF</td>
<td>AMP</td>
<td>天启</td>
<td>GAMING</td>
<td>毁灭者</td>
</tr>
<tr>
<td>耕升</td>
<td>-</td>
<td>炫光</td>
<td>-</td>
<td>星极</td>
<td>-</td>
<td>追风</td>
</tr>
<tr>
<td>铭瑄</td>
<td>-</td>
<td>MGG(new)</td>
<td>电竞</td>
<td>终结者</td>
<td>巨无霸</td>
<td>-</td>
</tr>
<tr>
<td>映众</td>
<td>-</td>
<td>冰龙寒霜</td>
<td>超级冰龙</td>
<td>黑金</td>
<td>电竞至尊</td>
<td>-</td>
</tr>
<tr>
<td>蓝宝石(A 卡)</td>
<td>毒药</td>
<td>超白金</td>
<td>白金</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<p>nvidia 有八大合作厂商：微星，华硕，技嘉，七彩虹，影驰，耕升，蓝宝石，铭瑄</p>
<p>| 品牌/定位    | 信仰             | 旗舰       | 次旗舰      | 高端         | 低端      | 丐中丐 |
|</p>
]]></content>
    <category term="硬件"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">水冷</title>
    <id>https://blog.ruizhou.cf/computer/liquid-cooler.html</id>
    <link href="https://blog.ruizhou.cf/computer/liquid-cooler.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>非 360 水冷</h2>
<p>压住游戏，但是超频就压不住</p>
<p>利民 FC140</p>
<p>猫头鹰 D15（非常大）</p>
<h2>360 水冷</h2>
<h3>经济</h3>
<p>利民冰封幻境 360</p>
<h3>风扇好点，质保时间长点，静音效果好些</h3>
<p>瓦尔基里 GL360</p>
<p>利民冰封雅境 360</p>
<h3>升级</h3>
<p>利民冰封聚境 360</p>
<p>瓦尔基里 E360（小屏幕）</p>
<p>雅浚 GA5</p>
<h3>高端</h3>
<p>恩杰 X73</p>
<p>恩杰 Z73</p>
<p>ROG 飞龙二代 360</p>]]></summary>
    <content type="html"><![CDATA[<h2>非 360 水冷</h2>
<p>压住游戏，但是超频就压不住</p>
<p>利民 FC140</p>
<p>猫头鹰 D15（非常大）</p>
<h2>360 水冷</h2>
<h3>经济</h3>
<p>利民冰封幻境 360</p>
<h3>风扇好点，质保时间长点，静音效果好些</h3>
<p>瓦尔基里 GL360</p>
<p>利民冰封雅境 360</p>
<h3>升级</h3>
<p>利民冰封聚境 360</p>
<p>瓦尔基里 E360（小屏幕）</p>
<p>雅浚 GA5</p>
<h3>高端</h3>
<p>恩杰 X73</p>
<p>恩杰 Z73</p>
<p>ROG 飞龙二代 360</p>
<p>ROG 龙神二代 360</p>
<h3>旗舰</h3>
<p>ROG 龙王三代 360（新技术）</p>
]]></content>
    <category term="硬件"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">内存</title>
    <id>https://blog.ruizhou.cf/computer/memory.html</id>
    <link href="https://blog.ruizhou.cf/computer/memory.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>D4</h2>
<h3>经济</h3>
<p><strong>时序，颗粒一般，不能超频</strong></p>
<p>海盗船 复仇者</p>
<p>威刚 XPG</p>
<p>金士顿 野兽</p>
<h3>RGP</h3>
<p>芝奇幻光戟</p>
<p>芝奇皇家戟</p>
<p>科赋雷霆 BOLT</p>
<p>影驰星耀</p>
<p>威刚龙耀 D50</p>
<p>海盗船 PRO 灯条</p>
<p>金百达（新）</p>
<h3>旗舰</h3>
<p>影驰名人堂 HOF EXTREME</p>
<p>宏基掠夺者 Vesta 炫光星舰</p>
<h2>D5</h2>
<p>一定要选择 5600MHz 以上的</p>]]></summary>
    <content type="html"><![CDATA[<h2>D4</h2>
<h3>经济</h3>
<p><strong>时序，颗粒一般，不能超频</strong></p>
<p>海盗船 复仇者</p>
<p>威刚 XPG</p>
<p>金士顿 野兽</p>
<h3>RGP</h3>
<p>芝奇幻光戟</p>
<p>芝奇皇家戟</p>
<p>科赋雷霆 BOLT</p>
<p>影驰星耀</p>
<p>威刚龙耀 D50</p>
<p>海盗船 PRO 灯条</p>
<p>金百达（新）</p>
<h3>旗舰</h3>
<p>影驰名人堂 HOF EXTREME</p>
<p>宏基掠夺者 Vesta 炫光星舰</p>
<h2>D5</h2>
<p>一定要选择 5600MHz 以上的</p>
<p>5200 一般都是镁光的颗粒，5600-6000 很多是三星 b-die 颗粒，再往上海力士颗粒</p>
<p>芝奇幻锋戟（包含全部，5600，6000，7000，8000；C30 6000 以下的都是三星 b-die 颗粒，以上是海力士 A-die 颗粒）</p>
<p>海盗船 铂金统治者</p>
<p>威刚 XPG（性价比，没有特挑颗粒）</p>
<p>宏基掠夺者 Vesta2 炫光星舰</p>
<p>金百达</p>
]]></content>
    <category term="硬件"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">主板</title>
    <id>https://blog.ruizhou.cf/computer/motherboard.html</id>
    <link href="https://blog.ruizhou.cf/computer/motherboard.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>经济型</h2>
<p>华硕 TUF GAMING B760M-PLUS</p>
<p>微星 MAG B760M MORTAR 迫击炮</p>
<p>华硕 760-G 小吹雪</p>
<h2>Z690</h2>
<p>华硕 Z690-P</p>
<p>微星 Z690-A</p>
<h2>2000 档位</h2>
<p>华硕 Z690 吹雪</p>
<p>华硕 TUF Z690-PLUS</p>
<p>微星 MPG Z690 刀锋 TI</p>
<h2>790</h2>
<p>内存支持比 690 更加优秀</p>
<h3>入门级</h3>
<p>华硕 PRIME Z790-P</p>
<p>微星 PRO Z790-P</p>]]></summary>
    <content type="html"><![CDATA[<h2>经济型</h2>
<p>华硕 TUF GAMING B760M-PLUS</p>
<p>微星 MAG B760M MORTAR 迫击炮</p>
<p>华硕 760-G 小吹雪</p>
<h2>Z690</h2>
<p>华硕 Z690-P</p>
<p>微星 Z690-A</p>
<h2>2000 档位</h2>
<p>华硕 Z690 吹雪</p>
<p>华硕 TUF Z690-PLUS</p>
<p>微星 MPG Z690 刀锋 TI</p>
<h2>790</h2>
<p>内存支持比 690 更加优秀</p>
<h3>入门级</h3>
<p>华硕 PRIME Z790-P</p>
<p>微星 PRO Z790-P</p>
<p>小主机：华硕 PRIME Z790M-PLUS</p>
<h3>高级</h3>
<p>微星 MPG Z790 EDGE 刀锋</p>
<p>华硕 TUF GAMING Z790-PLUS</p>
<p>ROG STRIX Z790-A GAMING 吹雪</p>
<h2>纯 D5 高端主板</h2>
<p>ROG STRIX Z790-E GAMING</p>
<p>ROG STRIX Z790-F GAMING</p>
<p>微星 MPG Z790 CARBON 暗黑</p>
<h2>旗舰</h2>
<h3>纯血 ROG</h3>
<p>ROG MAXIMUS Z790 HERO</p>
<p>ROG MAXIMUS Z790 APEX</p>
<p>ROG MAXIMUS Z790 EXTREME</p>
]]></content>
    <category term="硬件"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">电源</title>
    <id>https://blog.ruizhou.cf/computer/power.html</id>
    <link href="https://blog.ruizhou.cf/computer/power.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>一线大牌</h2>
<p>上千打底</p>
<p>海韵 挣华 华硕 海盗船（下坡路，买 MX 系列） 台达</p>
<h3>次点</h3>
<p>长城（噪音略大）</p>
<p>航嘉</p>
<h2>高端</h2>
<p>微星（乔威代工）</p>
<p>威刚（乔威代工）</p>
<p>追风者（号称海韵代工）</p>
<p>安钛克（号称海韵代工）</p>
<h2>一般</h2>
<p>全汉（出过批次问题，跌下神坛）</p>
<h2>往下</h2>
<p>酷冷至尊 SFX 系列</p>
<p>九州风神</p>
<h2>便宜</h2>
<p>骨伽</p>
<p>艾湃电竞</p>
<p>TT</p>]]></summary>
    <content type="html"><![CDATA[<h2>一线大牌</h2>
<p>上千打底</p>
<p>海韵 挣华 华硕 海盗船（下坡路，买 MX 系列） 台达</p>
<h3>次点</h3>
<p>长城（噪音略大）</p>
<p>航嘉</p>
<h2>高端</h2>
<p>微星（乔威代工）</p>
<p>威刚（乔威代工）</p>
<p>追风者（号称海韵代工）</p>
<p>安钛克（号称海韵代工）</p>
<h2>一般</h2>
<p>全汉（出过批次问题，跌下神坛）</p>
<h2>往下</h2>
<p>酷冷至尊 SFX 系列</p>
<p>九州风神</p>
<h2>便宜</h2>
<p>骨伽</p>
<p>艾湃电竞</p>
<p>TT</p>
<p>金河田（主打低端）</p>
]]></content>
    <category term="硬件"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">硬盘</title>
    <id>https://blog.ruizhou.cf/computer/ssd.html</id>
    <link href="https://blog.ruizhou.cf/computer/ssd.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>经济</h2>
<p>威刚 GAMMIX S11 PCIE3</p>
<p>影驰星耀 X4 无缓存 PCIE4</p>
<p>金士顿 NV2 无缓存 PCIE4</p>
<h2>主流</h2>
<p>三星 PM9A1 PCIE4</p>
<p>西数 WD SN770 无缓存 PCIE4</p>
<p>金士顿 KC3000 无缓存 PCIE4</p>
<p>影驰 HOF PRO PCIE4</p>
<h2>旗舰</h2>
<p>980PRO</p>
<p>西数 WD SN850</p>
<p>影驰名人堂 HOF EXTREME</p>
<p>宏基 GM7000</p>
<h2>天花板</h2>]]></summary>
    <content type="html"><![CDATA[<h2>经济</h2>
<p>威刚 GAMMIX S11 PCIE3</p>
<p>影驰星耀 X4 无缓存 PCIE4</p>
<p>金士顿 NV2 无缓存 PCIE4</p>
<h2>主流</h2>
<p>三星 PM9A1 PCIE4</p>
<p>西数 WD SN770 无缓存 PCIE4</p>
<p>金士顿 KC3000 无缓存 PCIE4</p>
<p>影驰 HOF PRO PCIE4</p>
<h2>旗舰</h2>
<p>980PRO</p>
<p>西数 WD SN850</p>
<p>影驰名人堂 HOF EXTREME</p>
<p>宏基 GM7000</p>
<h2>天花板</h2>
<p>三星 990 PRO</p>
]]></content>
    <category term="硬件"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Linux</title>
    <id>https://blog.ruizhou.cf/linux/</id>
    <link href="https://blog.ruizhou.cf/linux/"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>Linux 教程</h2>
<ul>
<li>
<p><a href="/linux/intro/" target="_blank">Linux 介绍</a></p>
<ul>
<li>
<p><a href="/linux/intro/intro.html" target="_blank">Linux 介绍</a></p>
</li>
<li>
<p><a href="/linux/intro/history.html" target="_blank">Linux 历史</a></p>
</li>
<li>
<p><a href="/linux/intro/language.html" target="_blank">Linux 编写语言</a></p>
</li>
<li>
<p><a href="/linux/intro/advantage.html" target="_blank">Linux 优势</a></p>
</li>
<li>
<p><a href="/linux/intro/desktop.html" target="_blank">Linux 桌面环境</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/linux/file/" target="_blank">Linux 文件</a></p>
<ul>
<li>
<p><a href="/linux/file/file.html" target="_blank">Linux 文件</a></p>
</li>
<li>
<p><a href="/linux/file/dir.html" target="_blank">Linux 目录</a></p>
</li>
<li>
<p><a href="/linux/file/mount.html" target="_blank">挂载</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/linux/command/" target="_blank">Linux 命令</a></p>
<ul>
<li>
<p><a href="/linux/command/command.html" target="_blank">命令格式简介</a></p>
</li>
<li>
<p><a href="/linux/command/dir.html" target="_blank">目录相关</a></p>
</li>
<li>
<p><a href="/linux/command/file.html" target="_blank">文件相关</a></p>
</li>
<li>
<p><a href="/linux/command/other.html" target="_blank">其他命令</a></p>
</li>
<li>
<p><a href="/linux/command/add.html" target="_blank">命令的自动补全</a></p>
</li>
<li>
<p><a href="/linux/command/excu.html" target="_blank">命令的执行</a></p>
</li>
<li>
<p><a href="/linux/command/path.html" target="_blank">环境变量</a></p>
</li>
<li>
<p><a href="/linux/command/ln.html" target="_blank">创建链接</a></p>
</li>
</ul>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>Linux 教程</h2>
<ul>
<li>
<p><a href="/linux/intro/" target="_blank">Linux 介绍</a></p>
<ul>
<li>
<p><a href="/linux/intro/intro.html" target="_blank">Linux 介绍</a></p>
</li>
<li>
<p><a href="/linux/intro/history.html" target="_blank">Linux 历史</a></p>
</li>
<li>
<p><a href="/linux/intro/language.html" target="_blank">Linux 编写语言</a></p>
</li>
<li>
<p><a href="/linux/intro/advantage.html" target="_blank">Linux 优势</a></p>
</li>
<li>
<p><a href="/linux/intro/desktop.html" target="_blank">Linux 桌面环境</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/linux/file/" target="_blank">Linux 文件</a></p>
<ul>
<li>
<p><a href="/linux/file/file.html" target="_blank">Linux 文件</a></p>
</li>
<li>
<p><a href="/linux/file/dir.html" target="_blank">Linux 目录</a></p>
</li>
<li>
<p><a href="/linux/file/mount.html" target="_blank">挂载</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/linux/command/" target="_blank">Linux 命令</a></p>
<ul>
<li>
<p><a href="/linux/command/command.html" target="_blank">命令格式简介</a></p>
</li>
<li>
<p><a href="/linux/command/dir.html" target="_blank">目录相关</a></p>
</li>
<li>
<p><a href="/linux/command/file.html" target="_blank">文件相关</a></p>
</li>
<li>
<p><a href="/linux/command/other.html" target="_blank">其他命令</a></p>
</li>
<li>
<p><a href="/linux/command/add.html" target="_blank">命令的自动补全</a></p>
</li>
<li>
<p><a href="/linux/command/excu.html" target="_blank">命令的执行</a></p>
</li>
<li>
<p><a href="/linux/command/path.html" target="_blank">环境变量</a></p>
</li>
<li>
<p><a href="/linux/command/ln.html" target="_blank">创建链接</a></p>
</li>
</ul>
</li>
</ul>
<h2>ubuntu</h2>
<ul>
<li><a href="/linux/ubuntu/" target="_blank">点击前往</a></li>
</ul>
<h2>CentOS</h2>
<ul>
<li><a href="/linux/centos.html" target="_blank">点击前往</a></li>
</ul>
<h2>WSL</h2>
<ul>
<li><a href="/linux/WSL.html" target="_blank">点击前往</a></li>
</ul>
]]></content>
    <category term="Linux"/>
    <published>2019-11-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">WSL</title>
    <id>https://blog.ruizhou.cf/linux/WSL.html</id>
    <link href="https://blog.ruizhou.cf/linux/WSL.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>WSL 可以直接在 Windows 系统上安装并运行 Linux。目前最新的版本是 WSL2。</p>
]]></summary>
    <content type="html"><![CDATA[<p>WSL 可以直接在 Windows 系统上安装并运行 Linux。目前最新的版本是 WSL2。</p>
<!-- more -->
<h2>Ubuntu</h2>
<p>Windows 上的功能有很大缺失。已知不能用 Snap。</p>
<h2>WSL 文件位置</h2>
<div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">C:\Users\%USERNAME%\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2>重启 WSL</h2>
<p>使用</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> stop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> LxssManager</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>和</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">net</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> LxssManager</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content>
    <category term="Linux"/>
    <published>2019-11-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">CentOS 教程</title>
    <id>https://blog.ruizhou.cf/linux/centos.html</id>
    <link href="https://blog.ruizhou.cf/linux/centos.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>管理工具</h2>
<ul>
<li>yum (Centos 7)</li>
<li>dnf (Centos 8)</li>
</ul>
<h2>yarn</h2>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --silent</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://dl.yarnpkg.com/rpm/yarn.repo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tee</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /etc/yum.repos.d/yarn.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yarn</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">## OR ##</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dnf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yarn</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h2>管理工具</h2>
<ul>
<li>yum (Centos 7)</li>
<li>dnf (Centos 8)</li>
</ul>
<h2>yarn</h2>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --silent</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://dl.yarnpkg.com/rpm/yarn.repo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> tee</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /etc/yum.repos.d/yarn.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yarn</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">## OR ##</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> dnf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> yarn</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试是否安装成功:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">yarn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --version</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content>
    <category term="Linux"/>
    <published>2019-11-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">ssh</title>
    <id>https://blog.ruizhou.cf/linux/ssh.html</id>
    <link href="https://blog.ruizhou.cf/linux/ssh.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>使用密码登录</h2>
<ol>
<li>
<p>执行以下命令，连接 Linux 云服务器。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ssh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">usernam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">@</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">hostname</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addres</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>username 即为前提条件中获得的默认帐号。</li>
<li>hostname or IP address 为您的 Linux 实例公网 IP 或自定义域名。</li>
</ul>
</li>
<li>
<p>输入已获取的密码，按 Enter，即可完成登录。</p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>使用密码登录</h2>
<ol>
<li>
<p>执行以下命令，连接 Linux 云服务器。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ssh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">usernam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">@</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">hostname</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addres</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>username 即为前提条件中获得的默认帐号。</li>
<li>hostname or IP address 为您的 Linux 实例公网 IP 或自定义域名。</li>
</ul>
</li>
<li>
<p>输入已获取的密码，按 Enter，即可完成登录。</p>
</li>
</ol>
<h2>使用密钥登录</h2>
<ol>
<li>
<p>执行以下命令，赋予私钥文件仅本人可读权限。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">chmod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 400</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">下载的与云服务器关联的私钥的绝对路</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">径&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
<li>
<p>执行以下命令，进行远程登录。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">下载的与云服务器关联的私钥的绝对路</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">径&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">usernam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">@</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">hostname</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> addres</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>username 即为前提条件中获得的默认帐号。</li>
<li>hostname or IP address 为您的 Linux 实例公网 IP 或自定义域名。</li>
</ul>
<p>例如，执行 <code>ssh -i "id_rsa" ubuntu@123.206.113.227</code> 命令，远程登录 Linux 云服务器。</p>
</li>
</ol>
<h2>断开链接</h2>
<p><code>Ctrl + D</code> 或 输入 <code>logout</code>.</p>
]]></content>
    <category term="基础"/>
    <published>2019-11-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">软件教程</title>
    <id>https://blog.ruizhou.cf/software/</id>
    <link href="https://blog.ruizhou.cf/software/"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>代码编辑器</h2>
<ul>
<li><a href="/software/editor.html" target="_blank">编辑器介绍</a></li>
</ul>
<h2>团队协作</h2>
<p>开发项目的代码版本管理以及多人协作使用 Git 软件</p>
<ul>
<li>
<p><a href="/software/git/" target="_blank">Git 教程</a></p>
</li>
<li>
<p><a href="/code/github/" target="_blank">GitHub 介绍</a></p>
</li>
</ul>
<h2>浏览器</h2>]]></summary>
    <content type="html"><![CDATA[<h2>代码编辑器</h2>
<ul>
<li><a href="/software/editor.html" target="_blank">编辑器介绍</a></li>
</ul>
<h2>团队协作</h2>
<p>开发项目的代码版本管理以及多人协作使用 Git 软件</p>
<ul>
<li>
<p><a href="/software/git/" target="_blank">Git 教程</a></p>
</li>
<li>
<p><a href="/code/github/" target="_blank">GitHub 介绍</a></p>
</li>
</ul>
<h2>浏览器</h2>
<p>在开发中，调试网页推荐使用 Chrome。</p>
<ul>
<li><a href="/software/chrome.html" target="_blank">Chrome 介绍</a></li>
</ul>
<h2>后端</h2>
<h3>Http Server</h3>
<p>网站已经停止使用 Apache Lounge 编译的 httpd Apache。目前迁移到更加轻量，并发性能更好的 Nginx 上。</p>
<ul>
<li>
<p><a href="/software/apache.html" target="_blank">Apache</a> </p>
</li>
<li>
<p><a href="/software/nginx.html" target="_blank">Nginx</a></p>
</li>
</ul>
<h3>抓包与 API 调试</h3>
<ul>
<li><a href="/software/postman.html" target="_blank">Postman</a></li>
</ul>
<h2>工具软件</h2>
<ul>
<li><a href="/software/tool/" target="_blank">查看详情</a></li>
</ul>
<h2>手机 APP</h2>
<h3>soloLearn</h3>
<p>一个代码在线学习社区，只有英文版。由于代码语义贴近英文原生逻辑，十分建议在编辑代码时 “think in English”。</p>
<p>软件中的 code playground 可以在线运行大部分代码，大家在手机上就可以进行练习与尝试。</p>
<h2>Adobe 软件</h2>
<p>Adobe 全系软件的获取，请见 <a href="https://www.weibo.com/vposy" target="_blank" rel="noopener noreferrer">VPosy 的微博</a> 的置顶帖。</p>
]]></content>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Apache</title>
    <id>https://blog.ruizhou.cf/software/apache.html</id>
    <link href="https://blog.ruizhou.cf/software/apache.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>Apache 是世界使用排名第一的 Web 服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的 Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩充，将 Perl/Python 等解释器编译到服务器中。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Apache 是世界使用排名第一的 Web 服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的 Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩充，将 Perl/Python 等解释器编译到服务器中。</p>
<!-- more -->
<h2>Apache 是什么</h2>
<p>Apache HTTP Server (简称 Apache )是 Apache 软件基金会的一个开放源码的网页服务器，可以在大多数计算机操作系统中运行，由于其多平台和安全性被广泛使用，是最流行的 Web 服务器端软件之一。它快速、可靠并且可通过简单的 API 扩展，将 Perl/Python 等解释器编译到服务器中。</p>
<p>Apache HTTP 服务器是一个模块化的服务器，源于 NCSAhttpd 服务器，经过多次修改，成为世界使用排名第一的 Web 服务器软件。
它可以运行在几乎所有广泛使用的计算机平台上。</p>
<h2>Apache 模块</h2>
<p>Apache 通过引入各种模块来完成不同的功能。</p>
<h2>Apache 官方文档</h2>
<ul>
<li><a href="https://httpd.apache.org/docs/2.4/zh-cn/" target="_blank" rel="noopener noreferrer">文档地址</a></li>
</ul>
<h2>Apache 配置</h2>
<p>Apache 通过 conf 文件夹下的 httpd.conf 来配置。</p>
<div class="language-apacheconf line-numbers-mode" data-highlighter="shiki" data-ext="apacheconf" data-title="apacheconf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 此处填入 Apache 的路径</span></span>
<span class="line"><span>Define SRVROOT "U:/Apache"</span></span>
<span class="line"><span>ServerRoot "${SRVROOT}"</span></span>
<span class="line"><span>Listen 127.0.0.1:80</span></span>
<span class="line"><span>Listen 127.0.0.1:443</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LoadModule auth_basic_module modules/mod_auth_basic.so</span></span>
<span class="line"><span>LoadModule authz_core_module modules/mod_authz_core.so</span></span>
<span class="line"><span>LoadModule deflate_module modules/mod_deflate.so</span></span>
<span class="line"><span>LoadModule dir_module modules/mod_dir.so</span></span>
<span class="line"><span>LoadModule env_module modules/mod_env.so</span></span>
<span class="line"><span>LoadModule isapi_module modules/mod_isapi.so</span></span>
<span class="line"><span>LoadModule log_config_module modules/mod_log_config.so</span></span>
<span class="line"><span>LoadModule mime_module modules/mod_mime.so</span></span>
<span class="line"><span>LoadModule negotiation_module modules/mod_negotiation.so</span></span>
<span class="line"><span>LoadModule proxy_http2_module modules/mod_proxy_http2.so</span></span>
<span class="line"><span>LoadModule ratelimit_module modules/mod_ratelimit.so</span></span>
<span class="line"><span>LoadModule rewrite_module modules/mod_rewrite.so</span></span>
<span class="line"><span>LoadModule setenvif_module modules/mod_setenvif.so</span></span>
<span class="line"><span>LoadModule ssl_module modules/mod_ssl.so</span></span>
<span class="line"><span># 此处填入 PHP 的 ssh 组件路径</span></span>
<span class="line"><span>LoadFile "u:/php/libssh2.dll"</span></span>
<span class="line"><span># 此处填入 PHP 的 Apache 组件路径</span></span>
<span class="line"><span>LoadModule php7_module "u:/PHP/php7apache2_4.dll"</span></span>
<span class="line"><span># 此处填入 PHP 的路径</span></span>
<span class="line"><span>PHPIniDir "u:/PHP"</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;IfModule unixd_module&gt;</span></span>
<span class="line"><span>User daemon</span></span>
<span class="line"><span>Group daemon</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ServerAdmin mister-hope@outlook.com</span></span>
<span class="line"><span>ServerName localhost</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;Directory /&gt;</span></span>
<span class="line"><span>  AllowOverride none</span></span>
<span class="line"><span>  Require all denied</span></span>
<span class="line"><span>&lt;/Directory&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DocumentRoot "${SRVROOT}/htdocs"</span></span>
<span class="line"><span>&lt;Directory "${SRVROOT}/htdocs"&gt;</span></span>
<span class="line"><span>  Options FollowSymLinks</span></span>
<span class="line"><span>  AllowOverride All</span></span>
<span class="line"><span>  Require all granted</span></span>
<span class="line"><span>&lt;/Directory&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;IfModule dir_module&gt;</span></span>
<span class="line"><span>  DirectoryIndex index.html index.php</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;Files ".ht*"&gt;</span></span>
<span class="line"><span>  Require all denied</span></span>
<span class="line"><span>&lt;/Files&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ErrorLog "logs/error.log"</span></span>
<span class="line"><span>LogLevel info</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;IfModule log_config_module&gt;</span></span>
<span class="line"><span>  LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined</span></span>
<span class="line"><span>  LogFormat "%h %l %u %t \"%r\" %&gt;s %b" common</span></span>
<span class="line"><span>  &lt;IfModule logio_module&gt;</span></span>
<span class="line"><span>    LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio</span></span>
<span class="line"><span>  &lt;/IfModule&gt;</span></span>
<span class="line"><span>  CustomLog "logs/access.log" common</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;IfModule alias_module&gt;</span></span>
<span class="line"><span>  ScriptAlias /cgi-bin/ "${SRVROOT}/cgi-bin/"</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;Directory "${SRVROOT}/cgi-bin"&gt;</span></span>
<span class="line"><span>  AllowOverride None</span></span>
<span class="line"><span>  Options None</span></span>
<span class="line"><span>  Require all granted</span></span>
<span class="line"><span>&lt;/Directory&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;IfModule headers_module&gt;</span></span>
<span class="line"><span>  RequestHeader unset Proxy early</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;IfModule mime_module&gt;</span></span>
<span class="line"><span>  TypesConfig conf/mime.types</span></span>
<span class="line"><span>  AddHandler application/x-httpd-php .php</span></span>
<span class="line"><span>  AddType application/x-compress .Z</span></span>
<span class="line"><span>  AddType application/x-gzip .gz .tgz</span></span>
<span class="line"><span>  AddType application/x-httpd-php .php .html</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;IfModule proxy_html_module&gt;</span></span>
<span class="line"><span>  Include conf/extra/proxy-html.conf</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span>
<span class="line"><span>&lt;IfModule ssl_module&gt;</span></span>
<span class="line"><span>  SSLRandomSeed startup builtin</span></span>
<span class="line"><span>  SSLRandomSeed connect builtin</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;VirtualHost *:80&gt;</span></span>
<span class="line"><span>  ServerAdmin mister-hope@outlook.com</span></span>
<span class="line"><span>  ServerName nenu.com</span></span>
<span class="line"><span>  ServerAlias innenu</span></span>
<span class="line"><span>  DocumentRoot "${SRVROOT}/htdocs"</span></span>
<span class="line"><span>&lt;/VirtualHost&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;VirtualHost *:443&gt;</span></span>
<span class="line"><span>  ServerAdmin mister-hope@outlook.com</span></span>
<span class="line"><span>  ServerName mrhope.com</span></span>
<span class="line"><span>  ServerAlias mrhope</span></span>
<span class="line"><span>  DocumentRoot "${SRVROOT}/htdocs"</span></span>
<span class="line"><span>&lt;/VirtualHost&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<h3>ServerRoot</h3>
<p>指定服务器的根目录</p>
</li>
<li>
<h3>Listen</h3>
<p>指定服务器监听的 IP 与 port</p>
</li>
<li>
<h3>LoadModule</h3>
<p>加载指定的模块来使服务器调用</p>
</li>
<li>
<h3>PHPIniDir</h3>
<p>指定 PHP 目录</p>
</li>
<li>
<h3>unixd_module</h3>
<p>分配用户权限</p>
</li>
<li>
<h3>ServerAdmin</h3>
<p>服务器管理员</p>
</li>
<li>
<h3>ServerName</h3>
<p>服务器名称</p>
</li>
</ul>
]]></content>
    <category term="服务器"/>
    <published>2019-12-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Chrome</title>
    <id>https://blog.ruizhou.cf/software/chrome.html</id>
    <link href="https://blog.ruizhou.cf/software/chrome.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>Chrome 是谷歌出品的浏览器。其内核使用 Chromium，基于 JavaScript V8，是全球比例最大的浏览器内核。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Chrome 是谷歌出品的浏览器。其内核使用 Chromium，基于 JavaScript V8，是全球比例最大的浏览器内核。</p>
<!-- more -->
<h2>简介</h2>
<p>Chrome 如今可以说是一家独大。很多国内浏览器都是基于 Chromium 内核的套壳浏览器。</p>
<p>Chrome 内核更新频繁，速度和安全性高，对新特性支持非常良好。另外谷歌具有十分强大的开发者工具，是前端开发使用的首选浏览器。目前最新的版本是 85。</p>
<h2>配置</h2>
<p>由于 Chrome 是谷歌出品的浏览器，所以搜索栏默认使用 Google 搜索，而在中国无法访问 Google 服务，所以需要在右上角的菜单中选择设置，在搜索引擎设置中改为百度即可正常使用。</p>
<figure><figcaption>更改页面</figcaption></figure>
<h2>快捷键</h2>
<p>Chrome 具有很多快捷键，熟练掌握后可以大幅减少时间。</p>
<ul>
<li><code>Ctrl + J</code>: 打开下载页面；</li>
<li><code>Ctrl + H</code>: 打开历史页面；</li>
<li><code>Ctrl + T</code>: 打开新标签页；</li>
<li><code>Ctrl + Shift + T</code>: 恢复上一个关闭的标签页；</li>
<li><code>Ctrl + N</code>: 打开新的窗口；</li>
<li><code>Ctrl + W</code>: 关闭当前标签页；</li>
<li><code>Ctrl + Tab</code>: 切换标签页；</li>
<li><code>Ctrl + Shift + Tab</code>: 反向切换标签页；</li>
<li><code>Ctrl + F</code>: 反向切换标签页；</li>
<li><code>Ctrl + Shift + I</code> 或 <code>F12</code>: 打开开发者工具；</li>
</ul>
<h2>开发者工具</h2>
<figure><figcaption>开发者工具</figcaption></figure>
<p>使用 <code>Ctrl + Shift + I</code> 或 <code>F12</code> 即可打开开发者工具，在开发者工具里，您可以自由的对任何网页进行调试。</p>
<h2>Chrome 推荐扩展</h2>
<ul>
<li>AdGuard: 广告屏蔽；</li>
<li>Adobe Acrobat: 将当前网页转为 Adobe PDF 文件；</li>
<li>Betternet Unlimited Free VPN Proxy: 免费的 VPN 代理；</li>
<li>Checker Plus for Gmail™: Gmail 邮件管理；</li>
<li>Convertio: 非常强大的文件在线转换；</li>
<li>Dark Reader: 为网页启用夜间模式；</li>
<li>Enhanced GitHub: 能够展示仓库大小，文件大小和快速下载按钮；</li>
<li>Evernote Web Clipper: 印象笔记剪藏，非常好用的保存工具；</li>
<li>Google 翻译: 谷歌翻译软件；</li>
<li>ImTranslator: 翻译，字典，声音</li>
<li>Infinity: 一款非常好的标签页软件；</li>
<li>Office Online: 在线查看并编辑 Office 文件；</li>
<li>React Developer Tools: React 开发者工具</li>
<li>Save to Pocket: 离线网页的最佳插件；</li>
<li>Vue.js Devtools: Vue.js 的开发者工具；</li>
</ul>
]]></content>
    <category term="软件"/>
    <published>2019-12-13T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">代码编辑器</title>
    <id>https://blog.ruizhou.cf/software/editor.html</id>
    <link href="https://blog.ruizhou.cf/software/editor.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<ul>
<li>
<p><a href="/software/vscode/" target="_blank">VS Code</a></p>
<p>VS Code 的全称是 Visual Studio Code，是一款开源的、免费的、跨平台的、高性能的、轻量级的代码编辑器。它在性能、语言支持、开源社区方面，都做的很不错。</p>
<p>VS Code 具有最大的编辑器社区，插件是所有编辑器里最全的。可以通过安装扩展实现几乎所有的功能，但扩展设置界面对新手不够友好，适合有一定经验的开发者。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>推荐使用轻量的 Visual Studio Code。</p>
</div>
</li>
<li>
<p>其他代码编辑器</p>
<p>在不同领域的开发者可能会偏向不同种类的开发工具。下面列举其他常见的代码编辑器。</p>
<ul>
<li>WebStorm 是专业的 web 开发工具，提供格式化、代码补全等选项。</li>
<li>PhpStorm 是专业的 php 开发工具，提供格式化、代码补全等选项。</li>
<li><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener noreferrer">notepad++</a></li>
<li><a href="https://atom.io/" target="_blank" rel="noopener noreferrer">atom</a></li>
<li><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener noreferrer">sublime text</a></li>
</ul>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<ul>
<li>
<p><a href="/software/vscode/" target="_blank">VS Code</a></p>
<p>VS Code 的全称是 Visual Studio Code，是一款开源的、免费的、跨平台的、高性能的、轻量级的代码编辑器。它在性能、语言支持、开源社区方面，都做的很不错。</p>
<p>VS Code 具有最大的编辑器社区，插件是所有编辑器里最全的。可以通过安装扩展实现几乎所有的功能，但扩展设置界面对新手不够友好，适合有一定经验的开发者。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>推荐使用轻量的 Visual Studio Code。</p>
</div>
</li>
<li>
<p>其他代码编辑器</p>
<p>在不同领域的开发者可能会偏向不同种类的开发工具。下面列举其他常见的代码编辑器。</p>
<ul>
<li>WebStorm 是专业的 web 开发工具，提供格式化、代码补全等选项。</li>
<li>PhpStorm 是专业的 php 开发工具，提供格式化、代码补全等选项。</li>
<li><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener noreferrer">notepad++</a></li>
<li><a href="https://atom.io/" target="_blank" rel="noopener noreferrer">atom</a></li>
<li><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener noreferrer">sublime text</a></li>
</ul>
</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">IDE 与编辑器</p>
<p>IDE 和编辑器是有区别的:</p>
<ul>
<li>
<p>IDE: 对代码会有较好的智能提示，同时侧重于工程项目，对项目的开发、调试工作有较好的图像化界面的支持，因此比较笨重。比如 Eclipse 的定位就是 IDE。</p>
</li>
<li>
<p>编辑器: 要相对轻量许多，侧重于文本的编辑。比如 Sublime Text 的定位就是编辑器。再比如 Windows 系统自带的「记事本」就是最简单的编辑器。</p>
</li>
</ul>
<p>需要注意的是，VS Code 的定位是编辑器，而非 IDE。但 VS Code 又比一般的编辑器的功能要丰富许多。</p>
</div>
]]></content>
    <category term="软件"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Nginx</title>
    <id>https://blog.ruizhou.cf/software/nginx.html</id>
    <link href="https://blog.ruizhou.cf/software/nginx.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP / POP3 / SMTP 代理服务器。其特点是占有内存少，并发能力强，稳定性高，并且 Nginx 也拥有友好灵活的配置。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP / POP3 / SMTP 代理服务器。其特点是占有内存少，并发能力强，稳定性高，并且 Nginx 也拥有友好灵活的配置。</p>
<!-- more -->
<h2>启动，停止和重新加载配置</h2>
<p>要启动 nginx，请运行可执行文件。一旦启动 nginx，就可以通过使用 <code>-s</code> 参数调用可执行文件来对其进行控制。使用以下语法:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> signal</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>其中 <code>signal</code> 可能是以下之一:</p>
<ul>
<li>stop - 快速关机</li>
<li>quit — 正常关机</li>
<li>reload — 重新加载配置文件</li>
<li>reopen — 重新打开日志文件</li>
</ul>
<h2>配置文件的结构</h2>
<p>Nginx 由受配置文件中指定的指令控制的模块组成。指令分为简单指令和块指令。一个简单的指令由名称和参数组成，这些名称和参数之间用空格分隔，并以分号(<code>;</code>)结尾。块指令的结构与简单指令的结构相同，但是它不以分号结尾，而是带有一组用括号 (<code>{</code> 和 <code>}</code>) 括起来的附加指令。如果一个块指令在括号内可以有其他指令，则称为 context (例如: <code>events</code>, <code>http</code>, <code>server</code> 和 <code>location</code>)。</p>
<p>放置在任何 context 外部的配置文件中的指令都被视为在 main context 中。<code>events</code> 和 <code>http</code> 指令位于 <code>main</code> context 中，<code>server</code> 位于 <code>http</code> 中, 并且 <code>location</code> 在 <code>server</code> 中</p>
<p><code>#</code> 号后的其余行被视为注释。</p>
<h2>提供静态内容</h2>
<p>Web 服务器的一项重要任务是分发文件(例如图像或静态 HTML 页面)。您将实现一个示例，其中将根据请求从不同的本地目录提供文件: <code>/data/www</code> (可能包含 HTML 文件)和 <code>/data/images</code>(包含图像)。这将需要编辑配置文件，并在带有两个位置块的 http 块内设置服务器块。</p>
<p>首先，创建 <code>/data/www</code> 目录，并将包含任何文本内容的 <code>index.html</code> 文件放入其中，并创建 <code>/data/images</code> 目录并将一些图像放入其中。</p>
<p>接下来，打开配置文件。默认配置文件已经包含了服务器块的几个示例，大部分已被注释掉。现在，注释掉所有这些块并启动一个新的服务器块:</p>
<div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，配置文件可以包括几个服务器块，这些服务器块通过它们侦听的端口和服务器名称来区分。一旦 nginx 决定了哪个服务器处理请求，它就会根据服务器块内定义的 location 指令的参数测试请求标头中指定的 URI。</p>
<p>将以下位置块添加到服务器块:</p>
<div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/data/www;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与请求中的 URI 相比，此位置块指定 “<code>/</code>” 前缀。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 <code>/data/www</code>，以形成本地文件系统上所请求文件的路径。如果有多个匹配的位置块，nginx 将选择前缀最长的位置块。上面的位置块提供了最短的前缀，长度为 1，因此，只有在所有其他位置块均未提供匹配项时，才会使用该块。</p>
<p>接下来，添加第二个位置块:</p>
<div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /images/ {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将匹配以 <code>/images/</code> 开头的请求(位置 <code>/</code> 也匹配此类请求，但前缀较短)。</p>
<p>服务器块的最终配置应如下所示:</p>
<div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/data/www;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /images/ {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这已经是服务器的工作配置，可以在标准端口 <code>80</code> 上侦听，并且可以在本地计算机上的 <code>http://localhost/</code> 上访问。响应以 <code>/images/</code> 开头的 URI 请求，服务器将从 <code>/data/images</code> 目录中发送文件。例如，为响应 <code>http://localhost/images/example.png</code> 请求，nginx 将发送文件 <code>/data/images/example.png</code>。如果该文件不存在，nginx 将发送一个注明 404 错误的响应。URI 不以 <code>/images/</code> 开头的请求将被映射到 <code>/data/www</code> 目录。例如，nginx 会响应 <code>http://localhost/some/example.html</code> 请求发送 <code>/data/www/some/example.html</code> 文件。</p>
<p>要应用新配置，请启动 nginx (如果尚未启动)，或通过执行以下命令向 nginx 的主进程发送 <code>reload</code> 信号:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> reload</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>如果某些东西无法按预期工作，则可以尝试在目录 <code>/usr/local/nginx/logs</code> 或目录 <code>/var/log/nginx</code> 中的 access.log 和 error.log 文件中找出原因。。</p>
<h2>设置简单的代理服务器</h2>
<p>Nginx 的一种常用用法是将其设置为代理服务器，这意味着服务器可以接收请求，将请求传递给代理服务器，从请求中检索响应并将它们发送给客户端。</p>
<p>我们将配置一个基本的代理服务器，该服务器为图像请求和本地目录中的文件提供服务，并将所有其他请求发送到代理服务器。在此示例中，两个服务器都将在单个 nginx 实例上定义。</p>
<p>首先，通过向 nginx 的配置文件中添加另一个 <code>server</code> 块来定义代理服务器，其内容如下:</p>
<div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  listen </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/data/up1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> / {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将是一个简单的服务器，它在端口 8080 上侦听 (以前，自从使用标准端口 80 以来，未指定 listen 指令) 并将所有请求映射到本地文件系统的 <code>/data/up1</code> 目录中。创建此目录，并将 <code>index.html</code> 文件放入其中。请注意，根指令位于服务器上下文中。当选择用于服务请求的位置块不包括自己的根指令时，将使用这种根指令。</p>
<p>接下来，使用上一部分中的服务器配置并对其进行修改以使其成为代理服务器配置。在第一个位置块中，将 <code>proxy_pass</code> 指令与参数中指定的代理服务器的协议，名称和端口放在一起 (在本例中为 <code>http://localhost:8080</code> ):</p>
<div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">http://localhost:8080;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /images/ {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将修改第二个 location 块，该位置块当前将带有 <code>/images/</code> 前缀的请求映射到 <code>/data/images</code> 目录下的文件，以使其与具有典型文件扩展名的图像的请求相匹配。修改后的位置块如下所示:</p>
<div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ~ </span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">\.(gif|jpg|png)$ </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/data/images;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该参数是一个正则表达式，它匹配以 <code>.gif</code>，<code>.jpg</code> 或 <code>.png</code> 结尾的所有 URI。正则表达式应以 <code>~</code> 开头。相应的请求将被映射到 <code>/ data/images</code> 目录。</p>
<p>当 nginx 选择一个 <code>location</code> 块来服务请求时，它首先检查指定前缀的 <code>location</code> 指令，记住带有最长前缀的 <code>location</code>，然后检查正则表达式。如果存在与正则表达式匹配的内容，nginx 会选择该 “<code>location</code>”，否则，它将选择之前记住的位置。</p>
<p>代理服务器的最终配置如下所示:</p>
<div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">http://localhost:8080/;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ~ </span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">\.(gif|jpg|png)$ </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/data/images;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该服务器将过滤以 <code>.gif</code>，<code>.jpg</code> 或 <code>.png</code> 结尾的请求，并将它们映射到目录 <code>/data/images</code>(通过将 URI 添加到根指令的参数)，并将所有其他请求传递给上面配置的代理服务器。</p>
<p>要应用新配置，请按照前面几节的说明将重载信号发送到 nginx。</p>
<p>还有许多其他指令可用于进一步配置代理连接。</p>
<h2>设置 FastCGI 代理</h2>
<p>Nginx 可用于将请求路由到 FastCGI 服务器，该服务器运行使用各种框架和编程语言 (例如 PHP) 构建的应用程序。</p>
<p>与 FastCGI 服务器一起使用的最基本的 Nginx 配置包括使用 <code>fastcgi_pass</code> 指令而不是 <code>proxy_pass</code> 指令和 <code>fastcgi_param</code> 指令来设置传递给 FastCGI 服务器的参数。假设 FastCGI 服务器可以在 <code>localhost:9000</code> 上访问。以上一节中的代理配置为基础，用 <code>fastcgi_pass</code> 指令替换 <code>proxy_pass</code> 指令，并将参数更改为 <code>localhost:9000</code>。在 PHP 中， <code>SCRIPT_FILENAME</code> 参数用于确定脚本名称，而 <code>QUERY_STRING</code> 参数用于传递请求参数。配置的结果为:</p>
<div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    fastcgi_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> localhost:9000;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    fastcgi_param </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">SCRIPT_FILENAME $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">document_root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fastcgi_script_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    fastcgi_param </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">QUERY_STRING    $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">query_string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ~ </span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75">\.(gif|jpg|png)$ </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/data/images;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将设置一个服务器，该服务器将通过 FastCGI 协议将除静态图像请求以外的所有请求路由到运行在 <code>localhost:9000</code> 上的代理服务器。</p>
<h2>官方文档</h2>
<ul>
<li><a href="https://docs.nginx.com/nginx/admin-guide/" target="_blank" rel="noopener noreferrer">点击此处</a></li>
</ul>
]]></content>
    <category term="服务器"/>
    <published>2019-12-13T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Postman</title>
    <id>https://blog.ruizhou.cf/software/postman.html</id>
    <link href="https://blog.ruizhou.cf/software/postman.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[
<p>Postman 是一个强大的抓包与网络调试工具。</p>
]]></summary>
    <content type="html"><![CDATA[
<p>Postman 是一个强大的抓包与网络调试工具。</p>
]]></content>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">技术</title>
    <id>https://blog.ruizhou.cf/tech/</id>
    <link href="https://blog.ruizhou.cf/tech/"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li><a href="/tech/go/" target="_blank">golang</a></li>
<li><a href="/tech/yaml/" target="_blank">yaml</a></li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li><a href="/tech/go/" target="_blank">golang</a></li>
<li><a href="/tech/yaml/" target="_blank">yaml</a></li>
</ul>
]]></content>
    <category term="技术"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">每日英文</title>
    <id>https://blog.ruizhou.cf/english/everyday/</id>
    <link href="https://blog.ruizhou.cf/english/everyday/"/>
    <updated>2024-07-24T05:19:03.000Z</updated>
    <summary type="html"><![CDATA[<!-- markdownlint-disable MD033 -->
<div class="catalog-display-container">
  </div>
<!-- markdownlint-enable MD033 -->
]]></summary>
    <content type="html"><![CDATA[<!-- markdownlint-disable MD033 -->
<div class="catalog-display-container">
  </div>
<!-- markdownlint-enable MD033 -->
]]></content>
    <category term="英文"/>
    <published>2023-03-07T11:29:00.000Z</published>
  </entry>
  <entry>
    <title type="text"></title>
    <id>https://blog.ruizhou.cf/english/news/chaos.html</id>
    <link href="https://blog.ruizhou.cf/english/news/chaos.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>Transcript</h2>
<p>[Rob] Good afternoon, everyone. How you doing? (audience members whoop) That's what I like to hear. It is my honor to welcome you to NFX 303, better known as, The Evolution of Chaos Engineering at Netflix. My name is Rob Hilton, and I'm a Principal Solutions Architect supporting Netflix as a customer.And basically what that means is, I've spent roughly the last four years of my life learning from, and collaborating with all of Netflix's best and brightest engineers, including my friend right over here to my right, Ales Plsek, who's gonna tell you a little bit more about resilience. Netflix is well known as being an innovator in a wide array of different tech spaces.One of the arguably most compelling of those is their contributions to application resilience. Now, that's a huge and widely varying topic, but one of the magic words in that space that's been coined by Netflix, and one of the ones that brings us all together today, is that magic word, chaos. But technology spaces evolve constantly.As Ales knows, one year is roughly 10 years in tech speak. So given the fact that chaos engineering was coined by Netflix over a decade ago, one wonders how they've continued to evolve in that space today. And with that, give it up for Ales, so we can all find out. (audience applauds) - Hi, thank you. Thank you for joining us for The Evolution of Chaos Engineering at Netflix.My name is Ales Plsek. I'm a Senior Software Engineer at Netflix. I'm part of the Resilience Team, and I lead our chaos engineering efforts in this space. And today, I will hopefully be your favorite historian, because we'll be talking for the next hour about history, and evolution of chaos engineering.And there is a lot to talk about. Chaos engineering has been alive for more than a decade. In software engineering years, that's more than 100. So let's get into it, we have a century to cover. First, I would like to talk about the history of chaos engineering at Netflix. We'll talk about some of the turning points and technologies that we've built over the years, and that will hopefully illustrate how our thinking about this discipline has evolved over these years.And then, I would like to show you how the chaos experimentation looks like at Netflix today. And finally, we'll talk about how chaos engineering has grown beyond the scope of its original goal, and how it transformed many phases of our software development lifecycle. And how it impacts the lives of not only SREs or chaos engineers, or resilience engineers, but any software engineer at our company.And it would not be a Netflix presentation without screenshots of some of my colleague software engineers who are hard at work. So let's start with this brief history of chaos. So your Netflix experience, as you may probably know, is largely composed of two large technologies. One, is the cloud, made out of these little instances, and then there's the Open Connect CDNs that we own.And those are running and storing all the video bits that are served to your device when you click play. Once you click play, we call it a stream start. That stream start, we keep number of those, and that we call SPS, Stream Start Per Second. That is the key metric that we monitor. Here is a beautiful vintage graph from our Atlas monitoring system showing how SPS is changing day by day.And focusing on the cloud itself, that one is made of these little tiny instances, and as we all know, they can be quite finicky. They can come and go as they want, they can be impacted by failures, and it's just something that we need to learn to accept. That's kind of this cycle of life, or something like that.And so, when Netflix moved its services into the cloud, there was a need to make sure that the streaming experience is not impacted by these little instances going down or failing. And that's why, originally, we have built Chaos Monkey. Chaos Monkey was used to test the resilience of our streaming infrastructure towards the failures of individual nodes.And the tool would randomly pick a couple of instances in the data center, and would start shutting them down on a pretty fine schedule. And early on in this chaos journey, it was a very simple, yet very effective approach. It helped our services to build in that resiliency towards the nodes failing down. And although it's a very crude tool, it has become a synonym of chaos engineering for many years.In chaos engineering terminology, we can categorize the treatment that Chaos Monkey is serving as a failure. And we say that, that failure is scope to an individual instance. And as you will see, we'll be using this terminology throughout this talk. Today, Chaos Monkey is still used at Netflix, but the value it provides is minimal.The services have simply moved on. They are resilient toward failures of individual nodes. And so we don't really see much benefit of running Chaos Monkey today in the data center. The use of that tool has declined, but it's also because our backend architecture is a lot more complex than just a set of instances.Speaking of which, here can see a visualization of our cloud architecture. (audience members chuckle) And for those of you taking notes, I will pause this for a minute. And here's another, kind of a bird's view of that same diagram. But if we really simplified it, what we have here is, our members and their devices on the right side talking to our Netflix cloud data center, sending the request to our Netflix cloud data center.These requests are entering the cloud through the edge gateway. And then they start propagating through these layers of microservices or applications, or services as we call them, and here represented as individual graphs, individual nodes of that graph. So taking this architecture into account, we wanted to be more resilient than just at the level of individual nodes.Moreover, in 2014, Netflix experienced an outage, a service responsible for managing the subscriber information was experiencing some internal errors. And although this service is very important for the business, for the company, because it's managing the subscriber or it's managing the signup of the new users.It's managing whenever you want to create or modify a profile. It's not really critical for the streaming experience. It's not really demanding that their service needs to be up, because you as a authenticated device, you should still be able to stream your favorite TV show. Yet during this outage, our members were not able to stream their favorite shows.And what happened was that the service was in trouble, and was correctly serving the fallbacks. But the colors of these fallbacks, the colors of the service were not able to process these fallbacks correct correctly. Because this outage never happened before, there was never any time to kind of test that the fallbacks are being properly processed in the layers above this service.And so the streaming architecture was not really resilient towards these failures of an uncritical service, and that's why we had a failure. So we realized that we needed to simulate these kind of scenarios, and we needed to be able to inject failures into the services themselves. And that is why we built FIT.FIT is our Failure Injection Technology. And it allows us to achieve that precision of failure injection. So for any given service in our infrastructure, FIT allows us to define injection points. And those are the points where we will be able to inject these failures. We support many different types of injection points.We have, for example, injection points for the IPC libraries. That's when you when talk through gRPC or REST, or GraphQL. To honor the service, we are able to inject failures either on a server side or client side of the communication. We have database library injection points where you can inject failures into the call that is trying to retrieve a certain data point from your Cassandra key space, and so on.We have injection points for caches or Kafka, S3 buckets and so on. Also, FIT allows us to define the treatment that we wanna inject in that injection point. The treatment will be set by that injection point, and it can be of many different types. Right now we are recognizing the failure. We can either serve the failure delay or both.Both meaning that for that request impacted into the injection point, we would first delay the request, and then we would fail it as well. And then there's the scope. The scope is used to define which injection point's gonna get triggered. So far we have seen scoping to instances, and now we are also able to scope to clusters.And then a scenario. Scenario is a blueprint of are chaos experiment. It defines a set of injection points, set of treatments, and the scope. So, excuse me. So it exactly defines what is gonna happen during that chaos experiment. And finally, if the scenario is a blueprint, the session is a running scenario for that given FIT scenario.And let me show you how that works in practice. So we can create a scenario affecting integration communication between service A and service B. And we can be more precise than that. We can say that injection point is gonna be a gRPC client talking to service B, and we'll scope this to cluster A, and we'll still serve the treatment, which will be the failure.And as you can see, in terms of precision, comparing to Chaos Monkey, that is much better. And this enable us to do game days. During such a day, a team owning a service would gather in a room, they would create a FIT scenario and then they would launch it, and then they would observe how their service is behaving.They would look at the errors for that service, other system metrics, errors in services that are calling their service, and so on. They would also be looking at the SPS graph. And that way, they would be able to emulate a certain outage or certain failures. And we use the game day technique to validate that the subscriber fallback would be properly handled by the clients.We use the game technique, so we created a FIT scenario where the gRPC client, the injection point would be a gRPC client talking to the subscriber. We would scope that to the playback service, which is the service that's handling our streaming functionality. And we would inject the failures. And using this FIT session, we were able to trigger the fallbacks and validate that these fallbacks are either properly or not properly handled.And that way we could file tickets and those issues will be addressed by the engineers. So using that FIT session, we were able to make sure that, that 2014 subscriber outage would never occur again. And game days actually represent another phase of chaos engineering after the Chaos Monkey. But as you can imagine, it is an evolution in a right step direction, but it requires lots of amount of effort and time from many people to sit in that room and manually monitor what is happening with your system.And this is still quite a crude approach because here we are failing all the requests between a service A and service B. And so we decided to increase or improve our scoping ability even more. And to do that we used a request context technology or as we call it, CRR, and let me explain how that works. So for a single request, as you probably know, the single request is composed of headers and a body.And CRR allows us to attach custom tags to every header, every request that we are seeing in our infrastructure. And that way we will be able to mark a certain request with the FIT failures. And as this request is propagating through our services and microservices, this request context information is passed through.And as the request is going through every individual injection point, that injection point will always be able to inspect the headers and see whether that injection point should get triggered for that particular request. And that way we can precisely mark a given request to fail for a certain FIT scenario. So we have dramatically improved our scoping ability going from instance, cluster, to a request.It doesn't get more granular than that. And so we have built FIT filter, and incorporated it into our edge gateway. So FIT filter will actually do this tagging for us. Whenever we see a request we wanna tag, the FIT filter will attach these headers to the request, and then the request is propagating through our infrastructure.Here's another example that we have. If we revisit the scenario, but we wanna fail only those requests coming from this simple, single device. So we still define injection point as gRPC client talking to service B, but in the scope, not only we say the cluster A, but also we define that only the requests coming from the customer ID of this particular customer ID, of this particular device will get the the treatment, which will be the failure.And as these requests are traveling from the device through the edge gateway where they are marked with the FIT tags, these FIT tags get propagated through the infrastructure, and only those requests that are tagged and actually reach that injection point of a gRPC client to service B from cluster A, those will fail.And this is scoped a single device only, only that one device is impacted. And as simple as it is, this was a turning point in our chaos engineering, because it enabled our software developers to just create these FIT sessions and apply chaos testing directly on their own devices. And they would be able to see firsthand how every particular FIT scenario is impacting the customer.And we build this into a simple product, it's called FIT. So we have a UI where any software engineer that company can go create, or select where they want to inject the failure, which scenario they wanna use. And then they would also scope that session to a particular customer id. And once they launch this FIT session, they can see whether it is actually affecting the user experience.And this really proved to be groundbreaking, for the first time ever, the Netflix engineer would be able to go and experiment with chaos without requiring assistance of a chaos engineer or resilience engineer. And they would be able to configure this FIT session, and within seconds they would see if there is an impact or not.One of the examples where this was used very recently was when we were launching this new double thumbs up feature. So we let our users rate any different content that they watched with thumbs down, thumbs up, or double thumbs up. And so, by the way, if you're gonna be using your rating session for this talk, you can use double thumbs up as well, before I forget.So when we launched this feature, this feature is served by the rating service. And again, it's not really a feature that is critical to our streaming experience. It doesn't matter whether you're able to retrieve whatever your rating was for that given content, or whether you are able to set it correctly, you should still be able to press play and the content should start.And so it's really a non-critical feature. And so to validate that, the developer themselves who was launching this feature, was able to create a FIT scenario where they would be injecting failures to the ratings service from the playback session, again, for their certain device. And that way, again, they would be able to validate that there was zero SPS impact.There was zero SPS impact to their device, and that way they can extrapolate that there will be no SPS impact to our members. And that's why they were able to launch the feature safely and correctly. Now, if there was an impact, since for every FIT session that we are running, we are also recording all the traces.So this is a very useful information, because you'll be able to see where the failure was injected, how the system reacted, which fallbacks were triggered, how this failure was returned to callers, and where this experience actually broke. Because many times, the fallback is handled correctly by the immediate color, but as this fallback is propagated back to subsequent colors, this whole experience gets broken.So here the software engineers can just go and see what are the traces for this given failure. And the same interaction is available in our prod and test environments. Soon engineers started actually integrating these FIT headers into their smoke tests and integration tests, and that way the FIT become kind of a part of the regular release life cycle.So this was really a turning point. And even now years later, FIT testing is still a very popular method by our engineers, especially when something breaks, they can very quickly and easily go create a FIT session and see for themselves, kind of like reproduce that back on their own device. So this drum particularly reduces also the lead time to debugging any issue.Around the same time, a different technology was making its debut. So we have realized, as you can see on this footage of one of our engineers deploying to production without any safeguards, (audience members chuckle) that it can be relatively risky or stressful experience. So how do we provide safe methods of deployment without adding extra barriers that would slow the innovation, because Netflix engineers are making hundreds of changes to production every day? So in the face of these overwhelming odds, we were left with only one option.We decided to use science. So that is why we took the randomized control experiment and we applied it to their risking our deployments. It is a very popular experiment design. Let's say you are developing a new drug, and you wanna see what is the effect of the drug. So you take a population of people, users, and let's say, a hundred thousand people, and you split them randomly into two groups, the treatment group, and the control group.And then the treatment group will get the treatment, while the control group gets the placebo or nothing. And then you let the experiment run for a while, and then you follow and collect results. And once you are comparing the results, since these groups were randomly assigned, there should be no bias. And any effect or difference between the results of these two groups can be safely associated to the impact of that treatment that you applied.So we took this approach and we applied it to our infrastructure, and that's why we created this canary strategy, or started using the canary strategy. So when running a canary for a certain service, service A, it means that we set up two additional clusters for that service, baseline cluster and canary cluster.And then these clusters register to take some small and random portion of the traffic in production. And then we observe how these two clusters behave against each other. So we look at system metrics and we evaluate how the system is doing comparing the baseline and canary signals. And this is a very simple, yet very effective technique, and it has become defacto deployment, and deployment standard of practice in the industry.So it was only natural that we decided to marry these two technologies, canary strategy and FIT. So we still created a canary experiment, but also we would create a FIT session for that canary experiment. So that way we would still have the injection point for the gRPC client talking to service B, but the scope would be updated to only affect the cluster, A-canary, that's the canary cluster that we set up.And then we would still be injecting the failure. And that way as the experiment is running, we would be comparing how the canary cluster is behaving in terms of system metrics, error counters, in comparison to the baseline. So this was already our first kind of venture into a large scale chaos experimentation, but automated chaos experimentation, because here we would be able to automatically measure and compare the signals from the baseline and canary clusters.And this was very well, this was a very successful avenue or approach. And canary's in general provide tremendous value to our company. But if you look at the canary itself, you realize that this approach does not tell the complete story. While this approach is very relatively low risk and easy to set up, it does not explicitly tell us what is the member experiencing, what are the member devices experiencing? Because we are focusing only on service level metrics.We look at these two clusters, maybe look at client-side service metrics, but that's all. In reality, servers may be happily serving requests, yet our members may not be able to stream. Let me illustrate it on these two examples. First problem that we can see here is that the request that goes to the canary cluster will fail.And since these requests are randomly assigned to clusters, when we do the retry, randomly, that request can go to the baseline cluster, and succeed. So that will mask this problem that is happening associated with the canary cluster. And the service owner may not even realize that there's something wrong happening because these requests are non-sticky, and they kind of are bouncing back from the canary to the baseline and succeeding.So we may not spot this problem until we actually deploy to production. Second example that we have is, the request succeeds going back from the canary cluster, and it is correctly processed by the caller. But then as this request is then becoming part of the results for the upstream dependencies, it may actually cause a problem to our member device, and fail there.And we would never know because we are looking only at the canary reports for those two clusters. So therefore, we needed a solution that would give us the ability to directly measure member impact. And so to solve the retry problem of the request, we extended our FIT filter, and we added a new type of a header, we added a FIT override header, and that way we would be able to explicitly tell for every request where it's supposed to go.We say that we make the the request sticky, let me show you how that works. So when the requests are being assigned in our edge gateway to a canary or based on population, they get the tag. They get the tag, either they are canary or they are a baseline request. And then as these tags are again propagating through our infrastructure, once they reach the point where they are supposed to go to service A, the VIP override, the override in the tag will kick in and will direct the request either to a canary cluster or a baseline cluster.And even if that request fails and comes back to the client call and retries, the overrides again will kick in and send a request back to the canary cluster. So this is really locking or sticking the request to its population, and to its cluster. So it's creating this strong signal because the request is locked in into this experience for the entire duration of the experiment, and we can clearly see whether it's being impacted.A second improvement we've made was related to the way how we assign requests and members, or users to our experiment. So we extended again our FIT filter with a user allocation algorithm. And that way the user allocation algorithm is implemented as a consistent hashing function. And that way, each time we see a request from a member device, we are able to hash the request into the range.Here on this example, we are assigning 1% of the request to the canary population, 1% to the baseline population. And the rest is just not affected by the experiment. So that way for each request, we can see from which device it came from, and that way we hash the device ID and we get where into the range it is belonging.If it's a canary or a baseline request. And that way we can always consistently look at the request and determine whether it was in the experiment or not. And this is the first step to actually know which devices were in that experiment, and somehow the first step that would enable us to compute that effect of the experiment on these two populations of users.Speaking about measuring and monitoring, running these experiments may not always go as expected, as illustrated here by our chaos engineers from the Umbrella Academy project. That is why we really needed a good monitoring solution. So at Netflix we've been always using our Atlas monitoring system. That is a really good system that is monitoring the system metrics of all our backend services and nodes, and infrastructure.But we have also built a different monitoring system that is more focused on the member experience. Here, if we zoom only on this part of our infrastructure, we are seeing the customer devices, the gateway, and the first tier of services. So we started collecting logs from the devices. And these logs would be describing to us what is exactly happening on the device.So indeed, they would be sent along with the regular requests through our infrastructure to the Zuul gateway, where they would be redirected to our queue processing infrastructure. And these log events would be for example, representing events such as stream start, whenever the device started streaming the content, or stream start error whenever the device attempted to stream and failed, or app crashes and so on.All these events are being collected in real time by our events infrastructure. And similarly, our first year services also collect these member specific events. For example, stream start, again, per each member. And those stream start represent the state for every member as we see it from our backend infrastructure.So that way, collectively these two sources of events collect the full picture about what is happening for any particular device or member device. And since we are sending these requests to our real time queues, we can further process them in real time. So that's why we implemented this experiment monitoring system that only look at these events.So we have constructed this event-based monitoring system. So here we are collecting all the events coming from the devices and from the first tier services, and we filter them down because we have that user allocation algorithm that can help us to filter down only to those events that are coming from the devices in the experiment.So we filter them down, and we do two things with them. First, we push them into elastic search. So later on we can debug to see what was happening for any particular device, but also we turn them into counters, and that way we can monitor these signals in real time. For example, here we have been running an experiment, and this graph represents all the events happening on the devices that led to an SPS error on the client side.And as these events are pushed to our infrastructure and turned into the counters, we can see that the number of events happening for our canary population was larger than the baseline population. You can see there's always some noise where there's always some errors happening in both populations, but as long as there is no deviation, we let the experiment run.But as soon as we detect there is a deviation, there is an increase in canary population errors, we terminate the experiment earlier. And so what is important here to realize is that the signal we are looking at only represents the errors happening on the devices in the experiment. So that is a major difference between this event-based monitoring system, and the generic monitoring systems that we've been using at Netflix.And this data has per second resolution. So as the experiment's progressing, we are looking at these baseline canary population signals that are along many dimensions. For example, we are looking at the SPS errors or SPS access events on both server and client side. And since the experiment is sticky, are not only the requests, but also the users are locked into the experiment for better or worse.So if they're experiencing any kind of pain, they are locked in that experiment. We usually run experiments for 20, 40 minutes to collect enough data so that we can evaluate, get that confidence that the experiment is not, or the change is not impacting our SPS. But we are monitoring the data with per second granularity, because for 40 minutes that user cannot escape the experiment.And that's why each time there's a deviation, we are able to detect that, and within seconds we are able to shut down that experiment. And that brings us to where we are today. From a simple Chaos Monkey, to game days, to that single user FIT session, to an automated chaos experiments. So we got to the point where we can final execute, save, and precise and autonomous chaos experiments.So let's review what were all the technologies that we needed to get here. So in our FIT filter, we are annotating the requests with the proper tags, then our CRR request routing technology lets us route the request where we need them. And then we are using canary strategy, and the FIT scoping and FIT treatment to actually scope the treatment only to the canary cluster.And finally, we are using the user allocation algorithm to assign members to the experiment, and also to filter out the events so that we can monitor how the devices are doing. And all of this is orchestrated by our chaos experimentation platform. And today, so we built this into a tool called CHAP. So today, any software engineer can go in the tool, set up an experiment, pick a certain FIT scenario, and run this experiment randomly in production on a random set of actual production users and see whether there is an impact.And if there is an impact, the experiment's terminated early and the user can then investigate. So what would previously take numerous hours and numerous people sitting in a game day room for all day, can now be done automatically in a couple of minutes. Here we can see we've been running a subscriber experiment for that same outage that happened years ago.So now we are able to run that experiment monthly, and see what is the impact to our members. And if there is any impact, the experiment will shut down as you can see here, within a couple of minutes. And then service owners can go and investigate. And so we have built this, what we believe is an amazing tool that runs chaos experiments.But in doing so, we have discovered something more. We have developed a tool that can precisely measure impact of a failure in a software on our members. But not only that, we can measure impact of any software change on our members. It allows us to measure the butterfly effect of a software change somewhere deep in the infrastructure, on a certain little service, directly on our members.And we can quantify what is the butterfly effect of that change. And we call this a sticky canary, or a sticky experiment. And our engineers quickly noticed. So they have realized that when they run a sticky canary, it is the only way how can they be absolutely sure that there is no negative impact to SPS, to our members, whenever they wanna push a new change or new software change.So over the past decade, in search of this perfect chaos experiment that would only benefit this narrow group of engineers, we have evolved into a tool that can redefine how we measure and deploy all the different changes into our production. And as a result of perfecting chaos, we have developed this precision and safety when manipulating our infrastructure.And chaos has become just one of many tools that we are using in our tool box. And so from chaos experiments we have moved on to infrastructure experimentation. And so this is the term that we use that when we are running these experiments. And over the years we have identified many use cases where infrastructure experimentation can be applied.Let me walk you through some of them. So first, it's the sticky experiment. That's the base experiment that we use to measure effect of a software change. And in this scenario, the treatment is actually a change. Change can be a code change, a property change running on a new instance type, and you can still measure how that impacts our members.Then chaos just becomes one different type of a sticky experiment where the change we are validating is that, that fault injection in that cluster is not impacting our members. And then we have the unscoped chaos. So this is an interesting application of an unscoped experiment where we are actually not scoping the failures or the experimentation to any particular cluster.Excuse me. So, we are still annotating, or we are still assigning member devices to the population, to the experiment. So we have two groups of devices, we have the canary and baseline members, and we still tag their requests with canary or baseline tags, but we do not scope to a single cluster. Instead, we still wanna inject to our gRPC client injection points talking to service B.Which means that as these requests are propagating through the infrastructure, whenever they reach such an injection point and they wanna talk to service B, the error will be injected, and those requests will fail. And that way we can real nicely simulate, for example, scenario where the whole service is experiencing the whole data center wide outage, and it just becomes unavailable for any system call, from wherever it's being called.So this way we can simulate these outages, and we can validate and quickly determine that a certain service is either critical or non-critical to our streaming experience. Last year I've been running this with a user, with our software engineer, and we've been running an unscoped chaos on a simple database, and the owner of the database said, "this is not a critical path, it's gonna be great." And couple of minutes later, a different engineer comes running into the room saying that "Bandersnatch is broken, because we've broken that interactive experience in the Bandersnatch episodes." And that way how we have realized this service is actually critical, and we need to treat it differently.Another type of an experiment that we have here, is a data experiment. Here we have extended the way how the number of treatments that we can serve. In this case the treatment we are serving is the new data file. And what is happening here is that when the canary cluster is trying to access a certain data object, they will be served, for example, a new version of the data object that we are currently canarying.So that is the change that is happening, and that we can measure how that new data object is actually impacting our devices. And then there's the squeeze. Squeeze is another interesting experiment type, because here we are still using the canary strategy, but we have also used that ability that we can precisely control how much traffic we send to every cluster.So as the squeeze experiment is running, it is our kind of a performance evolution tool or experiment where we are increasing how many requests there goes into the canary cluster. And we do that in well-defined steps, where we are every five minutes, we bump up the number of requests that go to the cluster, and then we can still see how that cluster is behaving comparing to the baseline.And that is a very popular expert type because we can look at different performance characteristics of the service. We can tune, concurrence, limit or threat pools. We can for example also tune how your service is behaving when you give it a different number or different container resources. And you can also define or determine what is your max throughput for the given service.And that is valuable information when you do autoscaling or failovers, and cost resizing. So that is also very popular. And then we have the priority load-shedding experiment, which is another type where we actually take the experimentation discipline, and we are not experimenting on anything that is happening in our data center, but we have extended the injection point family with a new injection point, which is the edge.And that way we can serve different treatments in that edge layer. And here we've been able to run experiments that are validating our load-shedding algorithms. We assign users to the experiment, and those that are coming from the canary population, those requests, if they are lower priority requests, then they're throttled, but higher priority requests are still getting through.And that way we can see where that experience is impacting our members. And here's an animation that shows the priority load-shedding in action. It was captured by one of our engineers. Again, they run a FIT session on their device, and they were able to verify that even though the errors are happening for low priority requests and they're not able to fetch some of the information for the content, when they click play, they're still able to initiate that streaming session.Another new avenue that we opened was the orchestration of chaos experiments outside of our backend infrastructure. So if you remember those little open connect boxes that are storing in our catalog. So we started injecting chaos into those, and we were still able to measure how that affects our member experience.And we are for example, still verify that if that single box goes down, the devices can still reconnect through a different box or directly to our data center in AWS. So that way we've been able to exercise fall backs that were happening completely outside of our data center. So as you can see, there's many different types of experiments we have designed over the years, and it's a very modular approach.And when we create these new experiments, the only thing that is changing are these three parameters, treatment, allocation, and scope. And we can mix and match them. And you can see that it's a very modular approach that lets us create many different experiment types and FIT scenarios. So as you can see, for treatments we usually serve changes, failures or data changes.For allocation, we usually have sticky or non-sticky. And for scope, we either scope the experiment to a certain cluster, or we don't scope it at all. And every time our resilience team is approached in designing a new experiment, we are usually able to satisfy those requests by just designing an experiment type that is varying these three parameters.And then the experiment is still able to profit from all that real time monitoring and safety that we have built into the experimentation. Now a few words about adopting chaos engineering at your organizations. So introducing or building chaos engineering at your infrastructure, or that introducing that practice is a journey.It takes time, but no matter where you are on this journey and your where your company is, there's still that one next step that you can take. So, for example, if you feel like you could be affected by individual nodes going down, you can try the Chaos Monkey approach. You can either use Chaos Monkey that is open sourced, or you can shut down instances by yourself.There's a also high chance that by running on Kubernetes, you are probably already resilient toward node failures. And also you could probably use AWS Fault Injection Simulator to simulate these kind of failures. Then the next stage are canaries. I think that is a very good technology by itself that you can use in your organization and really quickly benefit from that technology right away without chaos.We have open source, Spinnaker and Kayenta. So you can really, either there's a canary stage that you can run a canary, and you can use Kayenta to analyze the system metrics. And that way, moving on to a release cycle, where you have the canaries in the pipelines, in the development or deployment workflows, is a great evolution of your organization because you are already measuring signals, comparing baseline and canary signals.So you will develop that muscle that is needed when you want to experiment with chaos. And then tracing is also an important and interesting technology that will bring you forward or closer to where, for example, our chaos experimentation is at Netflix. Because if you are using something like Zipkin, there's a high chance that your headers, request headers are already being propagated through the infrastructure, so that way you would be able to attach custom headers to those requests as well.And finally, fault injection is also something that can be added to the mix. We are as an industry in a much better place than we've been 10 years ago when Netflix was building FIT for the first time. Because with the evolution of service mesh, for example, Envoy is already supporting some kind of basic fault injection technology.And that way for example, the interceptors or site cars are an excellent injection point where you can implement that logic of injecting some kind of a failure or treatment. Also, spring boot fallbacks are already something that is available, and you can experiment fallbacks and make sure that you are actually having those fall backs, because if you don't, there's probably no point in running those chaos experiments in the first place.Going back to the overall discipline of chaos engineering and infrastructure experimentation, I think we can summarize and say that the single chaos engineering role that was originally focusing on just that chaos, has grown and extended our discipline, and we extended the range of experiments that we can run today.And those can be used by many teams in the company. So from that chaos experiment, we actually started running canneries that are run by any service in our infrastructure. Change experiments. Squeezes are usually running monthly to kind of monitor how your performance is doing over time. Unscoped chaos experiments are running quarterly whenever you need to verify that where your service is critical or non-critical, and so on.Data canaries, our priority load-shedding experiments, are also a popular experiment type. So the infrastructure experimentation today exists with that single purpose of enabling our software engineers to innovate as fast as possible, and also without compromising the safety and stability of Netflix. And at Netflix, it's no secret that we want to entertain the world.And as you could see in the stock, accomplishing this involves coordination of many systems that needs to work seamlessly in harmony with each other. But the final product, and delivering those moments of joy to our members makes it all worth it. Thank you very much for attention.</p>]]></summary>
    <content type="html"><![CDATA[<h2>Transcript</h2>
<p>[Rob] Good afternoon, everyone. How you doing? (audience members whoop) That's what I like to hear. It is my honor to welcome you to NFX 303, better known as, The Evolution of Chaos Engineering at Netflix. My name is Rob Hilton, and I'm a Principal Solutions Architect supporting Netflix as a customer.And basically what that means is, I've spent roughly the last four years of my life learning from, and collaborating with all of Netflix's best and brightest engineers, including my friend right over here to my right, Ales Plsek, who's gonna tell you a little bit more about resilience. Netflix is well known as being an innovator in a wide array of different tech spaces.One of the arguably most compelling of those is their contributions to application resilience. Now, that's a huge and widely varying topic, but one of the magic words in that space that's been coined by Netflix, and one of the ones that brings us all together today, is that magic word, chaos. But technology spaces evolve constantly.As Ales knows, one year is roughly 10 years in tech speak. So given the fact that chaos engineering was coined by Netflix over a decade ago, one wonders how they've continued to evolve in that space today. And with that, give it up for Ales, so we can all find out. (audience applauds) - Hi, thank you. Thank you for joining us for The Evolution of Chaos Engineering at Netflix.My name is Ales Plsek. I'm a Senior Software Engineer at Netflix. I'm part of the Resilience Team, and I lead our chaos engineering efforts in this space. And today, I will hopefully be your favorite historian, because we'll be talking for the next hour about history, and evolution of chaos engineering.And there is a lot to talk about. Chaos engineering has been alive for more than a decade. In software engineering years, that's more than 100. So let's get into it, we have a century to cover. First, I would like to talk about the history of chaos engineering at Netflix. We'll talk about some of the turning points and technologies that we've built over the years, and that will hopefully illustrate how our thinking about this discipline has evolved over these years.And then, I would like to show you how the chaos experimentation looks like at Netflix today. And finally, we'll talk about how chaos engineering has grown beyond the scope of its original goal, and how it transformed many phases of our software development lifecycle. And how it impacts the lives of not only SREs or chaos engineers, or resilience engineers, but any software engineer at our company.And it would not be a Netflix presentation without screenshots of some of my colleague software engineers who are hard at work. So let's start with this brief history of chaos. So your Netflix experience, as you may probably know, is largely composed of two large technologies. One, is the cloud, made out of these little instances, and then there's the Open Connect CDNs that we own.And those are running and storing all the video bits that are served to your device when you click play. Once you click play, we call it a stream start. That stream start, we keep number of those, and that we call SPS, Stream Start Per Second. That is the key metric that we monitor. Here is a beautiful vintage graph from our Atlas monitoring system showing how SPS is changing day by day.And focusing on the cloud itself, that one is made of these little tiny instances, and as we all know, they can be quite finicky. They can come and go as they want, they can be impacted by failures, and it's just something that we need to learn to accept. That's kind of this cycle of life, or something like that.And so, when Netflix moved its services into the cloud, there was a need to make sure that the streaming experience is not impacted by these little instances going down or failing. And that's why, originally, we have built Chaos Monkey. Chaos Monkey was used to test the resilience of our streaming infrastructure towards the failures of individual nodes.And the tool would randomly pick a couple of instances in the data center, and would start shutting them down on a pretty fine schedule. And early on in this chaos journey, it was a very simple, yet very effective approach. It helped our services to build in that resiliency towards the nodes failing down. And although it's a very crude tool, it has become a synonym of chaos engineering for many years.In chaos engineering terminology, we can categorize the treatment that Chaos Monkey is serving as a failure. And we say that, that failure is scope to an individual instance. And as you will see, we'll be using this terminology throughout this talk. Today, Chaos Monkey is still used at Netflix, but the value it provides is minimal.The services have simply moved on. They are resilient toward failures of individual nodes. And so we don't really see much benefit of running Chaos Monkey today in the data center. The use of that tool has declined, but it's also because our backend architecture is a lot more complex than just a set of instances.Speaking of which, here can see a visualization of our cloud architecture. (audience members chuckle) And for those of you taking notes, I will pause this for a minute. And here's another, kind of a bird's view of that same diagram. But if we really simplified it, what we have here is, our members and their devices on the right side talking to our Netflix cloud data center, sending the request to our Netflix cloud data center.These requests are entering the cloud through the edge gateway. And then they start propagating through these layers of microservices or applications, or services as we call them, and here represented as individual graphs, individual nodes of that graph. So taking this architecture into account, we wanted to be more resilient than just at the level of individual nodes.Moreover, in 2014, Netflix experienced an outage, a service responsible for managing the subscriber information was experiencing some internal errors. And although this service is very important for the business, for the company, because it's managing the subscriber or it's managing the signup of the new users.It's managing whenever you want to create or modify a profile. It's not really critical for the streaming experience. It's not really demanding that their service needs to be up, because you as a authenticated device, you should still be able to stream your favorite TV show. Yet during this outage, our members were not able to stream their favorite shows.And what happened was that the service was in trouble, and was correctly serving the fallbacks. But the colors of these fallbacks, the colors of the service were not able to process these fallbacks correct correctly. Because this outage never happened before, there was never any time to kind of test that the fallbacks are being properly processed in the layers above this service.And so the streaming architecture was not really resilient towards these failures of an uncritical service, and that's why we had a failure. So we realized that we needed to simulate these kind of scenarios, and we needed to be able to inject failures into the services themselves. And that is why we built FIT.FIT is our Failure Injection Technology. And it allows us to achieve that precision of failure injection. So for any given service in our infrastructure, FIT allows us to define injection points. And those are the points where we will be able to inject these failures. We support many different types of injection points.We have, for example, injection points for the IPC libraries. That's when you when talk through gRPC or REST, or GraphQL. To honor the service, we are able to inject failures either on a server side or client side of the communication. We have database library injection points where you can inject failures into the call that is trying to retrieve a certain data point from your Cassandra key space, and so on.We have injection points for caches or Kafka, S3 buckets and so on. Also, FIT allows us to define the treatment that we wanna inject in that injection point. The treatment will be set by that injection point, and it can be of many different types. Right now we are recognizing the failure. We can either serve the failure delay or both.Both meaning that for that request impacted into the injection point, we would first delay the request, and then we would fail it as well. And then there's the scope. The scope is used to define which injection point's gonna get triggered. So far we have seen scoping to instances, and now we are also able to scope to clusters.And then a scenario. Scenario is a blueprint of are chaos experiment. It defines a set of injection points, set of treatments, and the scope. So, excuse me. So it exactly defines what is gonna happen during that chaos experiment. And finally, if the scenario is a blueprint, the session is a running scenario for that given FIT scenario.And let me show you how that works in practice. So we can create a scenario affecting integration communication between service A and service B. And we can be more precise than that. We can say that injection point is gonna be a gRPC client talking to service B, and we'll scope this to cluster A, and we'll still serve the treatment, which will be the failure.And as you can see, in terms of precision, comparing to Chaos Monkey, that is much better. And this enable us to do game days. During such a day, a team owning a service would gather in a room, they would create a FIT scenario and then they would launch it, and then they would observe how their service is behaving.They would look at the errors for that service, other system metrics, errors in services that are calling their service, and so on. They would also be looking at the SPS graph. And that way, they would be able to emulate a certain outage or certain failures. And we use the game day technique to validate that the subscriber fallback would be properly handled by the clients.We use the game technique, so we created a FIT scenario where the gRPC client, the injection point would be a gRPC client talking to the subscriber. We would scope that to the playback service, which is the service that's handling our streaming functionality. And we would inject the failures. And using this FIT session, we were able to trigger the fallbacks and validate that these fallbacks are either properly or not properly handled.And that way we could file tickets and those issues will be addressed by the engineers. So using that FIT session, we were able to make sure that, that 2014 subscriber outage would never occur again. And game days actually represent another phase of chaos engineering after the Chaos Monkey. But as you can imagine, it is an evolution in a right step direction, but it requires lots of amount of effort and time from many people to sit in that room and manually monitor what is happening with your system.And this is still quite a crude approach because here we are failing all the requests between a service A and service B. And so we decided to increase or improve our scoping ability even more. And to do that we used a request context technology or as we call it, CRR, and let me explain how that works. So for a single request, as you probably know, the single request is composed of headers and a body.And CRR allows us to attach custom tags to every header, every request that we are seeing in our infrastructure. And that way we will be able to mark a certain request with the FIT failures. And as this request is propagating through our services and microservices, this request context information is passed through.And as the request is going through every individual injection point, that injection point will always be able to inspect the headers and see whether that injection point should get triggered for that particular request. And that way we can precisely mark a given request to fail for a certain FIT scenario. So we have dramatically improved our scoping ability going from instance, cluster, to a request.It doesn't get more granular than that. And so we have built FIT filter, and incorporated it into our edge gateway. So FIT filter will actually do this tagging for us. Whenever we see a request we wanna tag, the FIT filter will attach these headers to the request, and then the request is propagating through our infrastructure.Here's another example that we have. If we revisit the scenario, but we wanna fail only those requests coming from this simple, single device. So we still define injection point as gRPC client talking to service B, but in the scope, not only we say the cluster A, but also we define that only the requests coming from the customer ID of this particular customer ID, of this particular device will get the the treatment, which will be the failure.And as these requests are traveling from the device through the edge gateway where they are marked with the FIT tags, these FIT tags get propagated through the infrastructure, and only those requests that are tagged and actually reach that injection point of a gRPC client to service B from cluster A, those will fail.And this is scoped a single device only, only that one device is impacted. And as simple as it is, this was a turning point in our chaos engineering, because it enabled our software developers to just create these FIT sessions and apply chaos testing directly on their own devices. And they would be able to see firsthand how every particular FIT scenario is impacting the customer.And we build this into a simple product, it's called FIT. So we have a UI where any software engineer that company can go create, or select where they want to inject the failure, which scenario they wanna use. And then they would also scope that session to a particular customer id. And once they launch this FIT session, they can see whether it is actually affecting the user experience.And this really proved to be groundbreaking, for the first time ever, the Netflix engineer would be able to go and experiment with chaos without requiring assistance of a chaos engineer or resilience engineer. And they would be able to configure this FIT session, and within seconds they would see if there is an impact or not.One of the examples where this was used very recently was when we were launching this new double thumbs up feature. So we let our users rate any different content that they watched with thumbs down, thumbs up, or double thumbs up. And so, by the way, if you're gonna be using your rating session for this talk, you can use double thumbs up as well, before I forget.So when we launched this feature, this feature is served by the rating service. And again, it's not really a feature that is critical to our streaming experience. It doesn't matter whether you're able to retrieve whatever your rating was for that given content, or whether you are able to set it correctly, you should still be able to press play and the content should start.And so it's really a non-critical feature. And so to validate that, the developer themselves who was launching this feature, was able to create a FIT scenario where they would be injecting failures to the ratings service from the playback session, again, for their certain device. And that way, again, they would be able to validate that there was zero SPS impact.There was zero SPS impact to their device, and that way they can extrapolate that there will be no SPS impact to our members. And that's why they were able to launch the feature safely and correctly. Now, if there was an impact, since for every FIT session that we are running, we are also recording all the traces.So this is a very useful information, because you'll be able to see where the failure was injected, how the system reacted, which fallbacks were triggered, how this failure was returned to callers, and where this experience actually broke. Because many times, the fallback is handled correctly by the immediate color, but as this fallback is propagated back to subsequent colors, this whole experience gets broken.So here the software engineers can just go and see what are the traces for this given failure. And the same interaction is available in our prod and test environments. Soon engineers started actually integrating these FIT headers into their smoke tests and integration tests, and that way the FIT become kind of a part of the regular release life cycle.So this was really a turning point. And even now years later, FIT testing is still a very popular method by our engineers, especially when something breaks, they can very quickly and easily go create a FIT session and see for themselves, kind of like reproduce that back on their own device. So this drum particularly reduces also the lead time to debugging any issue.Around the same time, a different technology was making its debut. So we have realized, as you can see on this footage of one of our engineers deploying to production without any safeguards, (audience members chuckle) that it can be relatively risky or stressful experience. So how do we provide safe methods of deployment without adding extra barriers that would slow the innovation, because Netflix engineers are making hundreds of changes to production every day? So in the face of these overwhelming odds, we were left with only one option.We decided to use science. So that is why we took the randomized control experiment and we applied it to their risking our deployments. It is a very popular experiment design. Let's say you are developing a new drug, and you wanna see what is the effect of the drug. So you take a population of people, users, and let's say, a hundred thousand people, and you split them randomly into two groups, the treatment group, and the control group.And then the treatment group will get the treatment, while the control group gets the placebo or nothing. And then you let the experiment run for a while, and then you follow and collect results. And once you are comparing the results, since these groups were randomly assigned, there should be no bias. And any effect or difference between the results of these two groups can be safely associated to the impact of that treatment that you applied.So we took this approach and we applied it to our infrastructure, and that's why we created this canary strategy, or started using the canary strategy. So when running a canary for a certain service, service A, it means that we set up two additional clusters for that service, baseline cluster and canary cluster.And then these clusters register to take some small and random portion of the traffic in production. And then we observe how these two clusters behave against each other. So we look at system metrics and we evaluate how the system is doing comparing the baseline and canary signals. And this is a very simple, yet very effective technique, and it has become defacto deployment, and deployment standard of practice in the industry.So it was only natural that we decided to marry these two technologies, canary strategy and FIT. So we still created a canary experiment, but also we would create a FIT session for that canary experiment. So that way we would still have the injection point for the gRPC client talking to service B, but the scope would be updated to only affect the cluster, A-canary, that's the canary cluster that we set up.And then we would still be injecting the failure. And that way as the experiment is running, we would be comparing how the canary cluster is behaving in terms of system metrics, error counters, in comparison to the baseline. So this was already our first kind of venture into a large scale chaos experimentation, but automated chaos experimentation, because here we would be able to automatically measure and compare the signals from the baseline and canary clusters.And this was very well, this was a very successful avenue or approach. And canary's in general provide tremendous value to our company. But if you look at the canary itself, you realize that this approach does not tell the complete story. While this approach is very relatively low risk and easy to set up, it does not explicitly tell us what is the member experiencing, what are the member devices experiencing? Because we are focusing only on service level metrics.We look at these two clusters, maybe look at client-side service metrics, but that's all. In reality, servers may be happily serving requests, yet our members may not be able to stream. Let me illustrate it on these two examples. First problem that we can see here is that the request that goes to the canary cluster will fail.And since these requests are randomly assigned to clusters, when we do the retry, randomly, that request can go to the baseline cluster, and succeed. So that will mask this problem that is happening associated with the canary cluster. And the service owner may not even realize that there's something wrong happening because these requests are non-sticky, and they kind of are bouncing back from the canary to the baseline and succeeding.So we may not spot this problem until we actually deploy to production. Second example that we have is, the request succeeds going back from the canary cluster, and it is correctly processed by the caller. But then as this request is then becoming part of the results for the upstream dependencies, it may actually cause a problem to our member device, and fail there.And we would never know because we are looking only at the canary reports for those two clusters. So therefore, we needed a solution that would give us the ability to directly measure member impact. And so to solve the retry problem of the request, we extended our FIT filter, and we added a new type of a header, we added a FIT override header, and that way we would be able to explicitly tell for every request where it's supposed to go.We say that we make the the request sticky, let me show you how that works. So when the requests are being assigned in our edge gateway to a canary or based on population, they get the tag. They get the tag, either they are canary or they are a baseline request. And then as these tags are again propagating through our infrastructure, once they reach the point where they are supposed to go to service A, the VIP override, the override in the tag will kick in and will direct the request either to a canary cluster or a baseline cluster.And even if that request fails and comes back to the client call and retries, the overrides again will kick in and send a request back to the canary cluster. So this is really locking or sticking the request to its population, and to its cluster. So it's creating this strong signal because the request is locked in into this experience for the entire duration of the experiment, and we can clearly see whether it's being impacted.A second improvement we've made was related to the way how we assign requests and members, or users to our experiment. So we extended again our FIT filter with a user allocation algorithm. And that way the user allocation algorithm is implemented as a consistent hashing function. And that way, each time we see a request from a member device, we are able to hash the request into the range.Here on this example, we are assigning 1% of the request to the canary population, 1% to the baseline population. And the rest is just not affected by the experiment. So that way for each request, we can see from which device it came from, and that way we hash the device ID and we get where into the range it is belonging.If it's a canary or a baseline request. And that way we can always consistently look at the request and determine whether it was in the experiment or not. And this is the first step to actually know which devices were in that experiment, and somehow the first step that would enable us to compute that effect of the experiment on these two populations of users.Speaking about measuring and monitoring, running these experiments may not always go as expected, as illustrated here by our chaos engineers from the Umbrella Academy project. That is why we really needed a good monitoring solution. So at Netflix we've been always using our Atlas monitoring system. That is a really good system that is monitoring the system metrics of all our backend services and nodes, and infrastructure.But we have also built a different monitoring system that is more focused on the member experience. Here, if we zoom only on this part of our infrastructure, we are seeing the customer devices, the gateway, and the first tier of services. So we started collecting logs from the devices. And these logs would be describing to us what is exactly happening on the device.So indeed, they would be sent along with the regular requests through our infrastructure to the Zuul gateway, where they would be redirected to our queue processing infrastructure. And these log events would be for example, representing events such as stream start, whenever the device started streaming the content, or stream start error whenever the device attempted to stream and failed, or app crashes and so on.All these events are being collected in real time by our events infrastructure. And similarly, our first year services also collect these member specific events. For example, stream start, again, per each member. And those stream start represent the state for every member as we see it from our backend infrastructure.So that way, collectively these two sources of events collect the full picture about what is happening for any particular device or member device. And since we are sending these requests to our real time queues, we can further process them in real time. So that's why we implemented this experiment monitoring system that only look at these events.So we have constructed this event-based monitoring system. So here we are collecting all the events coming from the devices and from the first tier services, and we filter them down because we have that user allocation algorithm that can help us to filter down only to those events that are coming from the devices in the experiment.So we filter them down, and we do two things with them. First, we push them into elastic search. So later on we can debug to see what was happening for any particular device, but also we turn them into counters, and that way we can monitor these signals in real time. For example, here we have been running an experiment, and this graph represents all the events happening on the devices that led to an SPS error on the client side.And as these events are pushed to our infrastructure and turned into the counters, we can see that the number of events happening for our canary population was larger than the baseline population. You can see there's always some noise where there's always some errors happening in both populations, but as long as there is no deviation, we let the experiment run.But as soon as we detect there is a deviation, there is an increase in canary population errors, we terminate the experiment earlier. And so what is important here to realize is that the signal we are looking at only represents the errors happening on the devices in the experiment. So that is a major difference between this event-based monitoring system, and the generic monitoring systems that we've been using at Netflix.And this data has per second resolution. So as the experiment's progressing, we are looking at these baseline canary population signals that are along many dimensions. For example, we are looking at the SPS errors or SPS access events on both server and client side. And since the experiment is sticky, are not only the requests, but also the users are locked into the experiment for better or worse.So if they're experiencing any kind of pain, they are locked in that experiment. We usually run experiments for 20, 40 minutes to collect enough data so that we can evaluate, get that confidence that the experiment is not, or the change is not impacting our SPS. But we are monitoring the data with per second granularity, because for 40 minutes that user cannot escape the experiment.And that's why each time there's a deviation, we are able to detect that, and within seconds we are able to shut down that experiment. And that brings us to where we are today. From a simple Chaos Monkey, to game days, to that single user FIT session, to an automated chaos experiments. So we got to the point where we can final execute, save, and precise and autonomous chaos experiments.So let's review what were all the technologies that we needed to get here. So in our FIT filter, we are annotating the requests with the proper tags, then our CRR request routing technology lets us route the request where we need them. And then we are using canary strategy, and the FIT scoping and FIT treatment to actually scope the treatment only to the canary cluster.And finally, we are using the user allocation algorithm to assign members to the experiment, and also to filter out the events so that we can monitor how the devices are doing. And all of this is orchestrated by our chaos experimentation platform. And today, so we built this into a tool called CHAP. So today, any software engineer can go in the tool, set up an experiment, pick a certain FIT scenario, and run this experiment randomly in production on a random set of actual production users and see whether there is an impact.And if there is an impact, the experiment's terminated early and the user can then investigate. So what would previously take numerous hours and numerous people sitting in a game day room for all day, can now be done automatically in a couple of minutes. Here we can see we've been running a subscriber experiment for that same outage that happened years ago.So now we are able to run that experiment monthly, and see what is the impact to our members. And if there is any impact, the experiment will shut down as you can see here, within a couple of minutes. And then service owners can go and investigate. And so we have built this, what we believe is an amazing tool that runs chaos experiments.But in doing so, we have discovered something more. We have developed a tool that can precisely measure impact of a failure in a software on our members. But not only that, we can measure impact of any software change on our members. It allows us to measure the butterfly effect of a software change somewhere deep in the infrastructure, on a certain little service, directly on our members.And we can quantify what is the butterfly effect of that change. And we call this a sticky canary, or a sticky experiment. And our engineers quickly noticed. So they have realized that when they run a sticky canary, it is the only way how can they be absolutely sure that there is no negative impact to SPS, to our members, whenever they wanna push a new change or new software change.So over the past decade, in search of this perfect chaos experiment that would only benefit this narrow group of engineers, we have evolved into a tool that can redefine how we measure and deploy all the different changes into our production. And as a result of perfecting chaos, we have developed this precision and safety when manipulating our infrastructure.And chaos has become just one of many tools that we are using in our tool box. And so from chaos experiments we have moved on to infrastructure experimentation. And so this is the term that we use that when we are running these experiments. And over the years we have identified many use cases where infrastructure experimentation can be applied.Let me walk you through some of them. So first, it's the sticky experiment. That's the base experiment that we use to measure effect of a software change. And in this scenario, the treatment is actually a change. Change can be a code change, a property change running on a new instance type, and you can still measure how that impacts our members.Then chaos just becomes one different type of a sticky experiment where the change we are validating is that, that fault injection in that cluster is not impacting our members. And then we have the unscoped chaos. So this is an interesting application of an unscoped experiment where we are actually not scoping the failures or the experimentation to any particular cluster.Excuse me. So, we are still annotating, or we are still assigning member devices to the population, to the experiment. So we have two groups of devices, we have the canary and baseline members, and we still tag their requests with canary or baseline tags, but we do not scope to a single cluster. Instead, we still wanna inject to our gRPC client injection points talking to service B.Which means that as these requests are propagating through the infrastructure, whenever they reach such an injection point and they wanna talk to service B, the error will be injected, and those requests will fail. And that way we can real nicely simulate, for example, scenario where the whole service is experiencing the whole data center wide outage, and it just becomes unavailable for any system call, from wherever it's being called.So this way we can simulate these outages, and we can validate and quickly determine that a certain service is either critical or non-critical to our streaming experience. Last year I've been running this with a user, with our software engineer, and we've been running an unscoped chaos on a simple database, and the owner of the database said, "this is not a critical path, it's gonna be great." And couple of minutes later, a different engineer comes running into the room saying that "Bandersnatch is broken, because we've broken that interactive experience in the Bandersnatch episodes." And that way how we have realized this service is actually critical, and we need to treat it differently.Another type of an experiment that we have here, is a data experiment. Here we have extended the way how the number of treatments that we can serve. In this case the treatment we are serving is the new data file. And what is happening here is that when the canary cluster is trying to access a certain data object, they will be served, for example, a new version of the data object that we are currently canarying.So that is the change that is happening, and that we can measure how that new data object is actually impacting our devices. And then there's the squeeze. Squeeze is another interesting experiment type, because here we are still using the canary strategy, but we have also used that ability that we can precisely control how much traffic we send to every cluster.So as the squeeze experiment is running, it is our kind of a performance evolution tool or experiment where we are increasing how many requests there goes into the canary cluster. And we do that in well-defined steps, where we are every five minutes, we bump up the number of requests that go to the cluster, and then we can still see how that cluster is behaving comparing to the baseline.And that is a very popular expert type because we can look at different performance characteristics of the service. We can tune, concurrence, limit or threat pools. We can for example also tune how your service is behaving when you give it a different number or different container resources. And you can also define or determine what is your max throughput for the given service.And that is valuable information when you do autoscaling or failovers, and cost resizing. So that is also very popular. And then we have the priority load-shedding experiment, which is another type where we actually take the experimentation discipline, and we are not experimenting on anything that is happening in our data center, but we have extended the injection point family with a new injection point, which is the edge.And that way we can serve different treatments in that edge layer. And here we've been able to run experiments that are validating our load-shedding algorithms. We assign users to the experiment, and those that are coming from the canary population, those requests, if they are lower priority requests, then they're throttled, but higher priority requests are still getting through.And that way we can see where that experience is impacting our members. And here's an animation that shows the priority load-shedding in action. It was captured by one of our engineers. Again, they run a FIT session on their device, and they were able to verify that even though the errors are happening for low priority requests and they're not able to fetch some of the information for the content, when they click play, they're still able to initiate that streaming session.Another new avenue that we opened was the orchestration of chaos experiments outside of our backend infrastructure. So if you remember those little open connect boxes that are storing in our catalog. So we started injecting chaos into those, and we were still able to measure how that affects our member experience.And we are for example, still verify that if that single box goes down, the devices can still reconnect through a different box or directly to our data center in AWS. So that way we've been able to exercise fall backs that were happening completely outside of our data center. So as you can see, there's many different types of experiments we have designed over the years, and it's a very modular approach.And when we create these new experiments, the only thing that is changing are these three parameters, treatment, allocation, and scope. And we can mix and match them. And you can see that it's a very modular approach that lets us create many different experiment types and FIT scenarios. So as you can see, for treatments we usually serve changes, failures or data changes.For allocation, we usually have sticky or non-sticky. And for scope, we either scope the experiment to a certain cluster, or we don't scope it at all. And every time our resilience team is approached in designing a new experiment, we are usually able to satisfy those requests by just designing an experiment type that is varying these three parameters.And then the experiment is still able to profit from all that real time monitoring and safety that we have built into the experimentation. Now a few words about adopting chaos engineering at your organizations. So introducing or building chaos engineering at your infrastructure, or that introducing that practice is a journey.It takes time, but no matter where you are on this journey and your where your company is, there's still that one next step that you can take. So, for example, if you feel like you could be affected by individual nodes going down, you can try the Chaos Monkey approach. You can either use Chaos Monkey that is open sourced, or you can shut down instances by yourself.There's a also high chance that by running on Kubernetes, you are probably already resilient toward node failures. And also you could probably use AWS Fault Injection Simulator to simulate these kind of failures. Then the next stage are canaries. I think that is a very good technology by itself that you can use in your organization and really quickly benefit from that technology right away without chaos.We have open source, Spinnaker and Kayenta. So you can really, either there's a canary stage that you can run a canary, and you can use Kayenta to analyze the system metrics. And that way, moving on to a release cycle, where you have the canaries in the pipelines, in the development or deployment workflows, is a great evolution of your organization because you are already measuring signals, comparing baseline and canary signals.So you will develop that muscle that is needed when you want to experiment with chaos. And then tracing is also an important and interesting technology that will bring you forward or closer to where, for example, our chaos experimentation is at Netflix. Because if you are using something like Zipkin, there's a high chance that your headers, request headers are already being propagated through the infrastructure, so that way you would be able to attach custom headers to those requests as well.And finally, fault injection is also something that can be added to the mix. We are as an industry in a much better place than we've been 10 years ago when Netflix was building FIT for the first time. Because with the evolution of service mesh, for example, Envoy is already supporting some kind of basic fault injection technology.And that way for example, the interceptors or site cars are an excellent injection point where you can implement that logic of injecting some kind of a failure or treatment. Also, spring boot fallbacks are already something that is available, and you can experiment fallbacks and make sure that you are actually having those fall backs, because if you don't, there's probably no point in running those chaos experiments in the first place.Going back to the overall discipline of chaos engineering and infrastructure experimentation, I think we can summarize and say that the single chaos engineering role that was originally focusing on just that chaos, has grown and extended our discipline, and we extended the range of experiments that we can run today.And those can be used by many teams in the company. So from that chaos experiment, we actually started running canneries that are run by any service in our infrastructure. Change experiments. Squeezes are usually running monthly to kind of monitor how your performance is doing over time. Unscoped chaos experiments are running quarterly whenever you need to verify that where your service is critical or non-critical, and so on.Data canaries, our priority load-shedding experiments, are also a popular experiment type. So the infrastructure experimentation today exists with that single purpose of enabling our software engineers to innovate as fast as possible, and also without compromising the safety and stability of Netflix. And at Netflix, it's no secret that we want to entertain the world.And as you could see in the stock, accomplishing this involves coordination of many systems that needs to work seamlessly in harmony with each other. But the final product, and delivering those moments of joy to our members makes it all worth it. Thank you very much for attention.</p>
]]></content>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">office copilot</title>
    <id>https://blog.ruizhou.cf/english/news/microsoft-office-copilot.html</id>
    <link href="https://blog.ruizhou.cf/english/news/microsoft-office-copilot.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>video</h2>
]]></summary>
    <content type="html"><![CDATA[<h2>video</h2>
]]></content>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">高频词汇</title>
    <id>https://blog.ruizhou.cf/english/vocabulary/high-frequency-vocabulary.html</id>
    <link href="https://blog.ruizhou.cf/english/vocabulary/high-frequency-vocabulary.html"/>
    <updated>2024-09-30T09:26:44.000Z</updated>
    <summary type="html"><![CDATA[<h2>高频词汇</h2>
<p>枚举很多常用的词汇，短语搭配等</p>
<p>routine 常规；惯例；例行公事</p>
<p>commitment 承诺；投入，奉献；花费；已承诺的事</p>
<p>cast 全体演员；扮演；打石膏；投掷</p>
<h2>词汇</h2>
<h3>rob</h3>
<p>robe：古代抢劫所得的主要掠夺品，robe 长袍和 rob 抢劫，拼写接近，来自日耳曼语，同源，由于古代打劫获得的主要战利品就是敌人身上的衣服，所以 robe 逐渐产生衣服的含义，通常表示高档的礼服，长袍</p>
<p>robber：n. 强盗</p>
<p>robbery：n. 抢劫</p>]]></summary>
    <content type="html"><![CDATA[<h2>高频词汇</h2>
<p>枚举很多常用的词汇，短语搭配等</p>
<p>routine 常规；惯例；例行公事</p>
<p>commitment 承诺；投入，奉献；花费；已承诺的事</p>
<p>cast 全体演员；扮演；打石膏；投掷</p>
<h2>词汇</h2>
<h3>rob</h3>
<p>robe：古代抢劫所得的主要掠夺品，robe 长袍和 rob 抢劫，拼写接近，来自日耳曼语，同源，由于古代打劫获得的主要战利品就是敌人身上的衣服，所以 robe 逐渐产生衣服的含义，通常表示高档的礼服，长袍</p>
<p>robber：n. 强盗</p>
<p>robbery：n. 抢劫</p>
<p>robe：长袍，礼服</p>
<p>bathrobe：浴衣，睡衣</p>
<p>brew：酿造，酝酿</p>
<h3>拟声词</h3>
<p>|                                      |                             |                                                                            |
|</p>
]]></content>
    <category term="英文"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">词根词缀</title>
    <id>https://blog.ruizhou.cf/english/vocabulary/root.html</id>
    <link href="https://blog.ruizhou.cf/english/vocabulary/root.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>常用词根词缀</h2>
<p>枚举很多常用的词根词缀</p>
<h3>agri-，agro-，agr- = field，land，土地，<strong>农业</strong></h3>
<p>agribusiness 农业经营</p>
<p>agriculture 农业</p>
<h3>ag- ar-</h3>
<p>朝，向，去或者弱化为强调；在字母 b，f，g，l，n，p，r，s，t 前同化为 ab-，af-，ag-，al-，an-，ap-，ar-，as-，at-，在 c，k，qu 前同化为 ac-，在 sc，sp，st 前缩写成 a-</p>
<h3>aqua- = water，水</h3>]]></summary>
    <content type="html"><![CDATA[<h2>常用词根词缀</h2>
<p>枚举很多常用的词根词缀</p>
<h3>agri-，agro-，agr- = field，land，土地，<strong>农业</strong></h3>
<p>agribusiness 农业经营</p>
<p>agriculture 农业</p>
<h3>ag- ar-</h3>
<p>朝，向，去或者弱化为强调；在字母 b，f，g，l，n，p，r，s，t 前同化为 ab-，af-，ag-，al-，an-，ap-，ar-，as-，at-，在 c，k，qu 前同化为 ac-，在 sc，sp，st 前缩写成 a-</p>
<h3>aqua- = water，水</h3>
<p>aquaria 水族馆；养鱼池</p>
<p>aquatic 水生动物</p>
<p>Aquarius 水瓶座♒️</p>
<h3>ars-，ard-，= to burn，燃烧 🔥</h3>
<p>ardent 热心的；激动的</p>
<p>ardor 热情，热忱</p>
<p>arson 纵火</p>
<h3>aug- = increase 增加</h3>
<p>augment 增加</p>
<h3>carb- 碳</h3>
<p>carbon 碳</p>
<p>carbohydrate：碳水化合物</p>
<h3>camp- = field，田野</h3>
<p>camp 露营</p>
<p>campaign 竞选运动；作战</p>
<p>campsite 营地</p>
<h3>cast = to throw，投</h3>
<p>broadcast 广播</p>
<p>cast 投掷；演员阵容</p>
<p>forecast 预测</p>
<h3>celebr-</h3>
<p>celebrant 主持仪式的人；教父</p>
<p>celebrate 庆祝，祝贺</p>
<p>celebratory 庆祝的</p>
<p>celebrity 名声；名人</p>
<h3>charg- = to load，装载，词源来自于car- 车</h3>
<p>charge 指控；费用；电荷；承担</p>
<p>overcharge 过度充电；超载</p>
<p>recharge 再充电；再控告</p>
<p>surcharge 追加罚款</p>
<p>undercharge 低的索价</p>
<p>uncharge 宣告无罪</p>
<p>discharge 解雇；<strong>离开</strong>；放电；退伍</p>
<h3>corona-，corolla-，= wreath，crown，花冠，花环</h3>
<p>coronavirus 管状病毒🦠</p>
<h3>curt-，scr-，shr- = short，短，切开，分开</h3>
<p>curt 简略的，简短的</p>
<p>curtail 缩减</p>
<p>shred 碎片；极少量</p>
<p>scar 疤痕</p>
<h3>de- 从离开，从向下，表没有，相反；另外由于离开，因而表示整个，表示加强</h3>
<p>加强的：depict 描写</p>
<p>despite 轻视；prep 尽管（spic-，spect- = look，see，看）</p>
<h3>dict- = say，declare，说话，断言</h3>
<p>indict 起诉</p>
<p>diction：措辞；用语</p>
<p>interdict：禁止；封锁</p>
<p>predict：预言</p>
<p>dedicate：贡献</p>
<h3>dig- 挖，刺</h3>
<p>dig 挖</p>
<p>digging n. 挖掘</p>
<p>dike 筑堤防护</p>
<p>digger 挖掘者</p>
<h3>dom-，domin-，tam- = house，屋，家，控制</h3>
<p>condominium 共同统治</p>
<p>dimain 领域，领土</p>
<h3>dom- =hourse，家</h3>
<p>domain</p>
<h3>duct- to lead = 带领，带来</h3>
<p>duct n. 管道，导体；vt. 通过管道传输</p>
<p>conduct，指导，指挥；传导；induct，指引，使入门；subduct，减去，拿掉</p>
<h3>e- 从离开，从向外</h3>
<h3>estim- = value，价值</h3>
<p>esteem 尊敬；尊重；好评</p>
<p>estimable 可尊敬的</p>
<p>estimate 估计，判断</p>
<h3>im- 同 in-，在内，进入</h3>
<h3>pro- 向前，变体 pur-，por-</h3>
<h3>sub-，sus 从上到下，子的，副手，下一级</h3>
<p>subhealth 亚健康</p>
<p>suspect 被怀疑</p>
<p>suspend 悬浮</p>
<p>suspense 悬念，暂停</p>
<p>sustain 在下面握住，支撑，承受</p>
<h3>sur- = over，above，beyond，in addition，超过，在上面，和 super-同源</h3>
<p>surpass 超过</p>
<p>surplus 过剩</p>
<h3>spire- = breathe，呼吸，引申为渴望</h3>
<p>aspire 渴望；立志</p>
<p>conspire 共谋；协力；阴谋</p>
<p>inspire 进入渴望；鼓励；鼓舞</p>
<p>perspire 全身呼吸，出汗</p>
<p>respire 呼吸</p>
<p>suspire 向下呼吸，叹气</p>
<h3>grav-，griev- = heavy 重</h3>
<p>grief 悲伤；不幸</p>
<p>grieve 使伤心；使悲伤</p>
<p>aggrieve 使委屈；使悲痛</p>
<h3>spic-，spect- = look，see，看（源自拉丁语 specere）</h3>
<p>aspect 方面</p>
<p>inspect 检测</p>
<p>despict 轻视；尽管</p>
<h3>scent- = climb 爬</h3>
<h3>proach- = near 接近</h3>
<p>approach：n. 办法；vt. 来临；靠近；商量，征求</p>
<p>reproach 过分靠近就是责骂的意思</p>
<p>rapprochement</p>
<h3>merg- 沉，没</h3>
<p>如 merge merg 沉，e 向外，一个向下一个向外，就是合并的意思</p>
<p>emerge e 出现，merge 沉没，不是出现合并的东西，而是出现沉没的东西，表示浮现</p>
<h3>gran-，grain- = grain，颗粒</h3>
<p>grain 谷粒；颗粒</p>
<p>granular 颗粒的</p>
<h3>tract- = draw 拉</h3>
<p>attract：吸引</p>
<p>contract：合同</p>
<p>detract：减去，贬低；转移，分散</p>
<h3>tir- = draw 拉</h3>
<p>retire 退休</p>
<h3>seism-，seismo- = earthquake，地震，来自希腊语 seismos/seiein 地震，晃动</h3>
<p>seismic：地震的，重大的</p>
<h3>sur- = over，above，beyond，in addtion，超过，在上面，来自拉丁语，和 supre- 同源</h3>
<p>surpass 超过，凌驾</p>
<h3>tempor- = time，age，season，表时间或者时间引起的现象</h3>
<p>temporary 暂时的，临时的</p>
<p>contemporary 属于同一时期的</p>
<p>temporize 拖延；妥协；迎合潮流</p>
<h3>hydr- = water 水，九头蛇海德拉（Hydra）</h3>
<p>hydra 九头蛇，难以根除的祸害</p>
<p>hydrant 水龙头；消防栓</p>
<p>hydrate 水合物</p>
<p>hydration 水合作用</p>
<p>dehydrate 脱水</p>
<p>dehydration 脱水</p>
<h3>feder- = league，联盟</h3>
<p>federal 联邦的</p>
<p>confederate 同盟者，同盟国</p>
<p>confederacy 联盟</p>
<h3>tract- = draw，拉</h3>
<p>attract 吸引</p>
<p>contract 合约</p>
<p>detract 减去，贬低</p>
<p>distract 转移</p>
<p>extract 榨取；摘录</p>
<p>subtract 减法</p>
<h3>ornitho- = bird，鸟</h3>
<p>ornithology 鸟类学</p>
<h3>semble- = alike，same，相似的，一样的</h3>
<p>assemble 集合（as- 不断，朝着）</p>
<p>dissemble 掩饰，假装不知道</p>
<h3>sphere = globe，球</h3>
<p>biosphere 生物圈</p>
<p>atmosphere 大气层</p>
<h3>sult- 闷热</h3>
<p>sultry 闷热的</p>
<p>sultrily 闷热地</p>
<p>swelter vi 闷热；vt. 使闷热</p>
<h3>mal- = bad，wretched，坏，恶</h3>
<p>malady 疾病</p>
<p>dismal 阴沉的</p>
<h3>herb- = grass，草</h3>
<p>herbage 草本，草的柔软部分</p>
<p>herbivore 食草动物</p>
<h3>mess-，mit-，miss- = send，cast，送，放出</h3>
<p>demisson 辞职；放弃</p>
<p>emission 排放</p>
<p>remiss 不送出去，怠慢的</p>
<p>remissive 宽恕的；减轻的</p>
<p>submission 屈服；服从</p>
<h3>tain-，ten-，tin- = hold，拿住</h3>
<p>contain 包含</p>
<p>detain 扣留</p>
<p>entertain 招待；娱乐（enter 在中间，相互，内）</p>
<p>maintain 维持</p>
<p>obtain 获得（ob- 加强）</p>
<p>retain 保持</p>
<p>sustain 支撑，忍受，承受</p>
<h3>tend- = stretch，伸展</h3>
<p>contend 奋斗，竞争</p>
<p>contender 竞争者</p>
<h3>thus- = theo，神</h3>
<p>enthusiast 热心玩家；狂热者</p>
<p>theology 神学</p>
<h3>pens- = hang，悬挂</h3>
<p>suspend 悬，吊，使悬浮</p>
<p>suspense 悬疑，焦虑</p>
<p>suspension 悬挂；暂停</p>
<h3>scribe- = write，写</h3>
<p>subscribe 订阅（下面 + 写）</p>
<p>transcribe 抄写，转录（跨越 + 写）</p>
<p>describe 描述（向下 + 写）</p>
<h3>sper-，spair = hope</h3>
<p>prosper 繁荣</p>
<p>despair 绝望</p>
<h3>ministr- 部长，管理</h3>
<p>ministry 部长</p>
<p>minister 部长，牧师</p>
<p>administer 管理员</p>
<h3>sume- = take，拿，取</h3>
<p>assume 假装；承担（完全不确定）</p>
<p>consume 消费</p>
<p>resume 恢复</p>
<p>subsume 把..归类</p>
<p>presume 假定，推测（几乎确定）</p>
<h3>sper- = hope，希望</h3>
<p>despair 绝望</p>
<p>desperate 令人绝望的；不顾一切的</p>
<p>prosper 繁荣</p>
<h3>maj-，may-，magn-，max- = great，大，伟大</h3>
<p>major 主要的；大部分的；主修课；成年人</p>
<p>magnate 大官，大亨，巨头</p>
<p>magnific 壮丽的；宏伟的</p>
<p>mayor 市长</p>
<h3>mine 挖掘</h3>
<p>undermine 往下挖，渐渐破坏</p>
<p>mining 采矿</p>
<p>mineral 矿物；矿物的</p>
<h3>fer-，fero- = wild，野</h3>
<p>feral 凶猛的，野兽的</p>
<p>ferity 野性</p>
<p>ferocious 残忍的</p>
<p>fierce 凶猛的</p>
<h3>gross- = greate，大</h3>
<p>engross 独占；使全神贯注</p>
<h3>lex-，lexic- = word，speech，词汇</h3>
<p>lexical 字典的</p>
<p>lexicon 词汇</p>
<p>lexicology 词汇学</p>
<h3>merch- = trade，交易</h3>
<p>mercantile 商业的；商人的</p>
<p>mercer 绸缎商人</p>
<p>mercy 仁慈；宽恕</p>
<p>merchandise 商品，货物，周边</p>
<h3>vol-，volv-，volut- = roll，turn，卷，转</h3>
<p>evolution 进化</p>
<p>involute 内卷的，复杂的</p>
<p>involution 内卷；回旋</p>
<p>revolution 革命，改革</p>
<h3>radic- = root，根</h3>
<p>eradicate 根除</p>
<p>radical 根本的；基本的</p>
<h3>surge- = to rise，升起</h3>
<p>resurge 复活</p>
<p>surge 汹涌澎湃；猛冲</p>
<h3>mand-，mend- = order，命令</h3>
<p>command 命令</p>
<p>commend 委托，嘉奖</p>
<p>demand 要求</p>
<p>recommend 推荐，介绍</p>
<p>mandate 命令</p>
<p>mandatory 命令的；托管的</p>
<h3>ment- = mind，思考，神智</h3>
<p>dement 使发狂</p>
<h3>vast- = empty，空</h3>
<p>devastate 毁坏</p>
<p>evacuate 疏散；排泄</p>
<p>evacuant 排泄的</p>
<p>vacuity 空虚；无意义的事</p>
<p>vacant 空的；空白的</p>
<h3>vestig- = foot print，track，脚印，踪迹</h3>
<p>investigate 调查</p>
<p>vestige 痕迹；遗迹；残余</p>
<h3>ven，vent- = come，来</h3>
<p>advent 来到，来临</p>
<p>convent 女修道会</p>
<p>convene 集合；召集</p>
<p>event 事件</p>
<p>invent 发明；创作</p>
<p>prevent 阻止；妨碍</p>
<p>venture 冒险</p>
<p>avenue 大街</p>
<p>revenue 收益</p>
<p>supervene 意外发生</p>
<p>venue 犯罪地点</p>
<h3>vice- 副；代理</h3>
<p>vice-chairman 副主席</p>
<p>vice-governor 副州长</p>
<p>vice- president 副总裁</p>
<h3>vit-，vive- = life，生命</h3>
<p>revive 使复苏</p>
<p>survive 幸存</p>
<p>vital 生命的</p>
<p>vivid 生动的</p>
<p>vivify 使生动</p>
]]></content>
    <category term="英文"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">基础</title>
    <id>https://blog.ruizhou.cf/ai/stable-diffusion/base.html</id>
    <link href="https://blog.ruizhou.cf/ai/stable-diffusion/base.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>资料</h2>
<p>https://space.bilibili.com/1640056/video</p>
<p>https://space.bilibili.com/250989068/video</p>
<p>https://space.bilibili.com/435304165/video</p>
<h2>后缀</h2>
<ol>
<li>ckpt</li>
<li>pt</li>
<li>pth</li>
<li>safetensors</li>
<li>webui 特殊模型保存方法：PNG、WEBP 图片格式</li>
</ol>
<h3>大模型</h3>
<p>常见格式为 <strong>ckpt</strong>，一个字，大。</p>]]></summary>
    <content type="html"><![CDATA[<h2>资料</h2>
<p>https://space.bilibili.com/1640056/video</p>
<p>https://space.bilibili.com/250989068/video</p>
<p>https://space.bilibili.com/435304165/video</p>
<h2>后缀</h2>
<ol>
<li>ckpt</li>
<li>pt</li>
<li>pth</li>
<li>safetensors</li>
<li>webui 特殊模型保存方法：PNG、WEBP 图片格式</li>
</ol>
<h3>大模型</h3>
<p>常见格式为 <strong>ckpt</strong>，一个字，大。</p>
<p>大小在 GB 级别，常见有 2G、4G、7G 模型。</p>
<p>在 models/stable-diffsuion/</p>
<h3>小模型</h3>
<h4>embedding 模型</h4>
<p>常见格式为 <strong>pt</strong>、png 图片、webp 图片。大小一般在 KB 级别。</p>
<p>在 embeddings/</p>
<p>可训练：画风 √ 人物 √ | 推荐训练：<strong>人物</strong></p>
<p>配置要求：显存 6GB 以上。</p>
<p>训练速度：中等 | 训练难度：中等</p>
<p>综合评价：☆☆☆</p>
<p>评价：比较基础的一种，局限性较大，但是可以用</p>
<h4>hypernetwork</h4>
<p>常见格式为 <strong>pt</strong>。大小一般在几十兆到几百兆不等。由于这种模型可以自定义的参数非常之多，一些离谱的 Hypernetwork 模型可以达到 GB 级别。</p>
<p>在 hypernetworks/</p>
<p>可训练：画风 √ 人物 √ | 推荐训练：<strong>画风</strong></p>
<p>配置要求：显存 6GB 以上。</p>
<p>训练速度：中等 | 训练难度：难</p>
<p>综合评价：☆☆</p>
<p>评价：非常强大的一种模型，但是想训练好很难，不推荐训练。</p>
<h4>LoRA</h4>
<p>常见格式为 <strong>pt</strong>、<strong>ckpt</strong>。大小一般在 8mb~144mb 不等。</p>
<p>在 models/lora/</p>
<p>可训练：画风? 人物 √ 概念 √ | 推荐训练：<strong>人物</strong></p>
<p>配置要求：显存 8GB 以上。</p>
<p>训练速度：快 | 训练难度：简单</p>
<p>综合评价：☆☆☆☆</p>
<p>评价：非常好训练 好出效果的人物训练，配置要求低，图要求少。</p>
<p>备注：LoRA 本身也应该归类到 Dreambooth，但是这里还是分开讲。</p>
<h4>VAE 模型</h4>
<p>常见格式为 <strong>pt</strong></p>
<p>在 models/VAE/</p>
<h4>Dreambooth / Native Train</h4>
<p>可训练：画风 √ 人物 √ 概念 √ | 推荐训练：Dreambooth 推荐人物，Native Train 推荐画风</p>
<p>配置要求：显存 12GB 以上。</p>
<p>训练速度：慢 | 训练难度：可以简单可以很难</p>
<p>综合评价：☆☆☆☆☆</p>
<p>评价：微调大模型，非常强大的训练方式，但是使用上会不那么灵活，推荐训练画风用，人物使用 LoRA 训练。</p>
<h2>训练</h2>
<p>image _ repeat _ epoch / batch_size = total steps</p>
<p>10 张图 _ 20 次 _ 10 个循环 / 2 并行 = 1000 总训练步数</p>
<p>batch_size 和显存大小有关</p>
<p>两者乘积固定的时候，repeat 比 epoch 会更加化时间</p>
<p>20 * 5 = 100，花费 51min</p>
<p>100 * 1 = 100，花费 90min</p>
<p>多 epoch 方案的拟合性更好</p>
<p>![repeat vs epoch](./assets/repeat vs epoch.png)</p>
<p>![lr vs lr](./assets/lr vs lr.png)</p>
<h3>学习率</h3>
<figure><figcaption>lr</figcaption></figure>
<h3>DIM</h3>
<p>表示神经网络的维度，维度越大，模型的表达能力越强，模型的体积也会越大。</p>
<p>network_dimension</p>
<ul>
<li>128，140MB+（现实世界实物，风景，人物 &gt;128）</li>
<li>64，70MB+（人物 32-128）</li>
<li>32，40MB+（二次元）</li>
</ul>
<h3>Optimizer</h3>
<p>AdamW8bit</p>
<p>Dadptation</p>
<p>Lion</p>
<h2>参数建议</h2>
<figure><figcaption>recommend</figcaption></figure>
<h3>案例</h3>
<figure><figcaption>case1</figcaption></figure>
<figure><figcaption>case2</figcaption></figure>
<figure><figcaption>case3</figcaption></figure>
<h3>tag</h3>
<p>期望固化的模型特征，不要打 tag，这样使用中就生存固定特征了，而不会被改变</p>
]]></content>
    <category term="ai"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">文档资料</title>
    <id>https://blog.ruizhou.cf/ai/stable-diffusion/doc.html</id>
    <link href="https://blog.ruizhou.cf/ai/stable-diffusion/doc.html"/>
    <updated>2024-01-28T08:14:42.000Z</updated>
    <summary type="html"><![CDATA[<p>https://lilianweng.github.io/posts/2021-07-11-diffusion-models/</p>
]]></summary>
    <content type="html"><![CDATA[<p>https://lilianweng.github.io/posts/2021-07-11-diffusion-models/</p>
]]></content>
    <category term="ai"/>
    <published>2024-01-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Angular</title>
    <id>https://blog.ruizhou.cf/code/angular/</id>
    <link href="https://blog.ruizhou.cf/code/angular/"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>Angular 是 Google 官方在 2016 年 9 月出品的一款框架。</p>
<p>框架强制 Typescript，更倾向于大型项目。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Angular 是 Google 官方在 2016 年 9 月出品的一款框架。</p>
<p>框架强制 Typescript，更倾向于大型项目。</p>
<!-- more -->
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>2023 年 Angular 挺凉的了</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">Angular 的优点</p>
<ol>
<li>零配置 CLI，享受到 webpack 每次升级的好处，但是不用关心任何 webpack config</li>
<li>官方提供所有的必须组件(http、router、animation、ssr、e2e 等等)，在 2000+ 内部应用测试之后才会发布，基本零 bug，并且保证在未来很多年内一直保证兼容升级</li>
<li>提供官方的应用市场和 low code 生成工具，一行命令就可以生成 Dashboard 和各种页面</li>
<li>框架 100% 由 TypeScript 开发，并且生态内的所有三方库都是(只能用) TypeScript 开发</li>
<li>内置 RxJS，并且从 View 的操作到 Http 全部都是 Reactive 的，可以随意组合</li>
<li>每次升级只要运行一行命令就会帮您修复所有的可能的不兼容问题</li>
<li>通过 Template 隔绝底层的 Compiler 升级成本，Compiler 迭代了三代，性能不断提升，bundle size 不断减少，但是用户代码一行不用改</li>
</ol>
</div>
<p>Angular 写起来其实是有诸多限制的，但是对企业的大型项目来说，这些限制与规范会带来多人协同开发和后期维护上的简便。</p>
<p>如果您在前端框架上追求的更多是: 升级稳定、标准统一、长期维护成本低、协作方便，不需要频繁重构，Angular 的使用感受应该还是相当不错的，这也是为什么目前大量企业用户会选择 Angular 的原因。</p>
<h2>相关链接</h2>
<ul>
<li><a href="https://angular.io/docs" target="_blank" rel="noopener noreferrer">官方文档</a></li>
<li><a href="https://angular.cn/docs" target="_blank" rel="noopener noreferrer">中文文档</a></li>
</ul>
]]></content>
    <category term="前端"/>
    <published>2020-05-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">应用基础知识</title>
    <id>https://blog.ruizhou.cf/code/android/base.html</id>
    <link href="https://blog.ruizhou.cf/code/android/base.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>本章包含了一些关于 Android 开发的基础内容。</p>
]]></summary>
    <content type="html"><![CDATA[<p>本章包含了一些关于 Android 开发的基础内容。</p>
<!-- more -->
<p>您可以使用 Kotlin、Java 和 C++ 语言编写 Android 应用。Android SDK 工具会将您的代码连同任何数据和资源文件编译成一个 APK(Android 软件包)，即带有 <code>.apk</code> 后缀的归档文件。一个 APK 文件包含 Android 应用的所有内容，它也是 Android 设备用来安装应用的文件。</p>
<p>每个 Android 应用都处于各自的安全沙盒中，并受以下 Android 安全功能的保护:</p>
<ul>
<li>
<p>Android 操作系统是一种多用户 Linux 系统，其中的每个应用都是一个不同的用户；
默认情况下，系统会为每个应用分配一个唯一的 Linux 用户 ID(该 ID 仅由系统使用，应用并不知晓)。系统会为应用中的所有文件设置权限，使得只有分配给该应用的用户 ID 才能访问这些文件；</p>
</li>
<li>
<p>每个进程都拥有自己的虚拟机 (VM)，因此应用代码独立于其他应用而运行。</p>
</li>
<li>
<p>默认情况下，每个应用都在其自己的 Linux 进程内运行。Android 系统会在需要执行任何应用组件时启动该进程，然后当不再需要该进程或系统必须为其他应用恢复内存时，其便会关闭该进程。</p>
</li>
</ul>
<p>Android 系统实现了最小权限原则。换言之，默认情况下，每个应用只能访问执行其工作所需的组件，而不能访问其他组件。这样便能创建非常安全的环境，在此环境中，应用无法访问其未获得权限的系统部分。不过，应用仍可通过一些途径与其他应用共享数据以及访问系统服务:</p>
<ul>
<li>
<p>可以安排两个应用共享同一 Linux 用户 ID，在此情况下，二者便能访问彼此的文件。为节省系统资源，也可安排拥有相同用户 ID 的应用在同一 Linux 进程中运行，并共享同一 VM。应用还必须使用相同的证书进行签名。</p>
</li>
<li>
<p>应用可以请求访问设备数据(如用户的联系人、短信消息、可装载存储装置(SD 卡)、相机、蓝牙等)的权限。用户必须明确授予这些权限。如需了解详细信息，请参阅使用系统权限。</p>
</li>
</ul>
<h2>应用组件</h2>
<p>应用组件是 Android 应用的基本构建块。每个组件都是一个入口点，系统或用户可通过该入口点进入您的应用。有些组件会依赖于其他组件。</p>
<p>共有四种不同的应用组件类型:</p>
<ul>
<li>Activity</li>
<li>服务</li>
<li>广播接收器</li>
<li>内容提供程序</li>
</ul>
<p>每种类型都有不同的用途和生命周期，后者会定义如何创建和销毁组件。</p>
<h3>Activity</h3>
<p>Activity 是与用户交互的入口点。它表示拥有界面的单个屏幕。例如，电子邮件应用可能有一个显示新电子邮件列表的 Activity、一个用于撰写电子邮件的 Activity 以及一个用于阅读电子邮件的 Activity。尽管这些 Activity 通过协作在电子邮件应用中形成一种紧密结合的用户体验，但每个 Activity 都独立于其他 Activity 而存在。因此，其他应用可以启动其中任何一个 Activity(如果电子邮件应用允许)。例如，相机应用可以启动电子邮件应用内用于撰写新电子邮件的 Activity，以便用户共享图片。Activity 有助于完成系统和应用程序之间的以下重要交互:</p>
<ul>
<li>
<p>追踪用户当前关心的内容(屏幕上显示的内容)，以确保系统继续运行托管 Activity 的进程。</p>
</li>
<li>
<p>了解先前使用的进程包含用户可能返回的内容(已停止的 Activity)，从而更优先保留这些进程。</p>
</li>
<li>
<p>帮助应用处理终止其进程的情况，以便用户可以返回已恢复其先前状态的 Activity。</p>
</li>
<li>
<p>提供一种途径，让应用实现彼此之间的用户流，并让系统协调这些用户流。(此处最经典的示例是共享。)</p>
</li>
</ul>
<p>您需将 Activity 作为 Activity 类的子类来实现。如需了解有关 Activity 类的更多信息，请参阅 Activity 开发者指南。</p>
<h2>服务</h2>
<p>服务是一个通用入口点，用于因各种原因使应用在后台保持运行状态。它是一种在后台运行的组件，用于执行长时间运行的操作或为远程进程执行作业。服务不提供界面。例如，当用户使用其他应用时，服务可能会在后台播放音乐或通过网络获取数据，但这不会阻断用户与 Activity 的交互。诸如 Activity 等其他组件可以启动服务，使该服务运行或绑定到该服务，以便与其进行交互。事实上，有两种截然不同的语义服务可以告知系统如何管理应用: 已启动服务会告知系统使其运行至工作完毕。此类工作可以是在后台同步一些数据，或者在用户离开应用后继续播放音乐。在后台同步数据或播放音乐也代表了两种不同类型的已启动服务，而这些服务可以修改系统处理它们的方式:</p>
<ul>
<li>
<p>音乐播放是用户可直接感知的服务，因此，应用会向用户发送通知，表明其希望成为前台，从而告诉系统此消息；在此情况下，系统明白它应尽全力维持该服务进程运行，因为进程消失会令用户感到不快。</p>
</li>
<li>
<p>通常，用户不会意识到常规后台服务正处于运行状态，因此系统可以更自由地管理其进程。如果系统需要使用 RAM 来处理用户更迫切关注的内容，则其可能允许终止服务(然后在稍后的某个时刻重启服务)。</p>
</li>
</ul>
<p>绑定服务之所以能运行，原因是某些其他应用(或系统)已表示希望使用该服务。从根本上讲，这是为另一个进程提供 API 的服务。因此，系统会知晓这些进程之间存在依赖关系，所以如果进程 A 绑定到进程 B 中的服务，系统便知道自己需使进程 B(及其服务)为进程 A 保持运行状态。此外，如果进程 A 是用户关心的内容，系统随即也知道将进程 B 视为用户关心的内容。由于存在灵活性(无论好坏)，服务已成为非常有用的构建块，并且可实现各种高级系统概念。动态壁纸、通知侦听器、屏幕保护程序、输入方法、无障碍功能服务以及众多其他核心系统功能均可构建为在其运行时由应用实现、系统绑定的服务。</p>
<p>您需将服务作为 Service 的子类来实现。如需了解有关 Service 类的更多信息，请参阅服务开发者指南。</p>
<h2>广播接收器</h2>
<p>借助广播接收器组件，系统能够在常规用户流之外向应用传递事件，从而允许应用响应系统范围内的广播通知。由于广播接收器是另一个明确定义的应用入口，因此系统甚至可以向当前未运行的应用传递广播。例如，应用可通过调度提醒来发布通知，以告知用户即将发生的事件。而且，通过将该提醒传递给应用的广播接收器，应用在提醒响起之前即无需继续运行。许多广播均由系统发起，例如，通知屏幕已关闭、电池电量不足或已拍摄照片的广播。应用也可发起广播，例如，通知其他应用某些数据已下载至设备，并且可供其使用。尽管广播接收器不会显示界面，但其可以创建状态栏通知，在发生广播事件时提醒用户。但广播接收器更常见的用途只是作为通向其他组件的通道，旨在执行极少量的工作。例如，它可能会根据带 JobScheduler 的事件调度 JobService 来执行某项工作
广播接收器作为 BroadcastReceiver 的子类实现，并且每条广播都作为 Intent 对象进行传递。如需了解详细信息，请参阅 BroadcastReceiver 类。</p>
<h2>内容提供程序</h2>
<p>内容提供程序管理一组共享的应用数据，您可以将这些数据存储在文件系统、SQLite 数据库、网络中或者您的应用可访问的任何其他持久化存储位置。其他应用可通过内容提供程序查询或修改数据(如果内容提供程序允许)。例如，Android 系统可提供管理用户联系人信息的内容提供程序。因此，任何拥有适当权限的应用均可查询内容提供程序(如 <code>ContactsContract.Data</code>)，以读取和写入特定人员的相关信息。我们很容易将内容提供程序看作数据库上的抽象，因为其内置的大量 API 和支持时常适用于这一情况。但从系统设计的角度看，二者的核心目的不同。对系统而言，内容提供程序是应用的入口点，用于发布由 URI 架构识别的已命名数据项。因此，应用可以决定如何将其包含的数据映射到 URI 命名空间，进而将这些 URI 分发给其他实体。反之，这些实体也可使用分发的 URI 来访问数据。在管理应用的过程中，系统可以执行以下特殊操作:</p>
<ul>
<li>
<p>分配 URI 无需应用保持运行状态，因此 URI 可在其所属的应用退出后继续保留。当系统必须从相应的 URI 检索应用数据时，系统只需确保所属应用仍处于运行状态。</p>
</li>
<li>
<p>这些 URI 还会提供重要的细粒度安全模型。例如，应用可将其所拥有图像的 URI 放到剪贴板上，但将其内容提供程序锁定，以便其他应用程序无法随意访问它。当第二个应用尝试访问剪贴板上的 URI 时，系统可允许该应用通过临时的 URI 授权来访问数据，这样便只能访问 URI 后面的数据，而非第二个应用中的其他任何内容。</p>
</li>
</ul>
<p>内容提供程序也适用于读取和写入您的应用不共享的私有数据。</p>
<p>内容提供程序作为 ContentProvider 的子类实现，并且其必须实现一组标准 API，以便其他应用能够执行事务。如需了解详细信息，请参阅内容提供程序开发者指南。</p>
]]></content>
    <category term="Android"/>
    <published>2020-04-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">应用资源概览</title>
    <id>https://blog.ruizhou.cf/code/android/resource.html</id>
    <link href="https://blog.ruizhou.cf/code/android/resource.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>资源是指代码使用的附加文件和静态内容，例如位图、布局定义、界面字符串、动画说明等。</p>
]]></summary>
    <content type="html"><![CDATA[<p>资源是指代码使用的附加文件和静态内容，例如位图、布局定义、界面字符串、动画说明等。</p>
<!-- more -->
<p>您应始终外部化应用资源(例如图像和代码中的字符串)，以便单独对其进行维护。此外，您还应为特定设备配置提供备用资源，方法是将其进行分组并放入专门命名的资源目录中。在运行时，Android 会根据当前配置使用合适的资源。例如，您可能需根据屏幕尺寸提供不同的界面布局，或根据语言设置提供不同的字符串。</p>
<p>外部化应用资源后，您便可使用在项目 R 类中生成的资源 ID 来访问这些资源。本文档会介绍如何对 Android 项目中的资源进行分组，如何为特定的设备配置提供备用资源，以及如何从您的应用代码或其他 XML 文件访问这些资源。</p>
<h2>分组资源类型</h2>
<p>您应将各类资源放入项目 <code>res/</code> 目录的特定子目录中。例如，以下是一个简单项目的文件层次结构:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>MyProject/</span></span>
<span class="line"><span>  src/</span></span>
<span class="line"><span>    MyActivity.java</span></span>
<span class="line"><span>  res/</span></span>
<span class="line"><span>    drawable/</span></span>
<span class="line"><span>      graphic.png</span></span>
<span class="line"><span>    layout/</span></span>
<span class="line"><span>      main.xml</span></span>
<span class="line"><span>      info.xml</span></span>
<span class="line"><span>    mipmap/</span></span>
<span class="line"><span>      icon.png</span></span>
<span class="line"><span>    values/</span></span>
<span class="line"><span>      strings.xml</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此示例所示，<code>res/</code> 目录包含所有资源(在子目录中): 一个图像资源、两个布局资源、启动器图标的 <code>mipmap/</code> 目录以及一个字符串资源文件。资源目录名称非常重要，具体说明请见表 1。</p>
<p>表 1. 项目 <code>res/</code> 目录中支持的资源目录。</p>
<p>| 目录      | 资源类型                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
|</p>
]]></content>
    <category term="Android"/>
    <published>2020-04-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">后端开发</title>
    <id>https://blog.ruizhou.cf/code/back-end/</id>
    <link href="https://blog.ruizhou.cf/code/back-end/"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>后端入门</h2>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>2023 年后端还是 Java 比较多</p>
</div>
<h3>PHP</h3>
<p>PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言，免费，并且使用非常广泛。PHP (全称 Hypertext Preprocessor，即超文本预处理器)是一种通用开源脚本语言。</p>
<p>PHP 手册:</p>
<ul>
<li>
<p><a href="http://www.w3school.com.cn/php/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></p>
</li>
<li>
<p><a href="https://www.runoob.com/php/php-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>后端入门</h2>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>2023 年后端还是 Java 比较多</p>
</div>
<h3>PHP</h3>
<p>PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言，免费，并且使用非常广泛。PHP (全称 Hypertext Preprocessor，即超文本预处理器)是一种通用开源脚本语言。</p>
<p>PHP 手册:</p>
<ul>
<li>
<p><a href="http://www.w3school.com.cn/php/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></p>
</li>
<li>
<p><a href="https://www.runoob.com/php/php-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></p>
</li>
</ul>
<p>如果服务器访问数量不大的情况下，PHP 作为一种门槛低，开发方便的脚本语言，还是挺受到欢迎的。</p>
<h3>ASP</h3>
<p>ASP 文件可包含文本、HTML 标签和脚本。ASP 文件中的脚本可在服务器上执行。由于 ASP 在服务器上运行，浏览器无需支持客户端脚本就可以显示 ASP 文件!</p>
<ul>
<li>
<p><a href="http://www.w3school.com.cn/asp/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></p>
</li>
<li>
<p><a href="https://www.runoob.com/asp/asp-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></p>
</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>更多详情有待日后补充</p>
</div>
]]></content>
    <category term="后端"/>
    <published>2019-09-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">基础介绍</title>
    <id>https://blog.ruizhou.cf/code/basic/</id>
    <link href="https://blog.ruizhou.cf/code/basic/"/>
    <updated>2024-07-24T03:08:09.000Z</updated>
    <summary type="html"><![CDATA[<p>这些是一些最为基础的内容，是后来补充进博客中的，供访客查阅。</p>
]]></summary>
    <content type="html"><![CDATA[<p>这些是一些最为基础的内容，是后来补充进博客中的，供访客查阅。</p>
<!-- more -->
]]></content>
    <category term="基础"/>
    <published>2019-12-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">持续集成</title>
    <id>https://blog.ruizhou.cf/code/basic/ci.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/ci.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>持续集成 (Continuous Integration) 指的是，频繁地 (一天多次) 将代码集成到主干，每次集成都通过自动化的构建 (包括编译，发布，自动化测试) 来验证，从而尽早地发现集成错误。</p>
<p>持续集成的目的让产品可以快速迭代，同时还能保持高质量。就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整，使得问题不会放大到其他部分和后面的环节。</p>
]]></summary>
    <content type="html"><![CDATA[<p>持续集成 (Continuous Integration) 指的是，频繁地 (一天多次) 将代码集成到主干，每次集成都通过自动化的构建 (包括编译，发布，自动化测试) 来验证，从而尽早地发现集成错误。</p>
<p>持续集成的目的让产品可以快速迭代，同时还能保持高质量。就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整，使得问题不会放大到其他部分和后面的环节。</p>
<!-- more -->
<h2>介绍</h2>
<p>持续集成 (CI) 是一种需要频繁提交代码到共享仓库的软件实践。频繁提交代码能较早检测到错误，减少在查找错误来源时开发者需要调试的代码量。 频繁的代码更新也更便于从软件开发团队的不同成员合并更改。 这对开发者非常有益，他们可以将更多时间用于编写代码，而减少在调试错误或解决合并冲突上所花的时间。</p>
<p>提交代码到仓库时，可以持续创建并测试代码，以确保提交未引入错误。 您的测试可以包括代码语法检查 (检查样式格式) 、安全性检查、代码覆盖率、功能测试及其他自定义检查。</p>
<p>创建和测试代码需要服务器。 您可以在推送代码到仓库之前在本地创建并测试更新，也可以使用 CI 服务器检查仓库中的新代码提交。</p>
<h3>要点</h3>
<p>它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p>
<h3>优点</h3>
<ol>
<li>
<p>提高开发效率</p>
</li>
<li>
<p>快速发现并定位 Bugs</p>
</li>
<li>
<p>更快速发布更新</p>
</li>
</ol>
]]></content>
    <category term="基础"/>
    <published>2021-02-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">计算机</title>
    <id>https://blog.ruizhou.cf/code/basic/computer.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/computer.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>计算机是一台机器，它按照用户的要求接收信息、存储数据、处理数据，然后再将处理结果输出(文字、图片、音频、视频等)。</p>
<p>计算机的核心就是: 接受使用者输入指令与资料，经由中央处理器的数学与逻辑单元运算处理后，以产生或储存成有用的资讯。</p>
]]></summary>
    <content type="html"><![CDATA[<p>计算机是一台机器，它按照用户的要求接收信息、存储数据、处理数据，然后再将处理结果输出(文字、图片、音频、视频等)。</p>
<p>计算机的核心就是: 接受使用者输入指令与资料，经由中央处理器的数学与逻辑单元运算处理后，以产生或储存成有用的资讯。</p>
<!-- more -->
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>计算机的定义比大家生活中的理解更加广泛。</p>
<p>一般商店用的简易型加减乘除计算机、手机、卫星定位系统(GPS)、提款机(ATM)、个人电脑、笔记本电脑(包括 notebook 与 netbook)，还有平板电脑与智能手机等，都叫计算机。</p>
</div>
<h2>组成</h2>
<p>计算机由硬件和软件组成。</p>
<h3>硬件</h3>
<p>硬件是计算机赖以工作的实体，包括显示器、键盘、鼠标、硬盘、CPU、主板等；</p>
<p>严格意义上讲，硬件可以分为三个部分:</p>
<ul>
<li>输入单元: 包括键盘、鼠标、读卡器、扫描器、手写板、触控屏等等一堆；</li>
<li>主机部分: 这个就是系统单元，被主机机壳保护住了，里面含有主板、CPU 、内存、硬盘等；</li>
<li>输出单元: 例如显示器、打印机等等</li>
</ul>
<p>计算机的重点在于中央处理器 (Central Processing Unit, CPU)，CPU 为一个具有特定功能的晶片，里头含有微指令集，如果您想要让主机进行什么特异的功能，就得要参考这颗 CPU 是否有相关内建的微指令集才可以。由于 CPU 的工作主要在于管理与运算，因此在 CPU 内又可分为两个主要的单元，分别是: 算数逻辑单元与控制单元。其中算数逻辑单元主要负责程式运算与逻辑判断，控制单元则主要在协调各周边元件与各单元间的工作。</p>
<p>既然 CPU 的重点是在进行运算与判断，那么要被运算与判断的资料是从哪里来的? CPU 读取的资料都是从内存来的! 内存内的资料则是从输入单元所传输进来! 而 CPU 处理完毕的资料也必须要先写回内存中，最后资料才从内存传输到输出单元。</p>
<h3>软件</h3>
<p>软件会按照用户的要求协调整台计算机的工作，比如 Windows、Linux、Mac OS、Android 等操作系统，以及 Office、QQ、迅雷、微信等应用程序。</p>
]]></content>
    <category term="基础"/>
    <published>2019-12-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">开发简介</title>
    <id>https://blog.ruizhou.cf/code/basic/debug.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/debug.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>开发是根据用户要求建造出合理程序的过程。过程一般是用某种程序设计语言来实现的。通常采用开发工具可以进行开发。</p>
]]></summary>
    <content type="html"><![CDATA[<p>开发是根据用户要求建造出合理程序的过程。过程一般是用某种程序设计语言来实现的。通常采用开发工具可以进行开发。</p>
<!-- more -->
<h2>小团队的具体分工</h2>
<p>对于小团队而言，经典的划分主要还分为三个板块</p>
<h3>UI 设计</h3>
<p>UI 即 User Interface (用户界面) 的简称。泛指用户的操作界面。UI 设计主要指界面的样式，美观程度。而使用上，对软件的人机交互、操作逻辑、界面美观的整体设计则是同样重要的另一个门道。</p>
<p>UI 可以让软件变得有个性有品味，还要让软件的操作变得舒适、简单、自由，充分体现软件的定位和特点。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在开发中，UI 设计主要指<strong>界面元素设计</strong>和<strong>交互设计</strong>两部分。</p>
</div>
<h3>前端开发</h3>
<p>前端开发是创建 Web 页面或 App 等前端界面呈现给用户的过程。前端开发通过 HTML，CSS 及 JavaScript 以及衍生出来的各种技术、框架、解决方案，来实现互联网产品的用户界面交互。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在开发中，前端开发直接<strong>使用 UI 设计提供的素材</strong>并参照 UI 设计提供的<strong>界面图与交互逻辑</strong>对其设想进行<strong>实现</strong>。</p>
</div>
<h3>后端开发</h3>
<p>根据正在处理的应用程序的大小和范围，后端开发人员要做的事情有很大的不同。在 Web 开发世界中，大多数后端开发人员从事于构建他们正在工作的应用程序背后的实际逻辑。其负责是网站后台逻辑的设计和实现还有用户及网站的数据的保存和读取。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在开发中，后端开发提供与其他服务器<strong>交互数据</strong>，为用户<strong>检索或转换数据</strong>并<strong>对用户数据加以收集与储存</strong>。</p>
</div>
<h2>公司开发</h2>
<div class="hint-container note">
<p class="hint-container-title">注</p>
<p>如果从职位细分的话，可以分出产品、交互、设计、开发、测试、策划、运营、维护等。</p>
</div>
<h3>产品设计</h3>
<p>产品设计对应产品经理，一般负责整体内容的构思，这一过程可能还包括用户和市场调研，确定要做的产品的功能、大致交互格式，也就是将成品的草稿设计出来，</p>
<h3>设计师</h3>
<p>设计师主要和产品设计合作，对一个 App 或者网站的大致页面布局、交互流程进行设计，并提供大致的页面切图，交互流程文档等。</p>
<h3>交互</h3>
<p>交互一般负责具体交互流程的细节，会逐步细化，考虑用户习惯，操作的步骤以及长度。综合考量整个交互设计对用户体验以及流失率、活跃程度的影响。</p>
<h3>开发</h3>
<p>在实际的大型公司发开产品的过程中，开发直接就可以拿到页面的设计图以及完善的交互流程文档，开发的工作就是去实现相应的页面与动画。</p>
<p>在这一过程中，前端和后端约定接口和参数，前端负责 App 或网站，后端负责服务器上的数据存储与服务。</p>
<h3>测试</h3>
<p>通常情况下，测试和开发会完全分开，测试人员在未参与开发的情况下模拟用户，在不同情况下进行测试，以确保产品不会出现问题。</p>
<p>这里常见的测试有风险测试、压力测试与异常行为测试等。测试软件是否有安全漏洞，是否可承担大量的访问以及是否在一些非常规交互下可以正常工作。</p>
<h3>运营</h3>
<p>一般一款产品需要宣发和后续的持续运营，一般就通过偏市场方向的策划和运营进行相关设计，并指导开发进行相关活动的编写与上线。</p>
<h3>运维</h3>
<p>一款产品的后端存储可能需要定期的备份与维护，同时软件后端部署的服务器可能要定期的修复漏洞与升级，就需要有专门的人员来进行这一工作，</p>
]]></content>
    <category term="基础"/>
    <published>2019-12-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">计算机编码介绍</title>
    <id>https://blog.ruizhou.cf/code/basic/encoding.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/encoding.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>计算机，不能直接存储文字，存储的是编码。</p>
<p>计算机只能处理二进制的数据，也就是说计算机只能处理数字。如果要处理文本，比如: <code>0-9</code>、<code>a-z</code>、<code>A-Z</code>，就必须先把文本转换为数字才能处理。对于这些字符，可以定义一套规则来显示，比如: <code>A</code> 用 <code>110</code> 表示，<code>B</code> 用 <code>111</code> 表示等。</p>
]]></summary>
    <content type="html"><![CDATA[<p>计算机，不能直接存储文字，存储的是编码。</p>
<p>计算机只能处理二进制的数据，也就是说计算机只能处理数字。如果要处理文本，比如: <code>0-9</code>、<code>a-z</code>、<code>A-Z</code>，就必须先把文本转换为数字才能处理。对于这些字符，可以定义一套规则来显示，比如: <code>A</code> 用 <code>110</code> 表示，<code>B</code> 用 <code>111</code> 表示等。</p>
<!-- more -->
<h2>字符编码</h2>
<p>最早的计算机在设计时采用 8 个比特(bit)作为一个字节(byte)，所以，一个字节能表示的最大的整数就是 255(二进制 11111111=十进制 255)，如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是 <code>65535</code>，4 个字节可以表示的最大整数是 <code>4294967295</code>。</p>
<p>由于计算机是美国人发明的，因此，最早只有 127 个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为 ASCII 编码，比如大写字母 A 的编码是 65，小写字母 z 的编码是 122。</p>
<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和 ASCII 编码冲突，所以，中国制定了 GB2312 编码，用来把中文编进去。</p>
<p>您可以想得到的是，全世界有上百种语言，日本把日文编到 Shift_JIS 里，韩国把韩文编到 Euc-kr 里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>
<p>因此，Unicode 应运而生。Unicode 把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p>
<p>Unicode 标准也在不断发展，但最常用的是用两个字节表示一个字符(如果要用到非常偏僻的字符，就需要 4 个字节)。现代操作系统和大多数编程语言都直接支持 Unicode。</p>
<p>现在，捋一捋 ASCII 编码和 Unicode 编码的区别: ASCII 编码是 1 个字节，而 Unicode 编码通常是 2 个字节。</p>
<p>字母 A 用 ASCII 编码是十进制的 65，二进制的 01000001；</p>
<p>字符 0 用 ASCII 编码是十进制的 48，二进制的 00110000，注意字符 <code>'0'</code> 和整数 <code>0</code> 是不同的；</p>
<p>汉字中已经超出了 ASCII 编码的范围，用 Unicode 编码是十进制的 20013，二进制的 01001110 00101101。</p>
<p>您可以猜测，如果把 ASCII 编码的 A 用 Unicode 编码，只需要在前面补 0 就可以，因此，A 的 Unicode 编码是 00000000 01000001。</p>
<p>新的问题又出现了: 如果统一成 Unicode 编码，乱码问题从此消失了。但是，如果您写的文本基本上全部是英文的话，用 Unicode 编码比 ASCII 编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>
<p>所以，本着节约的精神，又出现了把 Unicode 编码转化为“可变长编码”的 UTF-8 编码。UTF-8 编码把一个 Unicode 字符根据不同的数字大小编码成 1-6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，只有很生僻的字符才会被编码成 4-6 个字节。如果您要传输的文本包含大量英文字符，用 UTF-8 编码就能节省空间:</p>
<p>| 字符 | ASCII    | Unicode           | UTF-8                      |
|</p>
]]></content>
    <category term="基础"/>
    <published>2019-12-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">文件名与文件扩展名</title>
    <id>https://blog.ruizhou.cf/code/basic/file-extension.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/file-extension.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>文件名</h2>
<p>文件名就是文件的名称，是为了方便人们区分计算机中的不同文件，而给每个文件设定一个指定的名称。</p>
<p>文件名不能包含控制字符: <code>&lt;</code> <code>&gt;</code> <code>/</code> <code>\</code> <code>|</code> <code>:</code> <code>"</code> <code>*</code> <code>?</code></p>
<h2>文件扩展名</h2>
<p>文件扩展名 (filename extension) 也称为文件的延伸文件名、后缀名，是操作系统用来标记文件类型的一种机制。通常来说，一个扩展名是跟在主文件名后面的，由一个分隔符分隔。</p>]]></summary>
    <content type="html"><![CDATA[<h2>文件名</h2>
<p>文件名就是文件的名称，是为了方便人们区分计算机中的不同文件，而给每个文件设定一个指定的名称。</p>
<p>文件名不能包含控制字符: <code>&lt;</code> <code>&gt;</code> <code>/</code> <code>\</code> <code>|</code> <code>:</code> <code>"</code> <code>*</code> <code>?</code></p>
<h2>文件扩展名</h2>
<p>文件扩展名 (filename extension) 也称为文件的延伸文件名、后缀名，是操作系统用来标记文件类型的一种机制。通常来说，一个扩展名是跟在主文件名后面的，由一个分隔符分隔。</p>
<p>文件扩展名是早期操作系统 (如 VMS / CP / M / DOS 等) 用来标志文件格式的一种机制，其更重要的作用是让系统决定当用户想打开这个文件的时候用哪种软件运行，如 Windows 系统中 exe 文件是可执行文件，doc 文件默认用 Microsoft Word 打开的 Word 文件。</p>
<div class="hint-container tip">
<p class="hint-container-title">误区</p>
<ol>
<li>
<p>文件扩展名是一个文件的必要构成部分。❌</p>
<p>任何一个文件可以有或没有扩展名。对于打开文件操作，没有扩展名的文件需要选择程序去打开它，有扩展名的文件会自动用设置好的程序(如有)去尝试打开，文件扩展名是一个常规文件的构成部分，但一个文件并不一定需要一个扩展名。</p>
</li>
<li>
<p>文件扩展名表明了该文件是何种类型。❌</p>
<p>文件扩展名可以人为设定，扩展名为 TXT 的文件有可能是一张图片，同样，扩展名为 MP3 的文件，依然可能是一个视频。</p>
</li>
</ol>
</div>
]]></content>
    <category term="基础"/>
    <published>2019-12-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Glob</title>
    <id>https://blog.ruizhou.cf/code/basic/glob.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/glob.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>本文介绍 Glob 匹配。</p>
]]></summary>
    <content type="html"><![CDATA[<p>本文介绍 Glob 匹配。</p>
<!-- more -->
<h2>简介</h2>
<p>Glob 是当您要进行路径匹配时键入的模式。</p>
<p>在解析一条匹配模式前，Glob 首先将 <code>{}</code> 部分展开为一组匹配模式。<code>{}</code> 内的模式之间使用逗号分隔。</p>
<p>如 <code>a{/b/c,bcd}</code> 将扩展为 <code>a/b/c</code> 和 <code>abcd</code></p>
<p><code>{}</code> 可以嵌套，可与其他模式联用。</p>
<p>Glob 的魔术字符如下:</p>
<ul>
<li>
<p><code>*</code>: 匹配路径部分中的 0 个或多个字符</p>
</li>
<li>
<p><code>?</code>: 匹配单个字符</p>
</li>
<li>
<p><code>[...]</code>: 匹配字符范围。<code>[^...]</code>和 <code>[!...]</code> 表示匹配不在范围内的字符</p>
<details class="hint-container details"><summary>例子</summary>
<ul>
<li><code>[xyz].js</code> 只能匹配 <code>x.js</code>, <code>y.js</code>, <code>z.js</code>，但不会匹配 <code>xy.js</code>, <code>xyz.js</code> 等，因为整个中括号只代表一个字符。其等价于 <code>[x-z].js</code></li>
<li><code>[!xyz].js</code> 能匹配 <code>a.js</code>, <code>b.js</code>, <code>u.js</code>，但不会匹配 <code>x.js</code>, <code>y.js</code> <code>z.js</code>，<code>ab.js</code> 等。其等价于 <code>[^xyz].js</code> 和 <code>[!x-z].js</code>。</li>
</ul>
</details>
</li>
<li>
<p><code>!(pattern|pattern|pattern)</code>: 匹配与提供的任何模式都不匹配的任何内容。</p>
</li>
<li>
<p><code>?(pattern|pattern|pattern)</code>: 匹配 0 或一个内部模式。</p>
</li>
<li>
<p><code>+(pattern|pattern|pattern)</code> 匹配一个或多个内部模式。</p>
</li>
<li>
<p><code>*(a|b|c)</code>: 匹配 0 或多个内部模式。</p>
</li>
<li>
<p><code>@(pattern|pat*|pat?erN)</code>: 匹配恰好一个内部模式。</p>
</li>
<li>
<p><code>**</code>: 如果其在路径部分中单独出现，则匹配路径中的 0 个或多个目录与子目录。请注意它不对 symlinked 目录 (符号链接目录) 进行爬取。</p>
<details class="hint-container details"><summary>例子</summary>
<ul>
<li><code>**</code> 能匹配匹配所有的目录和文件。</li>
<li><code>**/*.js</code> 能匹配所有的 js 文件。</li>
<li><code>a/**/b.txt</code> 能匹配目录里任何一个 a 文件夹内的所有 b.txt 文件。</li>
</ul>
</details>
</li>
</ul>
<h2><code>.</code> 开头的文件与文件夹</h2>
<p>由于以 <code>.</code> 开头的文件或文件夹在 Unix 中视为隐藏文件或文件夹，故 Glob 不会匹配任何以 <code>.</code> 开头的路径部分，如 <code>.github/dependabot.yml</code> 或 <code>.eslintrc.js</code>。</p>
<p>如果的确想要匹配 <code>.</code> 开头的文件或文件夹，可以显示标注出来，如 <code>.*.js</code> 可以匹配 <code>.eslintrc.js</code>。</p>
]]></content>
    <author>
      <name>陈慧玲</name>
    </author>
    <category term="基础"/>
    <contributor>
      <name>陈慧玲</name>
    </contributor>
    <published>2021-02-18T00:00:00.000Z</published>
    <rights>Copyright by 陈慧玲</rights>
  </entry>
  <entry>
    <title type="text">开源协议</title>
    <id>https://blog.ruizhou.cf/code/basic/license.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/license.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>开源软件在追求“自由”的同时，不能牺牲程序员的利益，否则将会影响程序员的创造激情，因此世界上现在有 60 多种被开源促进组织 (Open Source Initiative) 认可的开源许可协议来保证开源工作者的权益。</p>
<p>开源协议规定了您在使用开源软件时的权利和责任，也就是规定了您可以做什么，不可以做什么。</p>
<p>开源协议虽然不一定具备法律效力，但是当涉及软件版权纠纷时，开源协议也是非常重要的证据之一。</p>
]]></summary>
    <content type="html"><![CDATA[<p>开源软件在追求“自由”的同时，不能牺牲程序员的利益，否则将会影响程序员的创造激情，因此世界上现在有 60 多种被开源促进组织 (Open Source Initiative) 认可的开源许可协议来保证开源工作者的权益。</p>
<p>开源协议规定了您在使用开源软件时的权利和责任，也就是规定了您可以做什么，不可以做什么。</p>
<p>开源协议虽然不一定具备法律效力，但是当涉及软件版权纠纷时，开源协议也是非常重要的证据之一。</p>
<!-- more -->
<p>对于准备编写一款开源软件的开发人员，也非常建议先了解一下当前最热门的开源许可协议，选择一个合适的开源许可协议来最大限度保护自己的软件权益。</p>
<h2>GNU GPL</h2>
<blockquote>
<p>GNU General Public License，GNU 通用公共许可证</p>
</blockquote>
<p>只要软件中包含了遵循 GPL 协议的产品或代码，该软件就必须也遵循 GPL 许可协议，也就是必须开源免费，不能闭源收费，因此这个协议并不适合商用软件。</p>
<p>遵循 GPL 协议的开源软件数量极其庞大，包括 Linux 系统在内的大多数的开源软件都是基于这个协议的。</p>
<p>GPL 开源协议的主要特点:</p>
<ul>
<li>
<p>复制自由</p>
<p>允许把软件复制到任何人的电脑中，并且不限制复制的数量。</p>
</li>
<li>
<p>传播自由</p>
</li>
</ul>
<p>允许软件以各种形式进行传播。</p>
<ul>
<li>
<p>收费传播</p>
<p>允许在各种媒介上出售该软件，但必须提前让买家知道这个软件是可以免费获得的；因此，一般来讲，开源软件都是通过为用户提供有偿服务的形式来盈利的。</p>
</li>
<li>
<p>修改自由</p>
<p>允许开发人员增加或删除软件的功能，但软件修改后必须依然基于 GPL 许可协议授权。</p>
</li>
</ul>
<h2>BSD</h2>
<blockquote>
<p>Berkeley Software Distribution，伯克利软件发布版) 协议</p>
</blockquote>
<p>BSD 协议基本上允许用户“为所欲为”，用户可以使用、修改和重新发布遵循该许可的软件，并且可以将软件作为商业软件发布和销售，前提是需要满足下面三个条件:</p>
<ul>
<li>如果再发布的软件中包含源代码，则源代码必须继续遵循 BSD 许可协议。</li>
<li>如果再发布的软件中只有二进制程序，则需要在相关文档或版权文件中声明原始代码遵循了 BSD 协议。</li>
<li>不允许用原始软件的名字、作者名字或机构名称进行市场推广。</li>
</ul>
<p>BSD 对商业比较友好，很多公司在选用开源产品的时候都首选 BSD 协议，因为可以完全控制这些第三方的代码，甚至在必要的时候可以修改或者二次开发。</p>
<h2>Apache 许可证版本</h2>
<blockquote>
<p>(Apache License Version) 协议</p>
</blockquote>
<p>Apache 开源协议</p>
<p>Apache 和 BSD 类似，都适用于商业软件。Apache 协议在为开发人员提供版权及专利许可的同时，允许用户拥有修改代码及再发布的自由。</p>
<p>现在热门的 Hadoop、Apache HTTP Server、MongoDB 等项目都是基于该许可协议研发的，程序开发人员在开发遵循该协议的软件时，要严格遵守下面的四个条件:</p>
<ul>
<li>该软件及其衍生品必须继续使用 Apache 许可协议。</li>
<li>如果修改了程序源代码，需要在文档中进行声明。</li>
<li>若软件是基于他人的源代码编写而成的，则需要保留原始代码的协议、商标、专利声明及其他原作者声明的内容信息。</li>
<li>如果再发布的软件中有声明文件，则需在此文件中标注 Apache 许可协议及其他许可协议。</li>
</ul>
<h2>MIT</h2>
<blockquote>
<p>(Massachusetts Institute of Technology) 协议</p>
</blockquote>
<p>目前限制最少的开源许可协议之一(比 BSD 和 Apache 的限制都少)，只要程序的开发者在修改后的源代码中保留原作者的许可信息即可，因此普遍被商业软件所使用。</p>
<p>使用 MIT 协议的软件有 PuTTY、X Window System、Ruby on Rails、Lua 5.0 onwards、Mono 等。</p>
<h2>GUN LGPL</h2>
<blockquote>
<p>(GNU Lesser General Public License，GNU 宽通用公共许可证)</p>
</blockquote>
<p>LGPL 是 GPL 的一个衍生版本，也被称为 GPL V2，该协议主要是为类库设计的开源协议。</p>
<p>LGPL 允许商业软件通过类库引用(link)的方式使用 LGPL 类库，而不需要开源商业软件的代码。这使得采用 LGPL 协议的开源代码可以被商业软件作为类库引用并发布和销售。</p>
<p>但是如果修改 LGPL 协议的代码或者衍生品，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用 LGPL 协议。因此 LGPL 协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以 LGPL 协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>
<h2>如何选择开源协议</h2>
<p>世界上的开源协议有上百种，很少有人能彻底搞清它们之间的区别，即使在最流行的六种开源协议——GPL、BSD、MIT、Mozilla、Apache 和 LGPL——之中做选择，也很复杂。</p>
<p>乌克兰程序员 Paul Bagwell 画了一张分析图，说明应该怎么选择开源协议，大家看了一目了然，真是清爽。</p>
]]></content>
    <category term="基础"/>
    <published>2019-12-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">开源与免费</title>
    <id>https://blog.ruizhou.cf/code/basic/open-source-and-free.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/open-source-and-free.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>开源软件和免费软件是两个概念:</p>
<ul>
<li>
<p>开源软件是指公开源代码的软件。开源软件在发行的时候会附上软件的源代码，并授权允许用户更改、传播或者二次开发。</p>
</li>
<li>
<p>免费软件就是免费提供给用户使用的软件，但是在免费的同时，通常也会有一些限制，比如源代码不公开，用户不能随意修改、不能二次发布等。</p>
</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<p>开源软件和免费软件是两个概念:</p>
<ul>
<li>
<p>开源软件是指公开源代码的软件。开源软件在发行的时候会附上软件的源代码，并授权允许用户更改、传播或者二次开发。</p>
</li>
<li>
<p>免费软件就是免费提供给用户使用的软件，但是在免费的同时，通常也会有一些限制，比如源代码不公开，用户不能随意修改、不能二次发布等。</p>
</li>
</ul>
<!-- more -->
<h2>免费软件</h2>
<p>免费软件的例子比比皆是，QQ、微信、迅雷、酷狗、360 等都是免费软件，您可以随意使用，尽情蹂躏；但是，如果您嫌弃它们复杂，自己删除了一些无用的功能，然后在网上发布了一个精简版本供大家下载，那么您就离法院的传票不远了。</p>
<h2>开源软件</h2>
<p>开源软件是不抵触商业的，开源的目的也不是做慈善事业，而是通过更多人的参与，减少软件的缺陷，丰富软件的功能，同时也避免了少数人在软件里留一些不正当的后门。开源软件最终还会反哺商业，让商业公司为用户提供更好的产品。</p>
<p>Android 就是大众最熟知的一款开源操作系统，它除了用在手机上，还用在汽车、平板电脑、电视、智能手表等其它硬件平台，小米、华为、OPPO、三星等都是 Android 的受益者，他们都赚得盆满钵满。</p>
<p>很多著名的开源项目背后都有商业公司支撑，它们的开发者也都有正式的工作，享受和我们一样的社会福利；如果一个成功的开源项目背后没有商业公司，这反而是不健康的，社会需要开源和商业之间的互补来促进技术的革新。</p>
<p>开源软件和商业公司的裙带关系:</p>
<ul>
<li>
<p>Android 由全球最大的互联网公司 Google 支持；</p>
</li>
<li>
<p>市场占有率最高的关系型数据库 mysql 已经被上市公司 Oracle 收购；</p>
</li>
<li>
<p>Linux 不但被 Microsoft、IBM、Intel、SAMSUNG 等巨头免费赞助，还接收它们贡献的源代码；</p>
</li>
<li>
<p>Python 目前属于 &lt;python.org&gt; 开源组织，它收到了 Facebook、Google、Amazon、Redhat、Microsoft 等商业公司的赞助。</p>
</li>
</ul>
<h2>开源软件的盈利模式</h2>
<p>伟大的开源软件的背后都有巨量的资金流入，没有资金支撑的开源软件是无法长久的。那么，开源软件究竟是如何盈利的呢?</p>
<ol>
<li>
<p>双重许可</p>
<p>有些开源软件不但有一个免费的基础版本，还有一个收费的商业版本。免费版本能够促进传播，让用户爱上该软件；收费版本功能更加丰富，还提供技术支持。这种情况在开源界非常普遍。</p>
<p>例如 MySQL 就同时推出面向个人和企业的两种版本，即开源版本和专业版本，分别采用不同的授权方式: 开源版本完全免费以便更好的推广，而从专业版的许可销售和支持服务获得收入。</p>
</li>
<li>
<p>技术支持</p>
<p>很多软件在使用上不收取费用，但当用户在使用产品遇到困难，需要技术支持的时候，就需要付费了。技术支持收费的这项服务，也是一些开源公司的生计之路。</p>
<p>例如，最大的开源软件公司 Redhat 被 IBM 收购，卖了 340 亿美元。Redhat 虽然提供免费的 Linux 发行版(当然也有收费的版本)，但是当使用者遇到技术障碍，或者想升级硬件的时候，Redhat 可以提供付费支持。</p>
<p>举个例子，纽交所在用免费的红帽 Linux 系统交易股票。英特尔最近升级了处理器，纽交所想用新处理器提高效率，但这需要有人为新硬件部署新的系统和应用程序。同样的事每隔几年会发生一次。纽交所可以养一个团队自己完成所有系统维护、开发工作，也可以花钱请红帽的工程师来做。相当数量的企业用户都选择了后者。</p>
</li>
<li>
<p>附加服务</p>
<p>JBoss 就是这种模式的典型代表。JBoss 应用服务器完全免费，而通过提供技术文档、培训、二次开发支持等技术服务而获得收入。</p>
<p>开源软件出版商 O’Reilly 公司也是这种模式，它不遗余力地联系开源软件的权威人士，组织各种开源软件的会议，虽然知识是免费的，但承载知识的书籍却是收费的。</p>
</li>
<li>
<p>应用服务托管(ASP)</p>
<p>例如 PHP Live ! 就是一种构架于 PHP、MySQL 之上的开源软件，它可为企业用户提供实时交谈服务。目前已经有数十家公开提供 PHP Live! 托管服务的应用服务提供商。</p>
</li>
<li>
<p>软硬件一体化</p>
<p>比如 IBM、HP 等服务器供应商巨头，通过捆绑免费的 Linux 操作系统销售硬件服务器。SUN 公司近期将其 Solaris 操作系统开放源码，以确保服务器硬件的销售收入，也是这种模式的体现。</p>
<p>这些巨头每年在开源软件领域的投入巨大，但这一切并非是做善事，它们可以从配置了开源软件的硬件中获得巨额回报。</p>
</li>
<li>
<p>部分组件收费</p>
<p>开源免费的软件可以满足大部分用户的需求，但是也有很多用户需要一些特殊的定制服务，这个时候软件公司就会收取一定的费用。</p>
</li>
<li>
<p>版权收费</p>
<p>虽然代码是开源的，但很多作者会采用一些开源协议来限制自己版权问题，如果用户想要去版权，是需要另外付费的。</p>
</li>
<li>
<p>捐款/赞助</p>
<p>很多开源软件都有一些捐款渠道，喜爱该软件的用户，或者该软件的受益者都可以进行资金支持。</p>
<p>例如，Python 就有一个软件基金协会，它收到了来自 Facebook、Amazon、Google、Redhat、Microsoft 等巨头的赞助。</p>
<p>这些公司也不傻，他们为什么会赞助 Python 呢? 因为这些公司大量使用了 Python 语言，他们希望 Python 能够持续发展，如果 Python 倒了，他们也会跟着倒霉。</p>
</li>
</ol>
]]></content>
    <category term="基础"/>
    <published>2020-06-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">操作系统</title>
    <id>https://blog.ruizhou.cf/code/basic/os.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/os.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>操作系统 (Operating System，OS) 是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁(或者说接口、中间人、中介等)。</p>
]]></summary>
    <content type="html"><![CDATA[<p>操作系统 (Operating System，OS) 是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁(或者说接口、中间人、中介等)。</p>
<!-- more -->
<p>操作系统会控制其他程序运行，管理系统资源，提供最基本的计算功能，如管理及配置内存、决定系统资源供需的优先次序等，同时还提供一些基本的服务程序，例如:</p>
<ol>
<li>
<p>文件系统</p>
<p>提供计算机存储信息的结构，信息存储在文件中，文件主要存储在计算机的内部硬盘里，在目录的分层结构中组织文件。文件系统为操作系统提供了组织管理数据的方式。</p>
</li>
<li>
<p>设备驱动程序</p>
<p>提供连接计算机的每个硬件设备的接口，设备驱动器使程序能够写入设备，而不需要了解执行每个硬件的细节。简单来说，就是让您能吃到鸡蛋，但不用养一只鸡。</p>
</li>
<li>
<p>用户接口</p>
<p>操作系统需要为用户提供一种运行程序和访问文件系统的方法。如常用的 Windows 图形界面，可以理解为一种用户与操作系统交互的方式；智能手机的 Android 或 iOS 系统，也是一种操作系统的交互方式。</p>
</li>
<li>
<p>系统服务程序</p>
<p>当计算机启动时，会自启动许多系统服务程序，执行安装文件系统、启动网络服务、运行预定任务等操作。</p>
</li>
</ol>
<p>打个比方，操作系统就好像是一个政府，其它软件都会被它管控；操作系统在给其他软件提供各种便利的同时，还会约束其他软件不能为所欲为。</p>
<figure><figcaption>操作系统结构示意图</figcaption></figure>
<p>目前流行的服务器和 PC 端操作系统有 Linux、Windows、UNIX 等，手机操作系统有 Android、iOS，嵌入式操作系统有 Windows CE、PalmOS、eCos、uClinux 等。</p>
]]></content>
    <category term="基础"/>
    <published>2019-12-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">路径</title>
    <id>https://blog.ruizhou.cf/code/basic/path.html</id>
    <link href="https://blog.ruizhou.cf/code/basic/path.html"/>
    <updated>2024-07-24T03:08:09.000Z</updated>
    <summary type="html"><![CDATA[<p>无论是我们想直接访问一个文件，还是在一个文件中希望访问另一个文件，都涉及到一个获取文件的操作。而无论是在 Windows 中还是在 Linux 中，文件的具体位置都用文档的路径标注。</p>
<p>路径常常涉及到物理路径，相对路径，绝对路径，根目录的概念，现加以说明。</p>
]]></summary>
    <content type="html"><![CDATA[<p>无论是我们想直接访问一个文件，还是在一个文件中希望访问另一个文件，都涉及到一个获取文件的操作。而无论是在 Windows 中还是在 Linux 中，文件的具体位置都用文档的路径标注。</p>
<p>路径常常涉及到物理路径，相对路径，绝对路径，根目录的概念，现加以说明。</p>
<!-- more -->
<h2>物理路径</h2>
<p>物理路径的英文全称是: Physical path，它就是指硬盘上文件的路径，比如下面的文件位置表示方法:</p>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>d:\wwwroot\html\a.html</span></span>
<span class="line"><span>d:\wwwroot\html\photo\b.html</span></span>
<span class="line"><span>d:\wwwroot\html\photo\c.html</span></span>
<span class="line"><span>d:\wwwroot\html\photo\ours\d.html</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><code>D:</code> 与 <code>d:</code> 均可。盘符不分大小写。</p>
</blockquote>
<p>一般来说物理路径可用于访问本地文件，即不通过 WEB 服务器(如: 本地调试)等的情况下。</p>
<h2>相对路径</h2>
<p>相对路径的英文全称是 Relative Path，我们可以从以下三个方面来了解它的用法 (以“物理路径”中的位置情况为例):</p>
<ul>
<li>
<p>如何表示同级目录的文件</p>
<p>b.html 和 c.html 在同一个文件夹下，如果 b.html 需要链接到 c.html，可以在 b.html 中这样写:</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"./c.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;同目录下文件间互相链接&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>代码中的 <code>./</code> 代表同级目录。</p>
<p><code>./</code>是相对路径，也可以省略不写，省略不写，即直接以文件夹或文件名称开头的路径也是相对路径。</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"./c.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;同目录下文件间互相链接&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
<li>
<p>如何表示上级目录的文件</p>
<p>a.html 是 b.html 和 c.html 的上级目录中的文件，如果 b.html 或 c.html 链接到 a.html，可以在 b.html 或 c.html 中这样写:</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"../a.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到上级目录中的文件&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>代码中的 <code>../</code> 代表一级上级目录(间隔一个目录)。</p>
<p>需要注意的是: “<code>../../</code>”代表二级上级目录(间隔两个目录)，比如 a.html 是 d.html 的前两级目录，同时 d.html 需要链接到 a.html，可以在 d.html 中这样写:</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"../../a.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到上级目录的上级目录中的文件&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
<li>
<p>如何表示子目录的文件</p>
<p>b.html 和 c.html 是 a.html 的子目录中的文件，如果需要在 a.html 中链接到 b.html， 可以在 a.html 中这样写:</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"photo/b.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到子目录(photo)中的文件&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">如果需要在a.html中链接到d.html，可以在a.html中这样写</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"photo/ours/d.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到子目录(photo/ours/)中的文件&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
<h2>绝对路径</h2>
<p>绝对路径的英文全称是 Absolute Path，它就是带有网址的路径。比如您有一个域名 <code>www.example.com</code>，其域名指向 <code>d:\wwwroot</code>，那么上面的四个文件就可以这么表示:</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.example.com/html/a.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到a.html&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.example.com/html/photo/b.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到b.html&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.example.com/html/photo/c.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到c.html&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.example.com/html/photo/ours/d.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到d.html&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>根目录</h2>
<p>根目录的英文全称是 Root directory，去掉绝对路径前面的域名就是根目录，所以它可以理解为是网站的最上层目录。它的表示方法如下:</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/html/a.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到a.html&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/html/photo/b.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到b.html&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/html/photo/c.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到c.html&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/html/photo/ours/d.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;链接到d.html&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务器上，根目录即代表网站主页所在的目录。网站服务器一般只能访问网站主页所在文件夹内的文件与文件夹。</p>
]]></content>
    <category term="基础"/>
    <published>2019-09-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">GitHub</title>
    <id>https://blog.ruizhou.cf/code/github/</id>
    <link href="https://blog.ruizhou.cf/code/github/"/>
    <updated>2024-07-24T03:08:09.000Z</updated>
    <summary type="html"><![CDATA[<h2>快速上手</h2>
]]></summary>
    <content type="html"><![CDATA[<h2>快速上手</h2>
]]></content>
    <category term="GitHub"/>
    <published>2019-11-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">自动部署</title>
    <id>https://blog.ruizhou.cf/code/github/deploy.html</id>
    <link href="https://blog.ruizhou.cf/code/github/deploy.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>本文介绍如何利用 Git 和 GitHub Action，自动部署代码到服务器。</p>
]]></summary>
    <content type="html"><![CDATA[<p>本文介绍如何利用 Git 和 GitHub Action，自动部署代码到服务器。</p>
<!-- more -->
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>由于 Centos 仍然是用 GitV1，本教程使用 Ubuntu 20.04 进行教学。</p>
</div>
<h2>服务器</h2>
<p>为了能供自动部署到服务器，我们需要让服务器的网站目录成为一个 Git 仓库，这样我们可以在 GitHub Actions 中，通过向服务器对应 GitHub 仓库推送网站内容，使服务器网站获得自动更新。下面是服务器侧的部署配置</p>
<h3>添加账户</h3>
<p>为了安全，首先需要使用命令创建 Git 用户，为了安全请务必设置密码。</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> adduser</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> git</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>之后，查看部署目录所在组，git 用户添加到组中。</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">usermod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -G</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">目录所在</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">组&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">git</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>然后将部署目录的权限设置为 <code>775</code>，即允许同组访问。这样 git 就有权限访问部署目录。</p>
<h3>添加权限</h3>
<p>创建 <code>~/.ssh/</code> 文件夹，生成 <code>authorized_keys</code> 文件，并设置其权限为 <code>600</code>。</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/.ssh/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">touch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/.ssh/authorized_keys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">chmod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 600</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~/.ssh/authorized_keys</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后将需要赋予权限的用户公钥依次粘贴至该文件，这样相关用户即可以使用对应私钥，向服务器相关仓库推送代码。</p>
<h3>创建仓库</h3>
<p>回到 <code>/home/git/</code>，创建所需的文件夹:</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ~</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mkdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">仓库</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">名&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>进入文件夹，使用</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --separate-git-dir=.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">部署位</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">置&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>这会将 git 库保持在 <code>/home/git/&lt;仓库名&gt;</code> 下，同时将工作区设置到部署文件夹中。</p>
<p>接下来执行:</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> receive.denyCurrentBranch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ignore</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --global</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> --add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> safe.directory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">部署文件</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">夹&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note">
<p class="hint-container-title">注</p>
<p>Git 默认拒绝外部对当前分支的推送操作，因为这可能会覆盖或变更工作区文件。所以我们需要显式通知 Git 不要拒绝当前分支的推送操作。</p>
<p>另外在新版本 Git 中，考虑到安全因素，Git 会在检出时检测项目文件夹是否属于其他组成员，如果检测到会默认拒绝相关操作以防止其他用于获取到本不应该获取到的代码信息。因为部署文件夹的所有者通常不会是 git，所以我们需要标记对应的部署文件夹“安全”。</p>
</div>
<h2>GitHub Actions</h2>
<p>在 GitHub 一侧，我们需要通过 GitHub Action，在新代码推送时自动构建网站，并部署到 GitHub 的 gh-pages 分支。之后，GitHub Action 将该分支的变动推送服务器的对应仓库，完成网站的自动部署。</p>
<p>之后只需要使用 GitHub Action 通过 Git 推送到 <code>git@&lt;domain&gt;:&lt;部署目录&gt; gh-pages</code> 即可。</p>
<div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 自动部署的名称</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">GitHub pages deploy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"># 自动部署的条件</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    branches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">jobs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 构建网站并部署到 GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  deploy-gh-pages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 运行环境</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    runs-on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 步骤</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    steps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 第一步: 下载源码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Checkout</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # action 配置详见 https://github.com/actions/checkout</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 如果本项目包含了子模块 (git submodules)，需要将此项设置为 true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # submodules: true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 这是获取历史 commit 的深度，默认为 1，即只拉取最后一个 commit</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 这样可以加快拉取速度</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          #</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 如果项目使用 VuePress，为了正确通过 Git 历史提交记录生成页面的最后更新时间</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 需要设置为 0 以拉取完整的 git 历史提交</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # fetch-depth: 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 如果子模块包含私有仓库，需要设置 ssh key 或 token 以保证拥有拉取相应仓库的权限</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 您可以将 ssh-key 设置为 github 绑定公钥对应的私钥</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 也可以新建一个具有相关仓库访问权限的 github token</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # token:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 缓存 node_modules 以避免重复安装</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">actions/cache@v3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">node-modules</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 需要缓存的路径</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">node_modules/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 缓存的 key</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 恢复 key</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          restore-keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">            ${{ runner.os }}-node-modules-</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Install Deps</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 只有没有命中缓存才会执行</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">steps.node-modules.outputs.cache-hit != 'true'</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 严格按照 yarn.lock 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">yarn install --frozen-lockfile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 构建项目</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Build</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 项目的构建命令</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">yarn run build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 第四步，部署</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Deploy</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # action 配置详见 https://github.com/JamesIves/github-pages-deploy-action</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">JamesIves/github-pages-deploy-action@v4</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 部署到的分支</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          branch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">gh-pages</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 需要部署的文件夹</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          folder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">dist</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  # 部署到服务器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  deploy-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    runs-on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    # 确保在部署到 GitHub Pages 之后执行</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    needs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">deploy-gh-pages</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">    steps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 检出网站代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Checkout</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 检出 gh-pages 分支</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">gh-pages</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          # 获取全部的历史提交</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">          fetch-depth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 配置环境</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Configuration environment</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 写入私钥、配置 Git 用户名，写入服务器地址</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 您需要自行将服务器的私钥写入 secrets 的 SSH_PRIVATE_KEY</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          mkdir -p ~/.ssh/</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          echo "${{ secrets.SSH_PRIVATE_KEY }}" &gt; ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          chmod 600 ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          ssh-keyscan &lt;your domain&gt; &gt;&gt; ~/.ssh/known_hosts</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          git config --global user.name 'Your Name'</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          git config --global user.email 'You email'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">      # 部署到服务器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Deploy</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 使用 Git 将网站代码强制推送到远程的网站目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        # 并使用 SSH 连接服务器进入网站目录手动切换到最新提交</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">        run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          git push -f git@&lt;your domain&gt;:&lt;deploy dir&gt; gh-pages</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">          ssh git@&lt;your domain&gt; "cd &lt;deploy dir&gt; &amp;&amp; git reset --hard HEAD"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="GitHub"/>
    <published>2021-01-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">GitHub 简介</title>
    <id>https://blog.ruizhou.cf/code/github/intro.html</id>
    <link href="https://blog.ruizhou.cf/code/github/intro.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<h2><s>Gayhub</s> GitHub 是世界上最大的 <s>同性交友</s> 代码托管网站</h2>
<p>😋 当然在上面交友也是极好的(这是重点，圈起来要考的😎)。</p>
<h2>基本概念</h2>
<h3>Repository</h3>
<p>仓库。一个仓库即是一个项目。仓库是 GitHub 上的主要内容。每当您新建一个项目并想要在 GitHub。</p>
<h3>Star</h3>
<p>收藏。在每一个仓库主页的上方可以看到 star 按钮。其上的数值为收藏该项目的人数。点击星星即可将当前仓库收藏到您的账号上。您可以收藏一些您比较喜欢，或者项目对您来说有很大价值的项目。同时，点击数字可以看到哪些人收藏了这个项目。</p>]]></summary>
    <content type="html"><![CDATA[<h2><s>Gayhub</s> GitHub 是世界上最大的 <s>同性交友</s> 代码托管网站</h2>
<p>😋 当然在上面交友也是极好的(这是重点，圈起来要考的😎)。</p>
<h2>基本概念</h2>
<h3>Repository</h3>
<p>仓库。一个仓库即是一个项目。仓库是 GitHub 上的主要内容。每当您新建一个项目并想要在 GitHub。</p>
<h3>Star</h3>
<p>收藏。在每一个仓库主页的上方可以看到 star 按钮。其上的数值为收藏该项目的人数。点击星星即可将当前仓库收藏到您的账号上。您可以收藏一些您比较喜欢，或者项目对您来说有很大价值的项目。同时，点击数字可以看到哪些人收藏了这个项目。</p>
<h3>Fork</h3>
<p>复刻。在每一个仓库主页的上方可以看到 Fork 按钮。点击该按钮的作用是将当前项目复刻一份到自己的仓库中，这样，您就可以在此仓库仓库上查看当前、历史的版本，切换分支、或者是随心所欲的进行修改。原项目的新的推送、对历史版本的修改、甚至原作者删除了他的 repo，都不会对您 fork 的项目产生任何影响。</p>
<h3>Issue</h3>
<p>议题。你可将这里理解为 Bug 汇报区与新功能提交区。</p>
<p>如果您在使用该项目的过程中遇到了问题，可以在相应项目的 Issue 板块按照项目的要求提出 Issue。在 Issue 中可以汇报一个 bug，或者是提出一个 Feature Request (功能请求)。项目的拥有者可以针对您汇报的情况对您做出回复。</p>
<p>同时，项目拥有者还可以:</p>
<ul>
<li>为此 issue 增加 label (标签)，以帮助项目成员或是项目的其他使用者更好的理解这个 issue 的分类</li>
<li>将此 issue assign (分派) 给特定的项目成员解决。</li>
<li>将此 issue 加入特定的 project (项目) 以安排处理日期与进度。</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>为了 GitHub 的友好交流环境，请在汇报 bug 时永远带上 bug 的一个简易的复现流程，可以直接建立一个简单的 reproduction repo 并把链接放置在您提出的 issue 中。</p>
</div>
<h3>Pull Request</h3>
<p>发起推送请求，简称 <strong>PR</strong>。如果是您自己的项目，您可以从一个分支向另一个分支发起推送请求。如果您想对别人的(您无权进行推送)项目进行代码的推送请求的化，需要先 fork 这个仓库。在自己 fork 的项目上进行修改，然后提交到自己的项目上，之后，建立一个从自己仓库到对方仓库的 PR。如果对方觉得您的新改动很不错，在经过测试或者 review 后就会接受它，这样原有项目就可拥有这些新的代码了.</p>
<h3>Discussion</h3>
<p>GitHub 的讨论区，和 Issue 区主要用于 Bug 和 Feature Request 的追踪不同，通常情况下，你可以在讨论区开帖子询问使用中遇到的问题，以便其他人进行答复。你也可以在 Discussion 区提供项目的看法与建议，比如对某个功能进行改进的方式以及相关理由。你也可以展示你自己使用项目的一些新的或是与项目相关的一些内容。</p>
<h3>Watch</h3>
<p>关注，在每一个仓库主页的上方可以看到 Watch 按钮。如果您关注了某个项目,那么这个项目有了变化的时候,您就会得到通知.在您点击关注后，您还可以点击下拉列表进一步设置关注级别。您可以选择接受 Release (新发布) 通知，也可以选择 Watching 来监听所有的通知。当您选择 Ignore 的话，即使有人在这个仓库中 mention (提到) 了您，您也不会得到通知。</p>
<h3>Review</h3>
<p>审查。当项目收到 PR 时，项目的拥有成员可以对这份 PR 的代码改动进行审查，在 Review 的过程中，可以对代码的特定行或特定几行通过 comment(评论) 的方式来提出自己对代码改动的意见。</p>
<h2>主页</h2>
<figure><figcaption>主页</figcaption></figure>
<p><a href="https://github.com" target="_blank" rel="noopener noreferrer">https://github.com</a></p>
<p>主页，在您登陆后，屏幕的左侧会展示您和您加入团队的项目，以及您的团队详情。中部会显示您关注的项目、人的动态，右侧会根据算法展示一些您可能会感兴趣的 repo。</p>
<h2>个人主页</h2>
<figure><figcaption>个人主页</figcaption></figure>
<p><strong>地址:</strong> <code>https://github.com/&lt;您的用户名&gt;</code></p>
<p>个人主页会有几个主要面板:</p>
<h3>Overview</h3>
<p>个人概览，您可以在上方 pin(固定) 最多六个您想要展示给他人的仓库。</p>
<p>下方就是您过去一年里向 GitHub 的提交数量分布图，以及您在 GitHub 上的活动比例。</p>
<p>最下方是近几年您在 GitHub 上的活动记录。</p>
<h3>Repositories</h3>
<figure><figcaption>个人仓库</figcaption></figure>
<p>仓库列表，该面板会按照最后更新时间的倒序，展示该用户拥有的所有 repo，同时也会在面板上展示项目的 Description (描述)、Star 数、Fork 数、语言、协议、标签，以及过去一年内项目的 commit 分布数量。这些都能够帮助浏览者在不进入具体仓库页面的情况下大致了解每一个仓库的内容、欢迎程度与维护情况。</p>
<h3>Projects</h3>
<p>个人拥有的项目，在管理自己与团队跨仓库的活动日程时很有用。可以设置涉及到的仓库，提出任务、代办、时间表等。</p>
<h3>Packages</h3>
<p>个人在 GitHub 上拥有的包。目前较少人在 GitHub 上发布相关的包。</p>
<h3>Stars</h3>
<p>和仓库列表完全相同，只不过展示该用户收藏的 repo。</p>
<h3>Followers / Following</h3>
<p>关注您的人 / 关注的人。在个人主页的左侧就有 follow 按钮，follow 一个人意味着这个人在 GitHub 的的活动会出现在 GitHub 主页的 Activity List 上。</p>
<h2>仓库主页</h2>
<figure><figcaption>仓库主页</figcaption></figure>
<p>仓库主页主要显示项目的信息。从左到右的面板依次是: Code(代码)，Issues (问题)、Pull Requests (提交请求)、Discussions (讨论)、Actions (自动流程)、 Projects (项目)、 Wiki (项目介绍)、 Security (项目安全)、 Insights (项目数据统计) 与 Settings (项目设置)。</p>
<blockquote>
<p>仓库可以选择关闭 Issues、Discussions、Wiki 之类的面板。</p>
</blockquote>
<p>在下方会展示代码文件以及项目说明 README.md 文件。</p>
]]></content>
    <category term="GitHub"/>
    <published>2019-11-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">GitHub Pages</title>
    <id>https://blog.ruizhou.cf/code/github/pages.html</id>
    <link href="https://blog.ruizhou.cf/code/github/pages.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>GitHub Pages 是静态站点托管服务，可直接从 GitHub 上的存储库中获取 HTML，CSS 和 JavaScript 文件，还可以选择在构建过程中运行这些文件并发布网站。</p>
<p>您可以将站点托管在 GitHub 的 <code>github.io</code> 域名或您自己的自定义域名上。</p>
]]></summary>
    <content type="html"><![CDATA[<p>GitHub Pages 是静态站点托管服务，可直接从 GitHub 上的存储库中获取 HTML，CSS 和 JavaScript 文件，还可以选择在构建过程中运行这些文件并发布网站。</p>
<p>您可以将站点托管在 GitHub 的 <code>github.io</code> 域名或您自己的自定义域名上。</p>
<!-- more -->
<h2>简介</h2>
<p>GitHub Pages 站点共有三种类型: 项目，用户和组织。</p>
<p>项目站点连接到 GitHub 上托管的特定项目，而用户和组织站点已连接到特定的 GitHub 帐户。</p>
<ul>
<li>要发布用户站点，您必须创建一个名为的用户帐户拥有的存储库 <code>&lt;username&gt;.github.io</code>。</li>
<li>要发布组织站点，您必须创建一个名为的组织所拥有的存储库 <code>&lt;organization&gt;.github.io</code>。</li>
</ul>
<p>除非您使用自定义域名，否则用户站点和组织站点均位于 <code>http(s)://&lt;username&gt;.github.io</code> 或 <code>http(s)://&lt;organization&gt;.github.io</code>。</p>
<p>项目站点的源文件与其项目存储在同一存储库中。除非您使用自定义域，否则项目站点可在 <code>http(s)://&lt;username&gt;.github.io/&lt;repository&gt;</code> 或 <code>http(s)://&lt;organization&gt;.github.io/&lt;repository&gt;</code> 访问。</p>
<p>虽然您只能在 GitHub 上为每个帐户创建一个用户或组织站点。但无论是组织还是用户帐户拥有的项目站点都是无限的。</p>
<h2>发布源文件到 GitHub Pages</h2>
<div class="hint-container caution">
<p class="hint-container-title">警告</p>
<p>GitHub Pages 站点 默认在互联网上公开，即使站点的仓库是私有的。</p>
</div>
<p>如果您的存储库中存在默认发布源，则 GitHub Pages 将自动从该源发布网站。用户和组织站点的默认发布源是存储库的默认分支的根目录。项目站点的默认发布源是 gh-pages 分支的根目录。</p>
<p>您需要跳转到 Settings (设置) 选项卡，下来找到 GitHub Pages 的配置部分。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>您只能在根目录 (<code>/</code>) 和 文档目录 (<code>/docs</code>) 之间进行选择，而不能将仓库内的任意文件夹作为发布源。</p>
</div>
<h3>静态站点</h3>
<p>GitHub Pages 发布您推送到存储库的所有静态文件，这意味它不支持服务器端语言，例如 PHP，Ruby 或 Python。也就是您只能通过 GitHub Pages 发布 “无后端” 的纯静态站点。</p>
<h3>限制</h3>
<ul>
<li>
<p>GitHub Pages 网站不得超过 1 GB。</p>
</li>
<li>
<p>GitHub Pages 站点的带宽限制为每月 100GB。</p>
</li>
<li>
<p>GitHub Pages 站点限制为每小时最多构建 10 次。</p>
</li>
</ul>
<h3>子模块</h3>
<p>如果 GitHub Pages 站点的仓库包含子模块，则在构建站点时会自动拉取其内容。</p>
<p>只能使用指向公共仓库的子模块，因为 GitHub Pages 服务器无法访问私有仓库。</p>
<p>对子模块 (包括嵌套子模块) 使用 <code>https://</code> 只读 URL。 您可以在 .gitmodules 文件中进行此更改。</p>
<h2>取消发布</h2>
<h3>取消发布项目站点</h3>
<ol>
<li>在 GitHub 上，导航到仓库的主页面。</li>
<li>如果仓库中存在 gh-pages 分支，请删除 gh-pages 分支。</li>
<li>在仓库名称下，单击 Settings (设置) 。</li>
<li>在“ GitHub Pages”下，使用 Source (源) 下拉菜单并选择 None (无) 。</li>
</ol>
<h3>取消发布用户或组织站点</h3>
<ol>
<li>在 GitHub 上，导航到仓库的主页面。</li>
<li>删除用作发布源的分支，或删除整个仓库。</li>
</ol>
<h2>自定义域名</h2>
<p>您可以在对应仓库的 Settings (设置) 选项卡设置自定义域名，同时您需要将自定义域名的 CNAME 记录指向 <code>&lt;用户名&gt;.github.io</code>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>自定义域名的控制是由发布源文件夹下的 CNAME 文件控制的，您可以直接创建这个文件写入链接。</p>
<p>同时，GitHub Pages 要求这个文件一直存在，否则自定义域名会失效。</p>
</div>
]]></content>
    <category term="GitHub"/>
    <published>2021-02-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Pull Request</title>
    <id>https://blog.ruizhou.cf/code/github/pr.html</id>
    <link href="https://blog.ruizhou.cf/code/github/pr.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>简介</h2>
<p>对于一个用户的公开仓库，在默认情况下虽然其他用户可以拉取该库的代码，但是他们并不能够直接向这个库进行推送。</p>
<p>GitHub 是一个代码社区，这意味着鼓励大家互相提交与贡献代码。所以这就是 Fork 和 Pull Request 出现的意义。没有人会给一个陌生人添加访问自己仓库的权限，所以我们需要一种方式，能够让大家向仓库所有者发起贡献代码的请求。这就是 pull request 的由来。</p>
<h2>提交自己贡献的代码</h2>
<p>对于代码贡献者来说，他需要用一种方法将自己贡献的代码推送到远程库上，以便发起请求，最好的办法就是 fork 原仓库。</p>]]></summary>
    <content type="html"><![CDATA[<h2>简介</h2>
<p>对于一个用户的公开仓库，在默认情况下虽然其他用户可以拉取该库的代码，但是他们并不能够直接向这个库进行推送。</p>
<p>GitHub 是一个代码社区，这意味着鼓励大家互相提交与贡献代码。所以这就是 Fork 和 Pull Request 出现的意义。没有人会给一个陌生人添加访问自己仓库的权限，所以我们需要一种方式，能够让大家向仓库所有者发起贡献代码的请求。这就是 pull request 的由来。</p>
<h2>提交自己贡献的代码</h2>
<p>对于代码贡献者来说，他需要用一种方法将自己贡献的代码推送到远程库上，以便发起请求，最好的办法就是 fork 原仓库。</p>
<figure><figcaption>Fork 仓库</figcaption></figure>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>相关介绍，请见 <a href="/code/github/intro.html#fork" target="_blank">GitHub 简介 → fork</a></p>
</div>
<p>这样，贡献者在自己的账号上获得一个和原仓库完全相同的副本。</p>
<p>既然副本已经创建在自己的账号上，贡献者自然可以:</p>
<ol>
<li>克隆这个项目到本地</li>
<li>在这个项目上贡献自己的代码</li>
<li>将贡献的代码推送到这个副本上</li>
</ol>
<h2>发送请求</h2>
<p>pull request 是请求仓库所有者拉取指定仓库分支代码的请求。</p>
<p>在贡献自己的代码并推送到自己的 fork 仓库后，贡献者即可到原仓库去选择自己仓库的对应分支发送这个拉取请求。仓库所有者随时可以批准这个更改，使其自动添加到自己的库中，或是拒绝这个请求。</p>
<figure><figcaption>Pull request</figcaption></figure>
<blockquote>
<p>这个仓库我已经删了所以显示 <code>unknown repository</code>，原为 <code>Mister-Hope:master</code></p>
</blockquote>
<p>这个页面允许所有人在主要对话线上交换自己的意见。</p>
<p>在 Pull request 里，一旦请求被创建，仓库所有者应该可以直观地看到哪些文件发生了怎样的改变。</p>
<figure><figcaption>文件改动</figcaption></figure>
<p>同时，他们也可以对贡献者的代码进行审查，对特定行或片段标注，并陈述自己的意见，同时将这个意见根据程度标注为“探讨”、“改进”或者“必须更改”，以便贡献者进行交流讨论与完善修改。</p>
<figure><figcaption>代码审查</figcaption></figure>
<p>同时，对于一个大型库来说，仓库所有者应该可以看到贡献的代码是否通过了所有测试。</p>
<figure><figcaption>测试通过情况</figcaption></figure>
<p>如果审查者认为没有问题，他可能就会通过这个拉取请求，拉取对应的代码到自己的仓库上。这样您就完成了对这个仓库的贡献。</p>
<h2>同步原仓库</h2>
<p>需要注意的是，fork 创建的是一个时刻副本，也就是自己 fork 产生的仓库，会保持 fork 时的状态，原仓库的任何变动都不会自动同步到 fork 的仓库上。</p>
<p>有些时候，在自己 fork 原仓库、自己编写代码并提交的这段时间里，原仓库已经进行了很多提交。这时，我们就需要同步原仓库的更新到自己的副本上，以确保自己贡献的代码并未和新增代码发生冲突、可以正常工作。</p>
<p>这个时候只需反向拉取，在自己的仓库创建原仓库特定分支到自己仓库特定分支的 Pull request，并批准这个 pull request。这样即可很方便的将原仓库特定分支的更新同步到自己的副本上。</p>
<p>您当然可以在本地添加原仓库的远程库，将最新的更改直接 fetch 到本地，在本地测试通过并完成合并后，由本地推送至自己的 fork 仓库。</p>
]]></content>
    <category term="GitHub"/>
    <published>2021-02-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">语义化提交</title>
    <id>https://blog.ruizhou.cf/code/github/semantic.html</id>
    <link href="https://blog.ruizhou.cf/code/github/semantic.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>Semantic</h2>
<p>对于一个大型项目，几千个 commit 是很常见的，这些 commit 部分是项目维护者提交的 commit，部分是一些热心的开发者通过 PR 贡献的。</p>
<p>无论是对于项目维护者，还是想要贡献代码的热心开发者来说，一个简洁明了的 commit 描述都是必不可少的。也就是说我们需要用尽可能简短的备注信息，备注每一个 commit 的作用，以便大家查看。所以我们需要一种规范的，语义化的备注格式，很快由知名项目牵头，全球接收并统一了一种语义化的备注格式，这就是 semantic 规范的来源。</p>
<h2>优势</h2>
<p>当一个仓库所有的 commit 信息都是用标准的 semantic 格式时，用户可以很方便的理解每一个 commit 的作用。</p>]]></summary>
    <content type="html"><![CDATA[<h2>Semantic</h2>
<p>对于一个大型项目，几千个 commit 是很常见的，这些 commit 部分是项目维护者提交的 commit，部分是一些热心的开发者通过 PR 贡献的。</p>
<p>无论是对于项目维护者，还是想要贡献代码的热心开发者来说，一个简洁明了的 commit 描述都是必不可少的。也就是说我们需要用尽可能简短的备注信息，备注每一个 commit 的作用，以便大家查看。所以我们需要一种规范的，语义化的备注格式，很快由知名项目牵头，全球接收并统一了一种语义化的备注格式，这就是 semantic 规范的来源。</p>
<h2>优势</h2>
<p>当一个仓库所有的 commit 信息都是用标准的 semantic 格式时，用户可以很方便的理解每一个 commit 的作用。</p>
<p>同时，semantic 支持直接将某个提交或 PR 与特定 issue 链接，并自动关闭或引用这些 issue。</p>
<p>通过一些第三方工具，大家可以基于这些备注信息进行过滤查找，更新日志生成等操作。</p>
<h2>格式</h2>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;footer&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>header</h3>
<p>第一行被称为 <code>header</code>，它必须只有一行，包括三个字段: <code>&lt;type&gt;</code>(必需)、<code>&lt;scope&gt;</code>(可选)和 <code>&lt;subject&gt;</code>(必需)</p>
<h3>type</h3>
<p>commit 的类型。</p>
<p>规范中规定了如下类型:</p>
<ul>
<li><code>feat</code>: feature, 新增功能</li>
<li><code>fix</code> : bug fix, 修复 bug</li>
<li><code>docs</code>: documentation, 仅仅修改了文档，如 <code>README.md</code></li>
<li><code>style</code>: style, 仅仅是对格式进行修改，如逗号、缩进、空格等，不改变代码逻辑</li>
<li><code>refactor</code>: refactor, 代码重构，一般更改了源文件或测试文件，但没有新增功能或修复 bug</li>
<li><code>perf</code>: performance, 优化相关，如提升性能、用户体验等</li>
<li><code>test</code>: test, 测试用例，包括单元测试，集成测试</li>
<li><code>chore</code>: chore, 对于库的其他内容的改变，一般不涉及到源文件或测试文件，比如更改 CI 设置，提升仓库以来等</li>
<li><code>revert</code>: 版本回滚</li>
</ul>
<h3>scope</h3>
<p>用于说明 commit 影响的范围，比如: <code>views</code> , <code>component</code>, <code>utils</code>, <code>test</code>。这个是由项目的内容与结构决定的。</p>
<h3>subject</h3>
<p>commit 目的的简短描述，最好小于 50 字符，一般不超过 65 个字符，最长不超过 80 字符。</p>
<p>当 subject 限制的字符数无法详细说明此 commit 的变动时，将 commit 的具体变动放置在 body 中</p>
<h3>body</h3>
<p>对本次 commit 修改内容的具体描述，可以分为多行。<code>body</code> 是可选的，而且 <code>body</code> 可以有多行。</p>
<h3>footer</h3>
<p>可选的，前面有一空行。可以添加一些备注，一般放置 <code>BREAKING CHANGE</code>(一些破坏性的变动) 或修复的 bug(涉及的 issue)的链接。</p>
<h2>Semantic commit 与 Changelog 生成</h2>
<p>不同语言环境都有很多种工具来帮助您创建一个 semantic commit 或者自动生成 changelog。</p>
<div class="hint-container tip">
<p class="hint-container-title">案例</p>
<p>Node.js 环境下可以使用:</p>
<ul>
<li>
<p><a href="https://github.com/commitizen/cz-conventional-changelog" target="_blank" rel="noopener noreferrer"><code>cz-conventional-changelog</code></a> 提供 <code>git cz</code> 命令辅助创建 semantic commit。</p>
</li>
<li>
<p><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener noreferrer"><code>conventional-changelog-cli</code></a> 来快速生成更新日志，如 <a href="https://github.com/Mister-Hope/vuepress-theme-hope/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer">vuepress-theme-hope 的更改日志</a></p>
</li>
</ul>
</div>
]]></content>
    <category term="GitHub"/>
    <published>2021-01-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">加速 GitHub 克隆</title>
    <id>https://blog.ruizhou.cf/code/github/speedup.html</id>
    <link href="https://blog.ruizhou.cf/code/github/speedup.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>由于 GFW 的存在，GitHub 的访问速度在大部分国内地区都很慢，甚至不稳定。如果需要克隆体积比较大的项目，可能需要很长时间，也很大概率会在中途因为网络波动、终端问题导致克隆失败。</p>
<p>本文介绍如何使用 Gitee 加快 GitHub 项目克隆。</p>
<h2>Gitee</h2>
<p>Gitee 又称码云，是一个国内的代码托管商，国内访问 Gitee 的速度是十分 Amazing 的。</p>
<h3>注册</h3>
<p>Gitee 账户可以很方便的通过 GitHub 账户 + 绑定手机号注册。</p>
<h3>添加公钥</h3>
<p>完成注册后，您需要上传本地公钥，以保证可以从 Gitee 上拉取或克隆，其步骤与 GitHub 大致相同。</p>]]></summary>
    <content type="html"><![CDATA[<p>由于 GFW 的存在，GitHub 的访问速度在大部分国内地区都很慢，甚至不稳定。如果需要克隆体积比较大的项目，可能需要很长时间，也很大概率会在中途因为网络波动、终端问题导致克隆失败。</p>
<p>本文介绍如何使用 Gitee 加快 GitHub 项目克隆。</p>
<h2>Gitee</h2>
<p>Gitee 又称码云，是一个国内的代码托管商，国内访问 Gitee 的速度是十分 Amazing 的。</p>
<h3>注册</h3>
<p>Gitee 账户可以很方便的通过 GitHub 账户 + 绑定手机号注册。</p>
<h3>添加公钥</h3>
<p>完成注册后，您需要上传本地公钥，以保证可以从 Gitee 上拉取或克隆，其步骤与 GitHub 大致相同。</p>
<h3>导入 GitHub 仓库</h3>
<p>码云的企业专线访问 GitHub 的速度很快，而码云在新建仓库的时候提供了导入选项，这就给我们的加速提供了方式。</p>
<p>我们只需要在码云上新建仓库，选择导入，然后输入自己想要克隆的 GitHub 仓库地址，交给码云完成导入即可。</p>
<p>稍等片刻后，码云即会将 GitHub 的仓库同步到自己的服务器上，此时我们只需要克隆码云上的这个仓库地址，就可以高速克隆这个项目。</p>
<h3>远程库地址修改</h3>
<p>在克隆完毕后，本地的 origin 远程库会默认为 Gitee 的仓库，此时我们需要使用 <code>git remote rename origin gitee</code> 命令，将码云的远程仓库重命名为 <code>gitee</code>，并使用 <code>git remote add origin &lt;github url&gt;</code> 命令重新添加 GitHub 的远程仓库为 origin。</p>
<p>这样我们稍后在做出本地提交后，即可直接推送到 GitHub 仓库。</p>
<h3>同步仓库</h3>
<p>如果以导入的形式创建码云仓库。则可以随时点击仓库页面上的同步图标，让码云随时拉取最新的 gitee 代码，以便在本地通过 <code>git fetch gitee</code>，通过码云服务器高速拉取最新代码。</p>
]]></content>
    <category term="GitHub"/>
    <published>2021-02-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">GitHub Token</title>
    <id>https://blog.ruizhou.cf/code/github/token.html</id>
    <link href="https://blog.ruizhou.cf/code/github/token.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>Personal Access Token (PAT)，又称个人访问令牌，是一种代替密码进行 GitHub 身份认证的方式。</p>
<p>通常情况下，你可能需要在 GitHub Workflow 中使用 PAT，以便在 GitHub Actions 中使用需要授权的 GitHub API。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Personal Access Token (PAT)，又称个人访问令牌，是一种代替密码进行 GitHub 身份认证的方式。</p>
<p>通常情况下，你可能需要在 GitHub Workflow 中使用 PAT，以便在 GitHub Actions 中使用需要授权的 GitHub API。</p>
<!-- more -->
<h2>创建个人访问令牌</h2>
<ol>
<li>
<p>访问 <a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener noreferrer">新建 Token 页面</a> (当然您需要先登陆 GitHub)</p>
<blockquote>
<p>或者可以点击头像 → Settings → Developer settings → Personal access tokens → Generate new Token</p>
</blockquote>
</li>
<li>
<p>输入一个备注，选择您需要授权 Token 访问的内容，之后点击页面底部的 "Generate Token"</p>
</li>
<li>
<p>妥善保存该 Token (因为您无法再次查看它)</p>
</li>
</ol>
<p>详见 <a href="https://docs.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token" target="_blank" rel="noopener noreferrer">创建个人访问令牌</a></p>
]]></content>
    <category term="GitHub"/>
    <published>2021-01-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">代码学习教程</title>
    <id>https://blog.ruizhou.cf/code/language/</id>
    <link href="https://blog.ruizhou.cf/code/language/"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<ul>
<li><a href="/code/language/learning.html" target="_blank">如何学习一门语言</a></li>
</ul>
<h2>教程目录</h2>
<ul>
<li>
<p><a href="/code/language/js/" target="_blank">JavaScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/typescript/" target="_blank">TypeScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/python/" target="_blank">Python 教程</a> (编写中...)</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744" target="_blank" rel="noopener noreferrer">Java 教程</a>(廖雪峰的博客)</p>
</li>
<li>
<p><a href="/code/language/markdown/" target="_blank">Markdown 教程</a></p>
</li>
<li>
<p><a href="/code/language/yaml/" target="_blank">YAML 教程</a></p>
</li>
<li>
<p><a href="/code/language/json/" target="_blank">JSON 教程</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<ul>
<li><a href="/code/language/learning.html" target="_blank">如何学习一门语言</a></li>
</ul>
<h2>教程目录</h2>
<ul>
<li>
<p><a href="/code/language/js/" target="_blank">JavaScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/typescript/" target="_blank">TypeScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/python/" target="_blank">Python 教程</a> (编写中...)</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744" target="_blank" rel="noopener noreferrer">Java 教程</a>(廖雪峰的博客)</p>
</li>
<li>
<p><a href="/code/language/markdown/" target="_blank">Markdown 教程</a></p>
</li>
<li>
<p><a href="/code/language/yaml/" target="_blank">YAML 教程</a></p>
</li>
<li>
<p><a href="/code/language/json/" target="_blank">JSON 教程</a></p>
</li>
</ul>
<h2>Linter</h2>
<ul>
<li><a href="/code/language/linter/" target="_blank">Linter 介绍</a></li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>C 、C++、Java、PHP 正在编写中...</p>
</div>
]]></content>
    <category term="教程"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">如何学习一门计算机语言</title>
    <id>https://blog.ruizhou.cf/code/language/learning.html</id>
    <link href="https://blog.ruizhou.cf/code/language/learning.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>学习一门语言的基本顺序是:</p>
<ul>
<li>了解数据结构</li>
<li>了解变量声明与赋值</li>
<li>了解判断和循环体结构</li>
<li>了解函数声明</li>
<li>了解输入输出</li>
</ul>
<p>本部分将以 JS 作为示例，展示什么是一门计算机语言，应该如何学习它们。</p>
</div>
<h2>基础</h2>
<p>首先，任何语言都是由一些基本结构组成的，下面介绍几乎所有语言共有的一些概念:</p>]]></summary>
    <content type="html"><![CDATA[
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>学习一门语言的基本顺序是:</p>
<ul>
<li>了解数据结构</li>
<li>了解变量声明与赋值</li>
<li>了解判断和循环体结构</li>
<li>了解函数声明</li>
<li>了解输入输出</li>
</ul>
<p>本部分将以 JS 作为示例，展示什么是一门计算机语言，应该如何学习它们。</p>
</div>
<h2>基础</h2>
<p>首先，任何语言都是由一些基本结构组成的，下面介绍几乎所有语言共有的一些概念:</p>
<h3>语句</h3>
<p>语句可以简单理解为一个操作，它可以是赋值，也可以是执行，还可以是介于或者是可以归类到两者上的判断、声明、标记等。</p>
<p>请注意一条语句通常是一个计算机语言描述的最小操作。</p>
<p>比如:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 赋值</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello word"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 调用函数 执行操作</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 判断</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>代码块</h3>
<p>通常情况下，在有了语句概念后，我们就要使用不同的语句顺序，完成不同的操作，但是某些操作总是固定的。</p>
<p>比如回家，总是 “掏出钥匙”-“插入钥匙”-“转动钥匙”-“开启房门”-“拔出钥匙”-“进入”-“关闭房门” 。</p>
<p>这些步骤每一步都可以理解为一个语句，但是由于其顺序基本是固定的，我们就可以设计一个代码块，来约束它们。</p>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  “掏出钥匙”;</span></span>
<span class="line"><span>  “插入钥匙”;</span></span>
<span class="line"><span>  “转动钥匙”;</span></span>
<span class="line"><span>  “开启房门”;</span></span>
<span class="line"><span>  “拔出钥匙”;</span></span>
<span class="line"><span>  “进入”;</span></span>
<span class="line"><span>  “关闭房门”;</span></span>
<span class="line"><span>}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数语言会使用 <code>{ }</code> 的形式，少数语言会使用统一的缩进进行表达。</p>
<h2>数据结构</h2>
<p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。</p>
<p>任何语言都是操作、计算(处理)、生成数据的。数据结构是一门语言存放数据的方式。不同的数据，需要定义不同的数据类型。了解了数据结构就了解了一门语言可以存储或处理何种数据。</p>
<p>大多数语言都包含了以下的一种或多种内容:</p>
<ul>
<li>
<p>数字:</p>
<p>不同语言对数字有不同的处理方式，少数语言可能只有数字这一种类型，一些语言可能会拆分成整数与浮点数。一些底层语言(涉及到内存)可能会魔鬼的将数字拆分为: 整型、浮点数、无符号整型、长整型、无符号长整形、长浮点数。(说的就是您，C 语言)</p>
</li>
<li>
<p>字符串:</p>
<p>一些语言只有字符串这个概念，一些语言分为字符和字符串这个概念。</p>
</li>
<li>
<p>布尔值:</p>
<p>几乎所有语言都有布尔值，布尔值只有真和假两种类型。大多数会表示为 <code>true</code> 和 <code>false</code>，少数会表示为 <code>True</code> 和 <code>False</code>。</p>
</li>
<li>
<p>数组:</p>
<p>大部分语言都有数组 (Array) 这个概念，它是一个有序的元素集合。很多底层语言就是靠数组实现的字符串 (因为字符串长度不固定)。在数组中，每个元素具有标号，从 0 开始依次递增。</p>
<p>一些语言还有 Set 这个概念，Set 表示的是无序元素集合，所有元素没有先后与标号的概念，自然 Set 也无法存入相同的元素。</p>
</li>
<li>
<p>对象:</p>
<p>大部分语言的对象 (Object) 都是由键值对组成的，它是一个由键标记的元素集合，可以使用特定的键名写入或读取其对应的值。</p>
<p>一些产生较晚的语言，将对象改为 Map，Map 表达一个映射，将对应的键映射到对应的值上。</p>
</li>
<li>
<p>类:</p>
<p>类 (Class) 是一个内容集合，它包含了自己的构造器、变量与方法。类在声明后，可以很轻松的使用构造器创建一个新的实例。每个实例可以用其内部的变量维护或表达一个状态，并可以使用它自身的方法来读取或是改变自己的状态。不同的类之间还可以进行继承。</p>
</li>
</ul>
<h2>变量</h2>
<p>一个<strong>变量</strong>是数据的“命名存储”。我们可以使用变量来保存商品、访客和其他信息。</p>
<p>下面的语句创建(换句话说，<strong>声明</strong>或者<strong>定义</strong>)了一个名称为“message”的变量:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>在有了变量之后，我们就可以将刚了解的数据结构赋值给变量，以变量来代替这些数据。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> user</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "John"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> age</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 25</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> message</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>条件</h2>
<p>条件运算符用于判断，通过判断一个条件的真假，来执行不同的逻辑。这是每一门语言逻辑结构的基础。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> year</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2015</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">year</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2015</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Too early..."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">year</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2015</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Too late"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Exactly!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>循环</h2>
<p>循环运算符的作用，是在条件控制下，零次或多次执行特定代码块。它使得重复执行成为了可能。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 计算1+2+3+...+100的结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 结果为 0、1、2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>函数</h2>
<p>函数是程序的主要“构建模块”，</p>
<p>创建函数时，需要声明函数内容，函数内容由一系列语句(代码块) 构成。在声明函数后，使用函数即可多次调用一段代码。</p>
<p>例如:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> showMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello everyone!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">} </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 声明一个函数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">showMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 调用它</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">showMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 可以在任意时刻调用它</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时函数可以通过接受参数的形式来根据情况返回不同的结果，比如这是一个简单的求和函数。</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">sum1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">sum2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sum1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> sum2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// return 3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// return 11</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="教程"/>
    <published>2020-05-04T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">小程序</title>
    <id>https://blog.ruizhou.cf/code/mini-app/</id>
    <link href="https://blog.ruizhou.cf/code/mini-app/"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在开发小程序之前。应当掌握 <a href="/code/website/html/" target="_blank">HTML</a>、<a href="/code/website/css/" target="_blank">CSS</a>、<a href="/code/language/js/guide/" target="_blank">JavaScript 基础</a> 以及 <a href="/code/language/js/es6/" target="_blank">ES6</a>。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在开发小程序之前。应当掌握 <a href="/code/website/html/" target="_blank">HTML</a>、<a href="/code/website/css/" target="_blank">CSS</a>、<a href="/code/language/js/guide/" target="_blank">JavaScript 基础</a> 以及 <a href="/code/language/js/es6/" target="_blank">ES6</a>。</p>
</div>
<!-- more -->
<h2>小程序基础简介</h2>
<p>在微信小程序中主要有四种文件结构: <code>wxml</code>、<code>wxss</code>、<code>js</code> 和 <code>json</code>。其中 <code>wxml</code> 对应带有 vue.js 特征的 html5，<code>wxss</code> 对应 css3，<code>js</code> 对应 ES6 标准的的 javaScript。</p>
<p>对于 QQ 小程序，其文件结构为 <code>QML</code>、<code>qss</code>、<code>js</code> 和 <code>json</code>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>QQ 小程序本质还是换汤不换药的，且 QQ 开发者工具兼容 <code>wxml</code> 与 <code>wss</code>)</p>
</div>
<p>小程序开发与网页开发极其相似。所以必须有适当的网页开发基础。零基础的人可能很难直接上手小程序开发。</p>
<h2>教程目录</h2>
<ul>
<li>
<p><a href="/code/mini-app/guide/file-structure.html" target="_blank">文件结构</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/env.html" target="_blank">运行环境</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/" target="_blank">小程序配置</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/config/app-config.html" target="_blank">全局配置</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/page-config.html" target="_blank">页面配置</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/sitemap-config.html" target="_blank">sitemap 配置</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/" target="_blank">小程序框架</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/frame/intro.html" target="_blank">框架介绍</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/scene.html" target="_blank">场景值</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/env.html" target="_blank">运行环境</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/mechanism.html" target="_blank">运行机制</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/update.html" target="_blank">更新机制</a> </p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/service/" target="_blank">逻辑层</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/service/lifetime.html" target="_blank">生命周期</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/route.html" target="_blank">路由</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/register.html" target="_blank">注册</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/app.html" target="_blank">App()</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/page.html" target="_blank">Page()</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/run.html" target="_blank">运行</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/module.html" target="_blank">模块化</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/api/" target="_blank">API</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/view/" target="_blank">视图层</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/view/wxml.html" target="_blank">WXML</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxss.html" target="_blank">WXSS</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs.html" target="_blank">WXS</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/event.html" target="_blank">事件</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/component.html" target="_blank">基础组件</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/animation.html" target="_blank">动画</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs.html" target="_blank">WXS</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs-event.html" target="_blank">WXS 事件</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/model.html" target="_blank">建议双向绑定</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/selector.html" target="_blank">获取界面上的节点信息</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/selector.html" target="_blank">相应显示区域变化</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/rendering-cache.html" target="_blank">初始渲染缓存</a> </p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/" target="_blank">小程序能力</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/ability/network.html" target="_blank">网络请求</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/storage.html" target="_blank">存储</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/file-system.html" target="_blank">文件系统</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/debug.html" target="_blank">调试</a></p>
</li>
</ul>
</li>
</ul>
<h2>开发者工具</h2>
<ul>
<li>
<p><a href="/code/mini-app/tools/interface.html" target="_blank">工具界面简介</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/debug.html" target="_blank">调试</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/npm.html" target="_blank">npm</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/audit.html" target="_blank">体验评分</a></p>
</li>
</ul>
<h2>官方教程</h2>
<ul>
<li><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0008aeea9a8978ab0086a685851c0a" target="_blank" rel="noopener noreferrer">点击前往</a></li>
</ul>
<h2>案例</h2>
<ul>
<li><a href="https://github.com/Hope-Studio/wxminiappdemo" target="_blank" rel="noopener noreferrer">GitHub repository</a></li>
</ul>
<h2>Mr.Hope 框架说明</h2>
<ul>
<li>
<p><a href="/code/mini-app/framework/" target="_blank">小程序框架使用说明</a></p>
</li>
<li>
<p><a href="/code/mini-app/framework/tag-list.html" target="_blank">tag 值参数表</a></p>
</li>
<li>
<p><a href="/code/mini-app/framework/page.html" target="_blank">setPage 库使用说明</a></p>
</li>
<li>
<p><a href="/code/mini-app/framework/simple-debug.html" target="_blank">界面简单开发学习指南</a></p>
</li>
<li>
<p><a href="/code/mini-app/qr-code.html" target="_blank">分享相关</a></p>
</li>
</ul>
<h2>学习视频</h2>
<ul>
<li>
<p><a href="https://www.bilibili.com/video/av22790583/" target="_blank" rel="noopener noreferrer">零基础开发小程序</a>(比较新的视频，强调总体思想)</p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/av11938917" target="_blank" rel="noopener noreferrer">小程序-从入门到入土</a>(比较老的视频，针对每个组件或者 API 进行了针对的讲解与示范，但部分内容已经与最新官方文档不符)</p>
</li>
</ul>
<h2>示例代码</h2>
<ul>
<li>
<p><a href="https://github.com/wechat-miniprogram/miniprogram-demo" target="_blank" rel="noopener noreferrer">小程序实例源码</a></p>
<figure><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/demo.ef5c5bef.jpg" alt="小程序示例二维码" tabindex="0" loading="lazy"><figcaption>小程序示例二维码</figcaption></figure>
</li>
</ul>
<h2>官方文档</h2>
<ul>
<li><a href="https://q.qq.com/wiki/" target="_blank" rel="noopener noreferrer">QQ 小程序</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener noreferrer">微信小程序</a></li>
<li><a href="https://developers.weixin.qq.com/community/develop/question" target="_blank" rel="noopener noreferrer">微信小程序社区</a>
<ul>
<li><a href="https://developers.weixin.qq.com/community/develop/list/2?id=" target="_blank" rel="noopener noreferrer">官方公告</a></li>
</ul>
</li>
</ul>
<h3>QQ 开发者工具</h3>
<p>现在很多功能还处于缺失状态，bug 到没之前那么多了。</p>
<ul>
<li>
<p><a href="https://q.qq.com/wiki/" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
<li>
<p><a href="https://q.qq.com/wiki/tools/devtool/" target="_blank" rel="noopener noreferrer">下载地址</a></p>
</li>
</ul>
<h2>微信开发者工具</h2>
<p>微信开发者工具用来开发与调试微信小程序和微信相关网页的官方工具。小程序使用该开发工具进行开发。</p>
<ul>
<li>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener noreferrer">下载地址</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/" target="_blank">开发者工具教程</a></p>
</li>
<li>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank" rel="noopener noreferrer">官方使用指南</a></p>
</li>
</ul>
]]></content>
    <category term="小程序"/>
    <published>2019-11-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">小程序分享</title>
    <id>https://blog.ruizhou.cf/code/mini-app/qr-code.html</id>
    <link href="https://blog.ruizhou.cf/code/mini-app/qr-code.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>二维码生成</h2>
<p>目前小程序二维码生成选用的是<a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html" target="_blank" rel="noopener noreferrer">无限制生成二维码</a>。</p>
<p>我们使用 Postman 软件进行二维码的获取。</p>
<h3>调用凭据获取</h3>
<p>获取任何二维码都需要先获取 <code>access_token</code>，这是小程序全局唯一后台接口调用凭据。<a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html" target="_blank" rel="noopener noreferrer">文档地址</a></p>]]></summary>
    <content type="html"><![CDATA[<h2>二维码生成</h2>
<p>目前小程序二维码生成选用的是<a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html" target="_blank" rel="noopener noreferrer">无限制生成二维码</a>。</p>
<p>我们使用 Postman 软件进行二维码的获取。</p>
<h3>调用凭据获取</h3>
<p>获取任何二维码都需要先获取 <code>access_token</code>，这是小程序全局唯一后台接口调用凭据。<a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html" target="_blank" rel="noopener noreferrer">文档地址</a></p>
<p>请求方式为:</p>
<div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>更多详情可以见文档。<code>AppSecret</code> 由于权限很大不在此文档中直接放置。</p>
<h3>无限制二维码生成</h3>
<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html" target="_blank" rel="noopener noreferrer">文档地址</a></li>
</ul>
<p>在获取 <code>access_token</code> 之后就可以获取小程序二维码了。</p>
<div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">POST https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=ACCESS_TOKEN</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>请注意，在 Postman 软件中，首先要注意使用 <code>post</code> 方法。Body 使用 <code>raw</code>，格式选择 <code>Text</code>，需要将 <code>pretty</code> 化的 JSON 输入即可正常获取二维码。获取完二维码之后，需要在 <code>response</code> 中点击返回图片右上角的 <code>save as</code>，保存为 <code>jpg</code> 格式的文件即可保存二维码。</p>
<h2>小程序链接</h2>
<ul>
<li><a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Service_Center_messages.html" target="_blank" rel="noopener noreferrer">文档地址</a></li>
</ul>
<p>具体格式如下:</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"不支持小程序时打开的网页"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  data-miniprogram-appid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"小程序的appid"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  data-miniprogram-path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"小程序路径"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &gt;文本内容&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="小程序"/>
    <published>2020-10-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Node.js</title>
    <id>https://blog.ruizhou.cf/code/node-js/</id>
    <link href="https://blog.ruizhou.cf/code/node-js/"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>Node.js 是一款全球使用广泛的框架，可以用在前端与后端上，拥有大量的模块。Node.js 主要以其丰富并及其容易导入的 Node.js package，以及其方便管理 npm (Node.js Package Manager)闻名。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Node.js 是一款全球使用广泛的框架，可以用在前端与后端上，拥有大量的模块。Node.js 主要以其丰富并及其容易导入的 Node.js package，以及其方便管理 npm (Node.js Package Manager)闻名。</p>
<!-- more -->
<h2>教程目录</h2>
<ul>
<li>
<p><a href="/code/node-js/intro.html" target="_blank">Node.js 介绍</a></p>
</li>
<li>
<p><a href="/code/node-js/install.html" target="_blank">Node.js 与 npm 安装</a></p>
</li>
<li>
<p><a href="/code/node-js/environment.html" target="_blank">Node.js 环境</a></p>
</li>
<li>
<p><a href="/code/node-js/program.html" target="_blank">编程</a></p>
</li>
<li>
<p><a href="/code/node-js/cjs.html" target="_blank">Node.js CJS 模块</a></p>
</li>
</ul>
<p>以上，就是 Node.js 的简易介绍，系统学习可以查看下方的详细教程。</p>
<h2>初学者教程</h2>
<ul>
<li>
<p><a href="https://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener noreferrer">Node.js 入门</a></p>
</li>
<li>
<p><a href="https://www.w3cschool.cn/nodejs/" target="_blank" rel="noopener noreferrer">W3CSchool</a></p>
</li>
</ul>
<h2>官方文档</h2>
<ul>
<li><a href="https://nodejs.org/dist/latest-v14.x/docs/api/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<h2>Yarn</h2>
<p>快速、可靠、安全的依赖管理工具。</p>
<ul>
<li>
<p>Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。同时利用并行下载以最大化资源利用率，因此安装速度更快。</p>
</li>
<li>
<p>在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</p>
</li>
<li>
<p>使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。</p>
</li>
<li>
<p><a href="https://www.yarnpkg.com/zh-Hans/docs/install#windows-stable" target="_blank" rel="noopener noreferrer">下载地址</a></p>
</li>
<li>
<p><a href="https://www.yarnpkg.com/zh-Hans/docs" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</li>
</ul>
<h3>命令</h3>
<ul>
<li>
<p><code>yarn install</code>: 执行安装</p>
</li>
<li>
<p><code>yarn upgrade</code>: 执行升级</p>
</li>
<li>
<p><code>yarn add &lt;package&gt;</code>: 添加一个包</p>
</li>
<li>
<p><code>yarn config set cache-folder &lt;path&gt;</code>: 更改缓存文件夹</p>
</li>
<li>
<p><code>yarn config set registry &lt;registry&gt;</code>: 更改源</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在国内，建议换成淘宝源 <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener noreferrer">https://registry.npm.taobao.org</a></p>
<p>即执行</p>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> registry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> https://registry.npm.taobao.org</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></div>
</li>
</ul>
]]></content>
    <category term="Node.js"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">模块</title>
    <id>https://blog.ruizhou.cf/code/node-js/cjs.html</id>
    <link href="https://blog.ruizhou.cf/code/node-js/cjs.html"/>
    <updated>2024-01-26T16:16:19.000Z</updated>
    <summary type="html"><![CDATA[<p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p>
<p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Node.js 环境中，一个 <code>.js</code> 文件就称之为一个模块(module)。</p>
<p>使用模块有什么好处?</p>
<p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Node.js 内置的模块和来自第三方的模块。</p>
<p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p>
]]></summary>
    <content type="html"><![CDATA[<p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p>
<p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Node.js 环境中，一个 <code>.js</code> 文件就称之为一个模块(module)。</p>
<p>使用模块有什么好处?</p>
<p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Node.js 内置的模块和来自第三方的模块。</p>
<p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p>
<!-- more -->
<p>在上一节，我们编写了一个 hello.js 文件，这个 hello.js 文件就是一个模块，模块的名字就是文件名(去掉.js 后缀)，所以 hello.js 文件就是名为 hello 的模块。</p>
<p>我们把 hello.js 改造一下，创建一个函数，这样我们就可以在其他地方调用这个函数:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"use strict"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ", "</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 <code>greet()</code> 是我们在 hello 模块中定义的，您可能注意到最后一行是一个奇怪的赋值语句，它的意思是，把函数 <code>greet</code> 作为模块的输出暴露出去，这样其他模块就可以使用 <code>greet</code> 函数了。</p>
<p>问题是其他模块怎么使用 hello 模块的这个 <code>greet</code> 函数呢? 我们再编写一个 <code>main.js</code> 文件，调用 <code>hello</code> 模块的 <code>greet</code> 函数:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"use strict"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 引入hello模块:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> greet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"./hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Michael"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Hello, Michael!</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到引入 <code>hello</code> 模块用 Node.js 提供的 <code>require</code> 函数:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> greet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"./hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>引入的模块作为变量保存在 <code>greet</code> 变量中，那 greet 变量到底是什么东西? 其实变量 <code>greet</code> 就是在 <code>hello.js</code> 中我们用 <code>module.exports = greet;</code> 输出的 <code>greet</code> 函数。所以，<code>main.js</code> 就成功地引用了 <code>hello.js</code> 模块中定义的 <code>greet()</code> 函数，接下来就可以直接使用它了。</p>
<p>在使用 <code>require()</code> 引入模块的时候，请注意模块的相对路径。因为 main.js 和 hello.js 位于同一个目录，所以我们用了当前目录.:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> greet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"./hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 不要忘了写相对目录!</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>如果只写模块名:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> greet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>则 Node.js 会依次在内置模块、全局模块和当前模块下查找 hello.js，您很可能会得到一个错误:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    throw</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">          ^</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">Cannot</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> find</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> module</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'hello'</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">    at</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">_resolveFilename</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">    at</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">_load</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    ...</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">    at</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">_load</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">    at</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B"> Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">Module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B">runMain</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到这个错误，您要检查:</p>
<ul>
<li>模块名是否写对了；</li>
<li>模块文件是否存在；</li>
<li>相对路径是否写对了。</li>
</ul>
<h2>CommonJS 规范</h2>
<p>这种模块加载机制被称为 <code>CommonJS</code> 规范。在这个规范下，每个 <code>.js</code> 文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突，例如，<code>hello.js</code> 和 <code>main.js</code> 都申明了全局变量 <code>const s = 'xxx'</code>，但互不影响。</p>
<p>一个模块想要对外暴露变量(函数也是变量)，可以用 <code>module.exports = variable;</code>，一个模块要引用其他模块暴露的变量，用 <code>const ref = require('module_name');</code> 就拿到了引用模块的变量。</p>
<h2>总结</h2>
<p>要在模块中对外输出变量，用:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> variable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>输出的变量可以是任意对象、函数、数组等等。</p>
<p>要引入其他模块输出的对象，用:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"other_module"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>引入的对象具体是什么，取决于引入模块输出的对象。</p>
<h2>深入了解模块原理</h2>
<p>如果您想详细地了解<strong>CommonJS</strong>的模块实现原理，请继续往下阅读。如果不想了解，请结束阅读。</p>
<p>当我们编写 JavaScript 代码时，我们可以申明全局变量:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "global"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>在浏览器中，大量使用全局变量可不好。如果您在 <code>a.js</code> 中使用了全局变量 s，那么，在 <code>b.js</code> 中也使用全局变量 s，将造成冲突，<code>b.js</code> 中对 s 赋值会改变 <code>a.js</code> 的运行逻辑。</p>
<p>也就是说，JavaScript 语言本身并没有一种模块机制来保证不同模块可以使用相同的变量名。</p>
<p>那 Node.js 是如何实现这一点的?</p>
<p>其实要实现“模块”这个功能，并不需要语法层面的支持。Node.js 也并不会增加任何 JavaScript 语法。实现“模块”功能的奥妙就在于 JavaScript 是一种函数式编程语言，它支持闭包。如果我们把一段 JavaScript 代码用一个函数包装起来，这段代码的所有“全局”变量就变成了函数内部的局部变量。</p>
<p>请注意我们编写的 <code>hello.js</code> 代码是这样的:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "world"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> " "</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Node.js 加载了 hello.js 后，它可以把代码包装一下，变成这样执行:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 读取的hello.js代码:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "world"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> " "</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // hello.js代码结束</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">})();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，原来的全局变量 <code>s</code> 现在变成了匿名函数内部的局部变量。如果 Node.js 继续加载其他模块，这些模块中定义的“全局”变量 <code>s</code> 也互不干扰。</p>
<p>所以，Node.js 利用 JavaScript 的函数式编程的特性，轻而易举地实现了模块的隔离。</p>
<p>但是，模块的输出 <code>module.exports</code> 怎么实现?</p>
<p>这个也很容易实现，Node.js 可以先准备一个对象 <code>module</code>:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 准备module对象:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> module</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> load</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // 读取的hello.js代码:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello, "</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">  module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  // hello.js代码结束</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> exported</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 保存module:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">exported</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，变量 module 是 Node.js 在加载 js 文件前准备的一个变量，并将其传入加载函数，我们在 <code>hello.js</code> 中可以直接使用变量 <code>module</code> 原因就在于它实际上是函数的一个参数:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>通过把参数 <code>module</code> 传递给 <code>load()</code> 函数，<code>hello.js</code> 就顺利地把一个变量传递给了 Node.js 执行环境，Node.js 会把 module 变量保存到某个地方。</p>
<p>由于 Node.js 保存了所有导入的 module，当我们用 <code>require()</code> 获取 module 时，Node.js 找到对应的 module，把这个 module 的 <code>exports</code> 变量返回，这样，另一个模块就顺利拿到了模块的输出:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> greet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"./hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>以上是 Node.js 实现 JavaScript 模块的一个简单的原理介绍。</p>
<h2>module.exports vs exports</h2>
<p>很多时候，您会看到，在 Node.js 环境中，有两种方法可以在一个模块中输出变量:</p>
<p>方法一: 对 module.exports 赋值:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// hello.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello, world!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello, "</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  hello</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  greet</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二: 直接使用 exports:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// hello.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello, world!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello, "</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello, world!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">hello</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">greet</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是您不可以直接对 exports 赋值:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 代码可以执行，但是模块并没有输出任何变量:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  hello</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  greet</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您对上面的写法感到十分困惑，不要着急，我们来分析 Node.js 的加载机制:</p>
<p>首先，Node.js 会把整个待加载的 hello.js 文件放入一个包装函数 load 中执行。在执行这个 load()函数前，Node.js 准备好了 module 变量:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> module</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>load()</code> 函数最终返回 <code>module.exports</code>:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> load</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // hello.js的文件内容</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">    ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // load函数返回:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B"> exported</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，默认情况下，Node.js 准备的 <code>exports</code> 变量和 <code>module.exports</code> 变量实际上是同一个变量，并且初始化为空对象 <code>{}</code>，于是，我们可以写:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "foo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bar</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "bar"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以写:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "foo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bar</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "bar"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>换句话说，Node.js 默认给您准备了一个空对象 <code>{}</code>，这样您可以直接往里面加东西。</p>
<p>但是，如果我们要输出的是一个函数或数组，那么，只能给 <code>module.exports</code> 赋值:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "foo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给 <code>exports</code> 赋值是无效的，因为赋值后，<code>module.exports</code> 仍然是空对象 <code>{}</code>。</p>
<h2>结论</h2>
<p>如果要输出一个键值对象 <code>{}</code>，可以利用 <code>exports</code> 这个已存在的空对象 <code>{}</code>，并继续在上面添加新的键值；</p>
<p>如果要输出一个函数或数组，必须直接对 <code>module.exports</code> 对象赋值。</p>
<p>所以我们可以得出结论: 直接对 <code>module.export</code>s 赋值，可以应对任何情况:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">  foo</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "foo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者:</p>
<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "foo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">};</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，我们强烈建议使用 <code>module.exports = xxx</code> 的方式来输出模块变量，这样，您只需要记忆一种方法。</p>
]]></content>
    <category term="Node.js"/>
    <published>2022-05-14T00:00:00.000Z</published>
  </entry>
</feed>